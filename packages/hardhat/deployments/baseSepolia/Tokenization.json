{
  "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "AddressDoesNotHaveRequiredRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DisputeResolution__AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeEscalated_UnableToVote",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeNotEscalated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeStatusNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__DisputeStatusNotPendingOrEscalated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeDefendantAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeDetails",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeEvidence",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidResolutionDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DisputeResolution__NotEligibleToVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__VotingPeriodStillActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "ERC20TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "InsufficientPermissionsToPerformAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccountAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPaymentMethods",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "currentStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attemptedStatus",
          "type": "string"
        }
      ],
      "name": "InvalidTransportStateTransition",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralNotReadyToTrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralRegistry__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralLocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralPurityPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralStorageConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidReceivingPartyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyAudited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyInspected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyPurchased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralNotAudited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralNotInspected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralRegistry__MineralNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__IncorrectETHAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidETHPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidMineralPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidNumberOfPrices",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidTokenPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralAlreadySold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotFoundInWarehouse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotRefined",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__MismatchedArrays",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__TokenNotAccepted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__UnacceptedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "MineralWarehouse__UnacceptedTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__UnauthorizedSeller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NotAssignedTransporter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AccountAlreadyHasRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AccountDoesNotHaveRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralPurityPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralStorageConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidReceivingPartyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyAudited",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyInspected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyPurchased",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyRefined",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        }
      ],
      "name": "RolesManager__MineralPurityPercentageTooLowToRegister",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RolesManager__NotTheAssignedBuyer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "SupplychainValidator__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplychainValidator__InvalidMineralOwnershipChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplychainValidator__InvalidMineralTransactionHistory",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Tokenization__CallerNotMineralTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__InvalidTokenIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__TokenAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__TokenIsAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "TransactionLog__InvalidOperationIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionLog__InvalidOperationType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "TransactionLog__InvalidTransactionIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "TransportRequestAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuditorRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuditorRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectorRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectorRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auditedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralStatus",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralInspected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchasedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ApprovedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectionDate",
          "type": "uint256"
        }
      ],
      "name": "MineralReadyToTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "refineryReport",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "refiner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refinedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralRefined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "miner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registeredAt",
          "type": "uint256"
        }
      ],
      "name": "MineralRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "transporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivingParty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "destination",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transportedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralTransported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RefinerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RefinerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roleAssignedAt",
          "type": "uint256"
        }
      ],
      "name": "RoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "revoker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roleRevokedAt",
          "type": "uint256"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Transferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransporterRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransporterRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Updated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BUYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSPECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSPORTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "_auditMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignRefiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignTransporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "checkAuditAndInspectionStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRoleCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refinerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transporterCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auditorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inspectorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyerCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "getMineralHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fieldChanged",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "updatedBy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct RolesManager.MineralHistory[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRolesForAddress",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "roles",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isMinted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "getTokenIdByMineralId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAuditorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasBuyerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasInspectorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasMinerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRefinerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasTransporterRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "inspectMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "isMineralRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "mineralDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mineralType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "storageConditions",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "registeredBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "currentStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "currentLocation",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "currentHandler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRefined",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mineralHistories",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fieldChanged",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "mineralToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "purchaseMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "refineMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_mineralType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_origin",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_purityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_storageConditions",
          "type": "string"
        }
      ],
      "name": "registerMineral",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeRefiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeTransporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receivingParty",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_destination",
          "type": "string"
        }
      ],
      "name": "transferMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newDetails",
          "type": "string"
        }
      ],
      "name": "updateMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "audited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "inspected",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "purchased",
          "type": "bool"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
  "receipt": {
    "to": null,
    "from": "0x0dfDb5bBaEeCE3871f826DF1C6Fe24a2772f5d38",
    "contractAddress": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
    "transactionIndex": 17,
    "gasUsed": "5689860",
    "logsBloom": "0x008000040000000000000000000240000000000000040000100000100000005040102000000000000000800000004000010000000044000000000000000000000000000000000000000000000200000000000000000000004000000000200000000000800a1000000000000000000800000000000040100000000000008400000000000400000100000000000000000001000000000000000000000000220000000000020800004000100080000010000100000100000000001000000000400000800000008000000000000000000000000040000000000100000000000020000042000000000000100000000000000000000000000300000000000000000000",
    "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b",
    "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 132,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x458ea7e03b3466b3cf9bc2d66ddea8b11fe9469982816f42666888e6c8c6e664",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359fc",
        "logIndex": 133,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e72",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 134,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf559",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359fc",
        "logIndex": 135,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb3",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359fc",
        "logIndex": 137,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 138,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e092",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359fc",
        "logIndex": 139,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90e",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 140,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0xf8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e97505",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359fc",
        "logIndex": 141,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4d",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 142,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be751",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359fc",
        "logIndex": 143,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 144,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a6",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359fc",
        "logIndex": 145,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 33029518,
        "transactionHash": "0x2f80a4072a29f15c4dc223042c6dd6b5ed926e46994f977b784199094453654c",
        "address": "0x269334D3c3Fb7967E160909245a1efdC3052C685",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 146,
        "blockHash": "0xd2307fda6ea03ab14a5048d4ffef8f17229b71e8c4bba1bf081bcf0b6fa3a91b"
      }
    ],
    "blockNumber": 33029518,
    "cumulativeGasUsed": "11116606",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7c3d72a177373b46b126c9cb9d71da65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"AddressDoesNotHaveRequiredRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DisputeResolution__AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeEscalated_UnableToVote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeNotEscalated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeStatusNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__DisputeStatusNotPendingOrEscalated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeDefendantAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeDetails\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeEvidence\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidResolutionDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DisputeResolution__NotEligibleToVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__VotingPeriodStillActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InsufficientPermissionsToPerformAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccountAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentMethods\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attemptedStatus\",\"type\":\"string\"}],\"name\":\"InvalidTransportStateTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralNotReadyToTrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralRegistry__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralLocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralPurityPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralStorageConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidReceivingPartyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyAudited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyInspected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralNotAudited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralNotInspected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralRegistry__MineralNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__IncorrectETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidETHPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidMineralPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidNumberOfPrices\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidTokenPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralAlreadySold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotFoundInWarehouse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotRefined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__MismatchedArrays\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__TokenNotAccepted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__UnacceptedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"MineralWarehouse__UnacceptedTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__UnauthorizedSeller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotAssignedTransporter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AccountAlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AccountDoesNotHaveRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralPurityPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralStorageConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidReceivingPartyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyAudited\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyInspected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyRefined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"}],\"name\":\"RolesManager__MineralPurityPercentageTooLowToRegister\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RolesManager__NotTheAssignedBuyer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"SupplychainValidator__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplychainValidator__InvalidMineralOwnershipChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplychainValidator__InvalidMineralTransactionHistory\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Tokenization__CallerNotMineralTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__InvalidTokenIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__TokenIsAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TransactionLog__InvalidOperationIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionLog__InvalidOperationType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionLog__InvalidTransactionIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"TransportRequestAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuditorRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuditorRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectorRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectorRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auditedAt\",\"type\":\"uint256\"}],\"name\":\"MineralAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralStatus\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"}],\"name\":\"MineralInspected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"name\":\"MineralPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ApprovedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectionDate\",\"type\":\"uint256\"}],\"name\":\"MineralReadyToTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"refineryReport\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refiner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refinedAt\",\"type\":\"uint256\"}],\"name\":\"MineralRefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"}],\"name\":\"MineralRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingParty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transportedAt\",\"type\":\"uint256\"}],\"name\":\"MineralTransported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefinerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefinerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleAssignedAt\",\"type\":\"uint256\"}],\"name\":\"RoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleRevokedAt\",\"type\":\"uint256\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransporterRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransporterRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSPORTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"_auditMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignRefiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"checkAuditAndInspectionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRoleCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refinerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transporterCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auditorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inspectorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"getMineralHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RolesManager.MineralHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRolesForAddress\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isMinted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"getTokenIdByMineralId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasBuyerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasMinerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRefinerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasTransporterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"inspectMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"isMineralRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mineralDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"storageConditions\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"currentLocation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentHandler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefined\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mineralHistories\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mineralToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"purchaseMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"refineMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_origin\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_storageConditions\",\"type\":\"string\"}],\"name\":\"registerMineral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeRefiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receivingParty\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_destination\",\"type\":\"string\"}],\"name\":\"transferMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newDetails\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"audited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inspected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"purchased\",\"type\":\"bool\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"_auditMineral(string,string)\":{\"details\":\"only the auditor can audit mineralDetails.Logs audit report on every successful audit.\",\"params\":{\"mineralId\":\"The ID of the mineral under audition.\",\"report\":\"The audit status report of the mineral under audition.\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"checkAuditAndInspectionStatus(string)\":{\"details\":\"checks audit and inspection status\",\"params\":{\"mineralId\":\"The ID of the mineral to check for audit and inspection status Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\"}},\"getAllRoleCounts()\":{\"details\":\"Returns all role counts in a single call\",\"returns\":{\"auditorCount\":\"Number of auditors\",\"buyerCount\":\"Number of buyers\",\"inspectorCount\":\"Number of inspectors\",\"minerCount\":\"Number of miners\",\"refinerCount\":\"Number of refiners\",\"transporterCount\":\"Number of transporters\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have a specific role\",\"params\":{\"role\":\"The role to query member count for\"},\"returns\":{\"count\":\"The number of accounts with the role\"}},\"getRolesForAddress(address)\":{\"details\":\"Returns all roles assigned to a given address\",\"params\":{\"account\":\"The address to check roles for\"},\"returns\":{\"roles\":\"An array of role names the address has\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasMinerRole(address)\":{\"details\":\"Roles helper functionschecks if an account has a specific role\",\"params\":{\"account\":\"The address of the account to checked with role association\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"inspectMineral(string,string)\":{\"details\":\"only the inspector can inspect mineralDetailsLogs audit report on every successful inspection\",\"params\":{\"mineralId\":\"The ID of the mineral under inspection\",\"report\":\"The inspection status report of the mineral under inspection\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isMineralRegistered(string)\":{\"details\":\"checks if a mineral with the given ID is registered\",\"params\":{\"mineralId\":\"the ID of the mineral to check\"},\"returns\":{\"_0\":\"A boolean indicating whether the mineral is registered or not\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"purchaseMineral(string)\":{\"details\":\"Only the buyer can purchase mineralDetails\",\"params\":{\"mineralId\":\"The ID of the mineral under purchase\"}},\"refineMineral(string,string)\":{\"details\":\"only the refiner can refiner a mineral\",\"params\":{\"mineralId\":\"The ID of the mineral under refinery\"}},\"registerMineral(string,string,uint256,string,uint256,string)\":{\"details\":\"Register a new mineral - only by miner.Every mineral is assigned a unique mineralId.\",\"params\":{\"_mineralType\":\"The type of a mineral.\",\"_name\":\"Mineral name.\",\"_origin\":\"Mineral Origin.\",\"_purityPercentage\":\"Mineral purity in percentage.\",\"_storageConditions\":\"Mineral Storage conditions.\",\"_weight\":\"Mineral weight in uint256.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferMineral(string,address,string,string)\":{\"details\":\"only the transporter can transport mineralDetails\",\"params\":{\"_destination\":\"The Destination area of the mineral(string)\",\"_origin\":\"The Original location of the mineral under transportation\",\"_receivingParty\":\"The address of the destination portal\",\"mineralId\":\"The ID of the mineral under transportation\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_auditMineral(string,string)\":{\"notice\":\"Emits MineralAudited event.\"},\"inspectMineral(string,string)\":{\"notice\":\"Emits MineralInspected event on successful inspection\"},\"purchaseMineral(string)\":{\"notice\":\"Emits MineralPurchased event on successful purchase\"},\"refineMineral(string,string)\":{\"notice\":\"Emits MineralRefined event on successfl refining process\"},\"registerMineral(string,string,uint256,string,uint256,string)\":{\"notice\":\"Emits MineralRegistered event on successful registration.\"},\"transferMineral(string,address,string,string)\":{\"notice\":\"Emits MineralTransported on successful transportation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/Tokenization.sol\":\"Tokenization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title RolesManager contract\\n * @author @0xJonaseb11\\n * It acts as the factory of all the roles in the whole supplychain\\n * It is where all the roles in the chain are assigned and granted. No any other contract can handle that\\n *\\n * It is a Modular contract\\n */\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\n\\ncontract RolesManager is AccessControl, Errors {\\n    /*/////////////////////////////////////////////////////\\n                           SUPPLYCHAIN ROLES\\n            /////////////////////////////////////////////////////*/\\n    bytes32 public constant MINER_ROLE = keccak256(\\\"MINER_ROLE\\\");\\n    bytes32 public constant REFINER_ROLE = keccak256(\\\"REFINER_ROLE\\\");\\n    bytes32 public constant TRANSPORTER_ROLE = keccak256(\\\"TRANSPORTER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTOR_ROLE\\\");\\n    bytes32 public constant BUYER_ROLE = keccak256(\\\"BUYER_ROLE\\\");\\n\\n    /*//////////////////////////////////////////////////////\\n                                 EVENTS\\n        //////////////////////////////////////////////////////*/\\n    event RoleAssigned(address indexed account, bytes32 indexed role, uint256 roleAssignedAt);\\n    event RoleRevoked(bytes32 role, address account, address revoker, uint256 roleRevokedAt);\\n\\n    event MineralRegistered(\\n        string mineralId,\\n        string mineralName,\\n        string mineralType,\\n        string origin,\\n        uint256 weight,\\n        uint256 purityPercentage,\\n        address indexed miner,\\n        uint256 registeredAt\\n    );\\n    event MineralRefined(string mineralId, string refineryReport, address indexed refiner, uint256 refinedAt);\\n    event MineralTransported(\\n        string mineralId,\\n        address indexed transporter,\\n        address receivingParty,\\n        string origin,\\n        string destination,\\n        uint256 transportedAt\\n    );\\n    event MineralInspected(string mineralId, string mineralStatus, address indexed inspector, uint256 inspectedAt);\\n    event MineralAudited(string mineralId, string status, address indexed auditor, uint256 auditedAt);\\n    event MineralPurchased(string mineralId, address indexed buyer, uint256 purchasedAt);\\n    event MineralReadyToTrade(string mineralId, address indexed ApprovedBy, string status, uint256 inspectionDate);\\n\\n    // For every assigned role\\n    event MinerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event RefinerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event TransporterRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event AuditorRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event InspectorRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event BuyerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event AdminRoleAssigned(address indexed assignee, uint256 timestamp);\\n    // For every revoked role\\n    event MinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event RefinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event TransporterRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event AuditorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event InspectorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event BuyerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event AdminRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n\\n    struct MineralDetails {\\n        string id;\\n        string name;\\n        string origin;\\n        string mineralType;\\n        uint256 weight;\\n        uint256 purityPercentage;\\n        string storageConditions;\\n        address registeredBy;\\n        string currentStatus;\\n        string currentLocation;\\n        address currentHandler;\\n        bool isPurchased;\\n        bool isRefined;\\n        bool isAudited;\\n        bool isInspected;\\n        uint256 timestamp;\\n    }\\n\\n    struct MineralHistory {\\n        string id;\\n        string fieldChanged;\\n        string newValue;\\n        address updatedBy;\\n        uint256 timestamp;\\n    }\\n\\n    uint256 private nonce = block.timestamp + block.number;\\n    mapping(string => MineralDetails) public mineralDetails;\\n    mapping(string => MineralHistory[]) public mineralHistories;\\n    mapping(bytes32 => uint256) public roleMemberCount;\\n\\n    // Set the deployer as the admin\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        roleMemberCount[DEFAULT_ADMIN_ROLE] = 1;\\n        emit AdminRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(MINER_ROLE, msg.sender);\\n        roleMemberCount[MINER_ROLE] = 1;\\n        emit MinerRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(AUDITOR_ROLE, msg.sender);\\n        roleMemberCount[AUDITOR_ROLE] = 1;\\n        emit AuditorRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(INSPECTOR_ROLE, msg.sender);\\n        roleMemberCount[INSPECTOR_ROLE] = 1;\\n        emit InspectorRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(BUYER_ROLE, msg.sender);\\n        roleMemberCount[BUYER_ROLE] = 1;\\n        emit BuyerRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(REFINER_ROLE, msg.sender);\\n        roleMemberCount[REFINER_ROLE] = 1;\\n        emit RefinerRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(TRANSPORTER_ROLE, msg.sender);\\n        roleMemberCount[TRANSPORTER_ROLE] = 1;\\n        emit TransporterRoleAssigned(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev checks if sender has specific role\\n     */\\n    modifier restrictedToRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) {\\n            revert InsufficientPermissionsToPerformAction(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyNonZeroAddress(address account) {\\n        if (account == address(0)) {\\n            revert InvalidAccountAddress();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyValidMineralId(string memory mineralId) {\\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\\n            revert InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ATTENTION HERE - CHECKING VALIDITY OF A MINERAL\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\        \\n    //////////////////////////////////////////////////////////////*/\\n    modifier onlyValidMineral(string memory mineralId) virtual {\\n        if (!isMineralRegistered(mineralId) || bytes(mineralId).length == 0) {\\n            revert InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        _;\\n    }\\n\\n    /*////////////////////////////////////////////////////\\n            =====================================================\\n            ///////// ROLE-BASED FUNCTIONALITY FUNCTIONS ////////\\n            ====================================================\\n            //////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ================================================================\\n                              MINING ENTERPRISE PORTAL\\n        =================================================================\\n       //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Register a new mineral - only by miner.\\n     * @dev Every mineral is assigned a unique mineralId.\\n     * @param _name Mineral name.\\n     * @param _mineralType The type of a mineral.\\n     * @param _weight Mineral weight in uint256.\\n     * @param _origin Mineral Origin.\\n     * @param _purityPercentage Mineral purity in percentage.\\n     * @param _storageConditions Mineral Storage conditions.\\n     * @notice Emits MineralRegistered event on successful registration.\\n     */\\n    function registerMineral(\\n        string memory _name,\\n        string memory _mineralType,\\n        uint256 _weight,\\n        string memory _origin,\\n        uint256 _purityPercentage,\\n        string memory _storageConditions\\n    ) external virtual restrictedToRole(MINER_ROLE) returns (string memory) {\\n        if (bytes(_name).length == 0) revert RolesManager__InvalidMineralName();\\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\\n\\n        if (bytes(_mineralType).length == 0) revert RolesManager__InvalidMineralType();\\n\\n        if (_weight == 0) revert RolesManager__InvalidMineralWeight();\\n\\n        if (_purityPercentage == 0 || _purityPercentage > 100) revert RolesManager__InvalidMineralPurityPercentage();\\n\\n        if (_purityPercentage <= 80) revert RolesManager__MineralPurityPercentageTooLowToRegister(_purityPercentage);\\n\\n        if (bytes(_storageConditions).length == 0) revert RolesManager__InvalidMineralStorageConditions();\\n\\n        string memory mineralId = _generateHashedMineralId(_mineralType);\\n\\n        mineralDetails[mineralId] = MineralDetails({\\n            id: mineralId,\\n            name: _name,\\n            origin: _origin,\\n            mineralType: _mineralType,\\n            weight: _weight,\\n            purityPercentage: _purityPercentage,\\n            storageConditions: _storageConditions,\\n            registeredBy: msg.sender,\\n            currentStatus: \\\"Raw\\\",\\n            currentLocation: \\\"Mining Center\\\",\\n            currentHandler: msg.sender,\\n            isPurchased: false,\\n            isRefined: false,\\n            isAudited: false,\\n            isInspected: false,\\n            timestamp: block.timestamp\\n        });\\n\\n        // record initial mineral history\\n        mineralHistories[mineralId].push(\\n            MineralHistory({\\n                id: mineralId,\\n                fieldChanged: \\\"Registered\\\",\\n                newValue: string(abi.encodePacked(\\\"Origin: \\\", _origin)),\\n                updatedBy: msg.sender,\\n                timestamp: block.timestamp\\n            })\\n        );\\n\\n        emit MineralRegistered(\\n            mineralId,\\n            _name,\\n            _mineralType,\\n            _origin,\\n            _weight,\\n            _purityPercentage,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        return mineralId;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                              PROCESSING ENTERPRISE\\n        ===============================================================                    \\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*///////////////////////////////////////////////\\n                              REFINER\\n        ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the refiner can refiner a mineral\\n     * @param mineralId The ID of the mineral under refinery\\n     * @notice Emits MineralRefined event on successfl refining process\\n     */\\n    function refineMineral(string memory mineralId, string memory report) public restrictedToRole(REFINER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isRefined == true) revert RolesManager__MineralAlreadyRefined(mineralId);\\n\\n        mineralDetails[mineralId].isRefined = true;\\n\\n        emit MineralRefined(mineralId, report, msg.sender, block.timestamp);\\n    }\\n\\n    /*////////////////////////////////////////////////\\n                              TRANSPORTER\\n          ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the transporter can transport mineralDetails\\n     * @param mineralId The ID of the mineral under transportation\\n     * @param _receivingParty The address of the destination portal\\n     * @param _origin The Original location of the mineral under transportation\\n     * @param _destination The Destination area of the mineral(string)\\n     * @notice Emits MineralTransported on successful transportation\\n     */\\n    function transferMineral(\\n        string memory mineralId,\\n        address _receivingParty,\\n        string memory _origin,\\n        string memory _destination\\n    ) public virtual restrictedToRole(TRANSPORTER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (_receivingParty == address(0)) revert RolesManager__InvalidReceivingPartyAddress();\\n\\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\\n\\n        if (bytes(_destination).length == 0) revert RolesManager__InvalidMineralDestination();\\n\\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\\n\\n        mineralDetails[mineralId].currentHandler = msg.sender;\\n\\n        emit MineralTransported(mineralId, msg.sender, _receivingParty, _origin, _destination, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                     SUPPLYCHAIN VALIDATION PORTAL\\n        ===============================================================\\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*///////////////////////////////////////////////\\n                               INSPECTOR\\n            ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the inspector can inspect mineralDetails\\n     * @param mineralId The ID of the mineral under inspection\\n     * @param report The inspection status report of the mineral under inspection\\n     * @notice Emits MineralInspected event on successful inspection\\n     * @dev Logs audit report on every successful inspection\\n     */\\n    function inspectMineral(string memory mineralId, string memory report) public restrictedToRole(INSPECTOR_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isInspected == true) revert RolesManager__MineralAlreadyInspected(mineralId);\\n\\n        mineralDetails[mineralId].isInspected = true;\\n\\n        emit MineralInspected(mineralId, report, msg.sender, block.timestamp);\\n\\n        /*//////////////////////////////////////////////////\\n                          HANDLE INSPECTION REPORTING\\n           ///////////////////////////////////////////////////*/\\n    }\\n\\n    /*/////////////////////////////////////////////\\n                               AUDITOR\\n            ////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the auditor can audit mineralDetails.\\n     * @dev Logs audit report on every successful audit.\\n     * @param mineralId The ID of the mineral under audition.\\n     * @param report The audit status report of the mineral under audition.\\n     * @notice Emits MineralAudited event.\\n     */\\n    function _auditMineral(\\n        string memory mineralId,\\n        string memory report\\n    ) public /*virtual*/ restrictedToRole(AUDITOR_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isAudited == true) revert RolesManager__MineralAlreadyAudited(mineralId);\\n\\n        mineralDetails[mineralId].isAudited = true;\\n\\n        emit MineralAudited(mineralId, report, msg.sender, block.timestamp);\\n\\n        /*//////////////////////////////////////////////////\\n                          HANDLE AUDIT REPORTING\\n           ///////////////////////////////////////////////////*/\\n    }\\n\\n    /**\\n     * @dev Only the buyer can purchase mineralDetails\\n     * @param mineralId The ID of the mineral under purchase\\n     * @notice Emits MineralPurchased event on successful purchase\\n     */\\n    function purchaseMineral(string memory mineralId) public restrictedToRole(BUYER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\\n\\n        (bool isAudited, bool isInspected) = checkAuditAndInspectionStatus(mineralId);\\n\\n        if (!(isAudited && isInspected)) revert RolesManager__MineralNotMarketReady(mineralId);\\n\\n        // require(mineralDetails[mineralId].currentHandler == msg.sender, \\\"You are not the assigned buyer for this mineral!!\\\");\\n\\n        mineralDetails[mineralId].isPurchased = true;\\n        mineralDetails[mineralId].currentHandler = msg.sender;\\n\\n        emit MineralPurchased(mineralId, msg.sender, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     ROLESMANAGER HELPER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ADMIN FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ////////////////////////////////////////////////\\n    /////// ROLEMANAGEMENT FUNCTIONS ////////////////\\n    ////////////////////////////////////////////////\\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n\\n    /*////////////////////////////////////////////////////\\n                  ROLE MANAGEMENT FUNCTIONS\\n    ////////////////////////////////////////////////////*/\\n\\n    function assignMiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasMinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(MINER_ROLE, account);\\n        roleMemberCount[MINER_ROLE]++;\\n        emit MinerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignRefiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasRefinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(REFINER_ROLE, account);\\n        roleMemberCount[REFINER_ROLE]++;\\n        emit RefinerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignTransporter(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasTransporterRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(TRANSPORTER_ROLE, account);\\n        roleMemberCount[TRANSPORTER_ROLE]++;\\n        emit TransporterRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignAuditor(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasAuditorRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(AUDITOR_ROLE, account);\\n        roleMemberCount[AUDITOR_ROLE]++;\\n        emit AuditorRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignInspector(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasInspectorRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(INSPECTOR_ROLE, account);\\n        roleMemberCount[INSPECTOR_ROLE]++;\\n        emit InspectorRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignBuyer(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasBuyerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(BUYER_ROLE, account);\\n        roleMemberCount[BUYER_ROLE]++;\\n        emit BuyerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n\\n    function revokeMiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasMinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(MINER_ROLE, account);\\n        if (roleMemberCount[MINER_ROLE] > 0) {\\n            roleMemberCount[MINER_ROLE]--;\\n        }\\n        emit MinerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeRefiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRefinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(REFINER_ROLE, account);\\n\\n        if (roleMemberCount[REFINER_ROLE] > 0) {\\n            roleMemberCount[REFINER_ROLE]--;\\n        }\\n        emit RefinerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeTransporter(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasTransporterRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(TRANSPORTER_ROLE, account);\\n        if (roleMemberCount[TRANSPORTER_ROLE] > 0) {\\n            roleMemberCount[TRANSPORTER_ROLE]--;\\n        }\\n        emit TransporterRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeInspector(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasInspectorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(INSPECTOR_ROLE, account);\\n        if (roleMemberCount[INSPECTOR_ROLE] > 0) {\\n            roleMemberCount[INSPECTOR_ROLE]--;\\n        }\\n        emit InspectorRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeAuditor(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasAuditorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(AUDITOR_ROLE, account);\\n        if (roleMemberCount[AUDITOR_ROLE] > 0) {\\n            roleMemberCount[AUDITOR_ROLE]--;\\n        }\\n        emit AuditorRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeBuyer(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasBuyerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(BUYER_ROLE, account);\\n        if (roleMemberCount[BUYER_ROLE] > 0) {\\n            roleMemberCount[BUYER_ROLE]--;\\n        }\\n        emit BuyerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    /*/////////////////////////////////////////////////////\\n                  NEW ROLE COUNT FUNCTIONS\\n    /////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the number of accounts that have a specific role\\n     * @param role The role to query member count for\\n     * @return count The number of accounts with the role\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256 count) {\\n        if (!isValidRole(role)) revert RolesManager__InvalidRole();\\n        return roleMemberCount[role];\\n    }\\n\\n    /**\\n     * @dev Returns all role counts in a single call\\n     * @return minerCount Number of miners\\n     * @return refinerCount Number of refiners\\n     * @return transporterCount Number of transporters\\n     * @return auditorCount Number of auditors\\n     * @return inspectorCount Number of inspectors\\n     * @return buyerCount Number of buyers\\n     */\\n    function getAllRoleCounts()\\n        public\\n        view\\n        returns (\\n            uint256 minerCount,\\n            uint256 refinerCount,\\n            uint256 transporterCount,\\n            uint256 auditorCount,\\n            uint256 inspectorCount,\\n            uint256 buyerCount\\n        )\\n    {\\n        return (\\n            roleMemberCount[MINER_ROLE],\\n            roleMemberCount[REFINER_ROLE],\\n            roleMemberCount[TRANSPORTER_ROLE],\\n            roleMemberCount[AUDITOR_ROLE],\\n            roleMemberCount[INSPECTOR_ROLE],\\n            roleMemberCount[BUYER_ROLE]\\n        );\\n    }\\n\\n    // ... (keep all your existing functions below this point) ...\\n    // Only modification needed is to ensure the _setupRole function also increments counters:\\n    function _setupRole(bytes32 role, address account) internal override {\\n        _grantRole(role, account);\\n\\n        roleMemberCount[role]++;\\n    }\\n\\n    /**\\n     * @dev Revokes role from an account - onlydmin\\n     * @param account The address of the account to be revoked role by the admin\\n     * @notice Emits event of the revoked role\\n     */\\n\\n    /*/////////////////////////////////////////////////////\\n   ====================================================\\n            HELPER FUNCTIONS SECTION\\n   ====================================================\\n   /////////////////////////////////////////////////////*/\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE OWNERSHIP CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Returns all roles assigned to a given address\\n     * @param account The address to check roles for\\n     * @return roles An array of role names the address has\\n     */\\n    function getRolesForAddress(\\n        address account\\n    ) public view onlyNonZeroAddress(account) returns (string[] memory roles) {\\n        // Count how many roles the address has\\n        uint256 roleCount = 0;\\n\\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) roleCount++;\\n        if (hasRole(MINER_ROLE, account)) roleCount++;\\n        if (hasRole(REFINER_ROLE, account)) roleCount++;\\n        if (hasRole(TRANSPORTER_ROLE, account)) roleCount++;\\n        if (hasRole(AUDITOR_ROLE, account)) roleCount++;\\n        if (hasRole(INSPECTOR_ROLE, account)) roleCount++;\\n        if (hasRole(BUYER_ROLE, account)) roleCount++;\\n\\n        // Initialize array with the counted size\\n        roles = new string[](roleCount);\\n        uint256 index = 0;\\n\\n        // Populate the array with role names\\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) {\\n            roles[index] = \\\"ADMIN\\\";\\n            index++;\\n        }\\n        if (hasRole(MINER_ROLE, account)) {\\n            roles[index] = \\\"MINER\\\";\\n            index++;\\n        }\\n        if (hasRole(REFINER_ROLE, account)) {\\n            roles[index] = \\\"REFINER\\\";\\n            index++;\\n        }\\n        if (hasRole(TRANSPORTER_ROLE, account)) {\\n            roles[index] = \\\"TRANSPORTER\\\";\\n            index++;\\n        }\\n        if (hasRole(AUDITOR_ROLE, account)) {\\n            roles[index] = \\\"AUDITOR\\\";\\n            index++;\\n        }\\n        if (hasRole(INSPECTOR_ROLE, account)) {\\n            roles[index] = \\\"INSPECTOR\\\";\\n            index++;\\n        }\\n        if (hasRole(BUYER_ROLE, account)) {\\n            roles[index] = \\\"BUYER\\\";\\n            index++;\\n        }\\n\\n        return roles;\\n    }\\n\\n    // function _setupRole(bytes32 role, address account) internal virtual {\\n    //     __grantRole(role, account);\\n    // }\\n\\n    /**\\n     ** @dev Roles helper functions\\n     * @dev checks if an account has a specific role\\n     * @param account The address of the account to checked with role association\\n     */\\n    function hasMinerRole(address account) public view returns (bool) {\\n        return hasRole(MINER_ROLE, account);\\n    }\\n    function hasRefinerRole(address account) public view returns (bool) {\\n        return hasRole(REFINER_ROLE, account);\\n    }\\n    function hasTransporterRole(address account) public view returns (bool) {\\n        return hasRole(TRANSPORTER_ROLE, account);\\n    }\\n    function hasInspectorRole(address account) public view returns (bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n    function hasAuditorRole(address account) public view returns (bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n    function hasBuyerRole(address account) public view returns (bool) {\\n        return hasRole(BUYER_ROLE, account);\\n    }\\n    function hasAdminRole(address account) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    // Helper function to validate the role\\n    function isValidRole(bytes32 role) private pure returns (bool) {\\n        return\\n            role == MINER_ROLE ||\\n            role == REFINER_ROLE ||\\n            role == TRANSPORTER_ROLE ||\\n            role == AUDITOR_ROLE ||\\n            role == INSPECTOR_ROLE ||\\n            role == BUYER_ROLE;\\n    }\\n\\n    /**\\n    * @dev checks audit and inspection status\\n    * @param mineralId The ID of the mineral to check for audit and inspection status\\n\\n    * Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\\n    */\\n    function checkAuditAndInspectionStatus(\\n        string memory mineralId\\n    ) public virtual restrictedToRole(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert RolesManager__InvalidMineralIdOrNotFound();\\n        }\\n\\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\\n            emit MineralReadyToTrade(mineralId, msg.sender, \\\"TradingReady\\\", block.timestamp);\\n        } else {\\n            revert RolesManager__MineralNotMarketReady(mineralId);\\n        }\\n\\n        isAudited = mineralDetails[mineralId].isAudited;\\n        isInspected = mineralDetails[mineralId].isInspected;\\n\\n        return (isAudited, isInspected);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            GETTERS - For Traceability\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getMineralHistory(string memory mineralId) public view virtual returns (MineralHistory[] memory) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert RolesManager__InvalidMineralIdOrNotFound();\\n        }\\n\\n        return mineralHistories[mineralId];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n    ===============================================================\\n         MINERAL REGISTRATION HELPER FUNCTIONS SECTION\\n    ===============================================================\\n    ////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev checks if a mineral with the given ID is registered\\n     * @param mineralId the ID of the mineral to check\\n     * @return A boolean indicating whether the mineral is registered or not\\n     */\\n    function isMineralRegistered(string memory mineralId) public virtual returns (bool) {\\n        if (bytes(mineralId).length == 0) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\\n            revert MineralRegistry__MineralNotRegistered(mineralId);\\n        }\\n\\n        return true;\\n    }\\n\\n    //////////////////////////////////////////////////////\\n    //////// GENERATE HASHED MINERALID FOR UNIQUENESS/////\\n    //////////////////////////////////////////////////////\\n    function _generateHashedMineralId(string memory mineralType) internal returns (string memory) {\\n        bytes32 fullHash = keccak256(abi.encodePacked(mineralType, msg.sender, block.timestamp, nonce++));\\n\\n        // Convert first 4 bytes (8 hex characters) into hex string with \\\"0x\\\"\\n        bytes memory shortHex = new bytes(10); // 2 for \\\"0x\\\", 8 for hex chars\\n        shortHex[0] = \\\"0\\\";\\n        shortHex[1] = \\\"x\\\";\\n        for (uint i = 0; i < 4; i++) {\\n            shortHex[2 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] >> 4));\\n            shortHex[3 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] & 0x0f));\\n        }\\n\\n        return string(abi.encodePacked(mineralType, \\\"-\\\", string(shortHex)));\\n    }\\n\\n    // helper: convert nibble to hex char (0-9, a-f)\\n    function _nibbleToHexChar(uint8 nibble) internal pure returns (bytes1) {\\n        return nibble < 10 ? bytes1(nibble + 0x30) : bytes1(nibble + 0x61 - 10);\\n    }\\n\\n    ///////////////////////////////////////////////\\n    //////// getting all registered minerals /////\\n    // //////////////////////////////////////////////\\n    // function getAllRegisteredMineral() public view returns(MineralDetails[] memory mineralDetails) {\\n    //     return mineralDetails;\\n\\n    // }\\n}\\n\",\"keccak256\":\"0x987f06a5daf816abdb2f33f8ff50dcf18b6f1f6e557580abd2745b9af333f490\",\"license\":\"MIT\"},\"contracts/tokens/Tokenization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\n\\ncontract Tokenization is ERC721, RolesManager {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n\\n    struct MineralToken {\\n        string mineralId;\\n        string details;\\n        address owner;\\n        uint8 flags; // bit 0: minted, 1: audited, 2: inspected, 3: purchased\\n    }\\n\\n    uint256 private nextTokenId = 1;\\n    mapping(uint256 => MineralToken) private _tokens;\\n    mapping(string => uint256) public mineralToToken;\\n\\n    event Minted(uint256 indexed tokenId, string mineralId, address indexed to);\\n    event Transferred(uint256 indexed tokenId, address indexed from, address indexed to);\\n    event Updated(uint256 indexed tokenId);\\n    event Revoked(uint256 indexed tokenId, string reason);\\n    event MetadataUpdated(uint256 indexed tokenId);\\n\\n    constructor() ERC721(\\\"MineralToken\\\", \\\"MTKN\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n    // Remove the onlyRole modifier since it's inherited from AccessControl\\n    // Keep onlySpecificRole if needed from RolesManager\\n\\n    function mintToken(address to, string calldata mineralId, string calldata details) external {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"Unauthorized\\\");\\n        uint256 tokenId = nextTokenId++;\\n\\n        require(!_exists(tokenId), \\\"Exists\\\");\\n        require(mineralToToken[mineralId] == 0, \\\"MineralUsed\\\");\\n\\n        _mint(to, tokenId);\\n\\n        _tokens[tokenId] = MineralToken({ mineralId: mineralId, details: details, owner: msg.sender, flags: 0x01 });\\n\\n        mineralToToken[mineralId] = tokenId;\\n        emit Minted(tokenId, mineralId, to);\\n    }\\n\\n    function updateToken(uint256 tokenId, string calldata, bool audited, bool inspected, bool purchased) external {\\n        address owner = ownerOf(tokenId);\\n        require(\\n            owner == msg.sender || getApproved(tokenId) == msg.sender || isApprovedForAll(owner, msg.sender),\\n            \\\"NotOwner\\\"\\n        );\\n\\n        MineralToken storage t = _tokens[tokenId];\\n        t.flags = _setFlag(t.flags, 1, audited);\\n        t.flags = _setFlag(t.flags, 2, inspected);\\n        t.flags = _setFlag(t.flags, 3, purchased);\\n\\n        emit Updated(tokenId);\\n    }\\n\\n    function updateMetadata(uint256 tokenId, string calldata newDetails) external {\\n        address owner = ownerOf(tokenId);\\n        require(\\n            owner == msg.sender || getApproved(tokenId) == msg.sender || isApprovedForAll(owner, msg.sender),\\n            \\\"NotOwner\\\"\\n        );\\n        _tokens[tokenId].details = newDetails;\\n        emit MetadataUpdated(tokenId);\\n    }\\n\\n    function transferOwnership(uint256 tokenId, address newOwner) external {\\n        require(hasRole(BUYER_ROLE, msg.sender), \\\"Unauthorized\\\");\\n        address owner = ownerOf(tokenId);\\n        require(\\n            owner == msg.sender || getApproved(tokenId) == msg.sender || isApprovedForAll(owner, msg.sender),\\n            \\\"NotOwner\\\"\\n        );\\n\\n        _transfer(owner, newOwner, tokenId);\\n        _tokens[tokenId].owner = newOwner;\\n\\n        emit Transferred(tokenId, owner, newOwner);\\n    }\\n\\n    function revokeToken(uint256 tokenId, string calldata reason) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Unauthorized\\\");\\n        require(_exists(tokenId), \\\"Invalid\\\");\\n        _burn(tokenId);\\n        delete _tokens[tokenId];\\n        emit Revoked(tokenId, reason);\\n    }\\n\\n    function getTokenDetails(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 id,\\n            string memory mineralId,\\n            string memory details,\\n            bool isMinted,\\n            bool isAudited,\\n            bool isInspected,\\n            bool isPurchased,\\n            address owner\\n        )\\n    {\\n        require(_exists(tokenId), \\\"Invalid\\\");\\n        MineralToken memory t = _tokens[tokenId];\\n        return (\\n            tokenId,\\n            t.mineralId,\\n            t.details,\\n            (t.flags & 0x01) != 0,\\n            (t.flags & 0x02) != 0,\\n            (t.flags & 0x04) != 0,\\n            (t.flags & 0x08) != 0,\\n            t.owner\\n        );\\n    }\\n\\n    function _setFlag(uint8 flags, uint8 bit, bool value) private pure returns (uint8) {\\n        return value ? uint8(flags | (1 << bit)) : uint8(flags & ~(1 << bit));\\n    }\\n\\n    function _exists(uint256 tokenId) internal override view returns (bool) {\\n        return _tokens[tokenId].owner != address(0);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function getTokenIdByMineralId(string calldata mineralId) external view returns (uint256) {\\n        uint256 tokenId = mineralToToken[mineralId];\\n        require(_exists(tokenId), \\\"Invalid\\\");\\n        return tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x66eaf0545f14a0a027cf80ed662165af89a9ea321117f7452103aa950251c102\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract Errors {\\n    /*//////////////////////////////////////////////////////////////\\n                        MINERALREGISTRY__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error MineralRegistry__MineralNotRegistered(string mineralId);\\n    error MineralRegistry__MineralAlreadyPurchased();\\n    error MineralRegistry__MineralAlreadyAudited();\\n    error MineralRegistry__MineralAlreadyInspected();\\n    error MineralRegistry__MineralNotAudited();\\n    error MineralRegistry__MineralNotInspected();\\n\\n    error MineralRegistry__InvalidMineralDetails();\\n    error MineralRegistry__InvalidMineralIdOrNotFound(string mineralId);\\n    error MineralRegistry__InvalidMineralStatus();\\n    error MineralRegistry__InvalidMineralName();\\n    error MineralRegistry__InvalidMineralOrigin();\\n    error MineralRegistry__InvalidMineralType();\\n    error MineralRegistry__InvalidMineralWeight();\\n    error MineralRegistry__InvalidMineralPurityPercentage();\\n    error MineralRegistry__InvalidMineralStorageConditions();\\n    error MineralRegistry__InvalidMineralLocation();\\n    error MineralRegistry__InvalidReceivingPartyAddress();\\n    error MineralRegistry__InvalidMineralDestination();\\n\\n    error MineralNotReadyToTrade(string mineralId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ROLESMANAGER__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n    error RolesManager__MineralAlreadyRefined(string mineralId);\\n    error RolesManager__MineralAlreadyPurchased(string mineralId);\\n    error RolesManager__MineralAlreadyInspected(string mineralId);\\n    error RolesManager__MineralAlreadyAudited(string mineralId);\\n    error RolesManager__NotTheAssignedBuyer(address caller);\\n\\n    error RolesManager__InvalidMineralName();\\n    error RolesManager__InvalidMineralOrigin();\\n    error RolesManager__InvalidMineralDestination();\\n\\n    error RolesManager__MineralNotMarketReady(string mineralId);\\n\\n    error RolesManager__InvalidMineralIdOrNotFound();\\n    error RolesManager__InvalidMineralType();\\n    error RolesManager__InvalidReceivingPartyAddress();\\n    error RolesManager__InvalidMineralStorageConditions();\\n    error RolesManager__InvalidMineralPurityPercentage();\\n    error RolesManager__MineralPurityPercentageTooLowToRegister(uint256 purityPercentage);\\n    error RolesManager__InvalidMineralWeight();\\n\\n    error RolesManager__InvalidAddress();\\n    error RolesManager__InvalidRole();\\n\\n    // Roles Assignment and revocation\\n    error RolesManager__AccountAlreadyHasRole();\\n    error RolesManager__AccountDoesNotHaveRole();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            DISPUTERESOLUTION__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n    error DisputeResolution__InvalidMineralIdOrNotFound();\\n    error DisputeResolution__InvalidDisputeDefendantAddress();\\n    error DisputeResolution__InvalidDisputeDetails();\\n    error DisputeResolution__InvalidDisputeEvidence();\\n    error DisputeResolution__InvalidDisputeIdOrNotFound();\\n    error DisputeResolution__InvalidResolutionDetails();\\n    error DisputeResolution__DisputeStatusNotPendingOrEscalated();\\n    error DisputeResolution__DisputeStatusNotPending(uint256 disputeId);\\n    error DisputeResolution__NotEligibleToVote(address caller);\\n    error DisputeResolution__AlreadyVoted(address caller);\\n    error DisputeResolution__DisputeEscalated_UnableToVote(uint256 disputeId);\\n    error DisputeResolution__VotingPeriodStillActive();\\n    error DisputeResolution__DisputeNotEscalated(uint256 disputeId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MINERALWAREHOUSE__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error MineralWarehouse__InvalidTokenAddress(address tokenAddress);\\n    error MineralWarehouse__MineralNotRefined(string mineralId);\\n    error MineralWarehouse__InvalidNumberOfPrices();\\n    error MineralWarehouse__UnacceptedToken(address tokenAddress);\\n    error MineralWarehouse__UnacceptedTokens(address[] tokenAddresses);\\n    error MineralWarehouse__MineralNotMarketReady(string mineralId);\\n    error MineralWarehouse__InvalidMineralPrice();\\n    error MineralWarehouse__MineralAlreadySold(string mineralId);\\n    error MineralWarehouse__UnauthorizedSeller(address seller);\\n    error MineralNotMarketReady(string mineralId);\\n    error MineralWarehouse__IncorrectETHAmount();\\n    error MineralWarehouse__ETHTransferFailed();\\n    error MineralWarehouse__InvalidTokenPrice();\\n\\n    error MineralWarehouse__MismatchedArrays();\\n    error MineralWarehouse__InvalidETHPrice();\\n    error MineralWarehouse__TokenNotAccepted(address tokenAddress);\\n\\n    error MineralWarehouse__MineralNotFoundInWarehouse(string mineralId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            TOKENISATION__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error Tokenization__TokenAlreadyExists(uint256 tokenId);\\n    error Tokenization__TokenIsAlreadyMinted(uint256 tokenId);\\n    error Tokenization__InvalidTokenIdOrNotFound(uint256 tokenId);\\n    error Tokenization__CallerNotMineralTokenOwner(uint256 tokenId, address caller);\\n    error Tokenization__InvalidTokenId(uint256 tokenId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            TRANSACTIONlOG__CUSTOM ERRORS\\n       //////////////////////////////////////////////////////////////*/\\n    error TransactionLog__InvalidOperationType();\\n    error TransactionLog__InvalidOperationIndex(uint256 index);\\n    error TransactionLog__InvalidTransactionIdOrNotFound(uint256 transactionId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        SUPPLYCHAINVALIDATOR__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error SupplychainValidator__InvalidMineralIdOrNotFound(string mineralId);\\n    error SupplychainValidator__InvalidMineralTransactionHistory();\\n    error SupplychainValidator__InvalidMineralOwnershipChain();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             GLOBAL ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n    error InvalidAccountAddress();\\n    error ERC20TokenTransferFailed(address token, uint256 tokenAmount);\\n    error InvalidPaymentMethods();\\n    error InvalidMineralIdOrNotFound(string mineralId);\\n    error InsufficientPermissionsToPerformAction(address caller);\\n\\n    /////////////////////////////////////\\n    // LOGISTICS MANAGER ERRORS /////////\\n    /////////////////////////////////////\\n    error TransportRequestAlreadyExists(string mineralId);\\n    error AddressDoesNotHaveRequiredRole(address caller, bytes32 role);\\n    error NotAssignedTransporter(string mineralId, address caller);\\n    error InvalidTransportStateTransition(string currentStatus, string attemptedStatus);\\n}\\n\",\"keccak256\":\"0x9b1b8d0828a0d7960988398eef2b8605af3485151b661a3bc695eb4362b00e38\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "_auditMineral(string,string)": {
        "details": "only the auditor can audit mineralDetails.Logs audit report on every successful audit.",
        "params": {
          "mineralId": "The ID of the mineral under audition.",
          "report": "The audit status report of the mineral under audition."
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "checkAuditAndInspectionStatus(string)": {
        "details": "checks audit and inspection status",
        "params": {
          "mineralId": "The ID of the mineral to check for audit and inspection status Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId"
        }
      },
      "getAllRoleCounts()": {
        "details": "Returns all role counts in a single call",
        "returns": {
          "auditorCount": "Number of auditors",
          "buyerCount": "Number of buyers",
          "inspectorCount": "Number of inspectors",
          "minerCount": "Number of miners",
          "refinerCount": "Number of refiners",
          "transporterCount": "Number of transporters"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have a specific role",
        "params": {
          "role": "The role to query member count for"
        },
        "returns": {
          "count": "The number of accounts with the role"
        }
      },
      "getRolesForAddress(address)": {
        "details": "Returns all roles assigned to a given address",
        "params": {
          "account": "The address to check roles for"
        },
        "returns": {
          "roles": "An array of role names the address has"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasMinerRole(address)": {
        "details": "Roles helper functionschecks if an account has a specific role",
        "params": {
          "account": "The address of the account to checked with role association"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "inspectMineral(string,string)": {
        "details": "only the inspector can inspect mineralDetailsLogs audit report on every successful inspection",
        "params": {
          "mineralId": "The ID of the mineral under inspection",
          "report": "The inspection status report of the mineral under inspection"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isMineralRegistered(string)": {
        "details": "checks if a mineral with the given ID is registered",
        "params": {
          "mineralId": "the ID of the mineral to check"
        },
        "returns": {
          "_0": "A boolean indicating whether the mineral is registered or not"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "purchaseMineral(string)": {
        "details": "Only the buyer can purchase mineralDetails",
        "params": {
          "mineralId": "The ID of the mineral under purchase"
        }
      },
      "refineMineral(string,string)": {
        "details": "only the refiner can refiner a mineral",
        "params": {
          "mineralId": "The ID of the mineral under refinery"
        }
      },
      "registerMineral(string,string,uint256,string,uint256,string)": {
        "details": "Register a new mineral - only by miner.Every mineral is assigned a unique mineralId.",
        "params": {
          "_mineralType": "The type of a mineral.",
          "_name": "Mineral name.",
          "_origin": "Mineral Origin.",
          "_purityPercentage": "Mineral purity in percentage.",
          "_storageConditions": "Mineral Storage conditions.",
          "_weight": "Mineral weight in uint256."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferMineral(string,address,string,string)": {
        "details": "only the transporter can transport mineralDetails",
        "params": {
          "_destination": "The Destination area of the mineral(string)",
          "_origin": "The Original location of the mineral under transportation",
          "_receivingParty": "The address of the destination portal",
          "mineralId": "The ID of the mineral under transportation"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_auditMineral(string,string)": {
        "notice": "Emits MineralAudited event."
      },
      "inspectMineral(string,string)": {
        "notice": "Emits MineralInspected event on successful inspection"
      },
      "purchaseMineral(string)": {
        "notice": "Emits MineralPurchased event on successful purchase"
      },
      "refineMineral(string,string)": {
        "notice": "Emits MineralRefined event on successfl refining process"
      },
      "registerMineral(string,string,uint256,string,uint256,string)": {
        "notice": "Emits MineralRegistered event on successful registration."
      },
      "transferMineral(string,address,string,string)": {
        "notice": "Emits MineralTransported on successful transportation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 557,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 559,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 563,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 567,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 571,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 577,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 24,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3677,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "nonce",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3682,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "mineralDetails",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_struct(MineralDetails)3659_storage)"
      },
      {
        "astId": 3688,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "mineralHistories",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(MineralHistory)3670_storage)dyn_storage)"
      },
      {
        "astId": 3692,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "roleMemberCount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 10306,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10311,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_tokens",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(MineralToken)10303_storage)"
      },
      {
        "astId": 10315,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "mineralToToken",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MineralHistory)3670_storage)dyn_storage": {
        "base": "t_struct(MineralHistory)3670_storage",
        "encoding": "dynamic_array",
        "label": "struct RolesManager.MineralHistory[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(MineralHistory)3670_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RolesManager.MineralHistory[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(MineralHistory)3670_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MineralDetails)3659_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RolesManager.MineralDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(MineralDetails)3659_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(MineralToken)10303_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Tokenization.MineralToken)",
        "numberOfBytes": "32",
        "value": "t_struct(MineralToken)10303_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MineralDetails)3659_storage": {
        "encoding": "inplace",
        "label": "struct RolesManager.MineralDetails",
        "members": [
          {
            "astId": 3628,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3630,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3632,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "origin",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3634,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "mineralType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3636,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "weight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3638,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "purityPercentage",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3640,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "storageConditions",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3642,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "registeredBy",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3644,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "currentStatus",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 3646,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "currentLocation",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 3648,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "currentHandler",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 3650,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "isPurchased",
            "offset": 20,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3652,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "isRefined",
            "offset": 21,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3654,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "isAudited",
            "offset": 22,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3656,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "isInspected",
            "offset": 23,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3658,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "timestamp",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(MineralHistory)3670_storage": {
        "encoding": "inplace",
        "label": "struct RolesManager.MineralHistory",
        "members": [
          {
            "astId": 3661,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3663,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "fieldChanged",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3665,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "newValue",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3667,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "updatedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3669,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(MineralToken)10303_storage": {
        "encoding": "inplace",
        "label": "struct Tokenization.MineralToken",
        "members": [
          {
            "astId": 10296,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "mineralId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10298,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "details",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10300,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 10302,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "flags",
            "offset": 20,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}