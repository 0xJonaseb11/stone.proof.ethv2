{
  "address": "0x1dc4052FDEc1CC197a280B19a657704bc1910BBf",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "AddressDoesNotHaveRequiredRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DisputeResolution__AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeEscalated_UnableToVote",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeNotEscalated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeStatusNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__DisputeStatusNotPendingOrEscalated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeDefendantAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeDetails",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeEvidence",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidResolutionDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DisputeResolution__NotEligibleToVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__VotingPeriodStillActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "ERC20TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "InsufficientPermissionsToPerformAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccountAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPaymentMethods",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "currentStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attemptedStatus",
          "type": "string"
        }
      ],
      "name": "InvalidTransportStateTransition",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralNotReadyToTrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralRegistry__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralLocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralPurityPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralStorageConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidReceivingPartyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyAudited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyInspected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyPurchased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralNotAudited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralNotInspected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralRegistry__MineralNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__IncorrectETHAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidMineralPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidNumberOfPrices",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidTokenPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralAlreadySold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotFoundInWarehouse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotRefined",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__UnacceptedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "MineralWarehouse__UnacceptedTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__UnauthorizedSeller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NotAssignedTransporter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AccountAlreadyHasRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AccountDoesNotHaveRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralPurityPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralStorageConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidReceivingPartyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyAudited",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyInspected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyPurchased",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyRefined",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        }
      ],
      "name": "RolesManager__MineralPurityPercentageTooLowToRegister",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RolesManager__NotTheAssignedBuyer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "SupplychainValidator__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplychainValidator__InvalidMineralOwnershipChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplychainValidator__InvalidMineralTransactionHistory",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Tokenization__CallerNotMineralTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__InvalidTokenIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__TokenAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__TokenIsAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "TransactionLog__InvalidOperationIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionLog__InvalidOperationType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "TransactionLog__InvalidTransactionIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "TransportRequestAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuditorRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuditorRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectorRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectorRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auditedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralStatus",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralInspected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchasedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ApprovedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectionDate",
          "type": "uint256"
        }
      ],
      "name": "MineralReadyToTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "refineryReport",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "refiner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refinedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralRefined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "miner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registeredAt",
          "type": "uint256"
        }
      ],
      "name": "MineralRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "transporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivingParty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "destination",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transportedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralTransported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RefinerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RefinerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roleAssignedAt",
          "type": "uint256"
        }
      ],
      "name": "RoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "revoker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roleRevokedAt",
          "type": "uint256"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Transferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransporterRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransporterRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Updated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BUYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSPECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSPORTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "_auditMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignRefiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignTransporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "checkAuditAndInspectionStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRoleCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refinerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transporterCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auditorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inspectorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyerCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "getMineralHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fieldChanged",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "updatedBy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct RolesManager.MineralHistory[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRolesForAddress",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "roles",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isMinted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "getTokenIdByMineralId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAuditorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasBuyerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasInspectorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasMinerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRefinerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasTransporterRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "inspectMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "isMineralRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "mineralDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mineralType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "storageConditions",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "registeredBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "currentStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "currentLocation",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "currentHandler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRefined",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mineralHistories",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fieldChanged",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "mineralToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "purchaseMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "refineMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_mineralType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_origin",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_purityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_storageConditions",
          "type": "string"
        }
      ],
      "name": "registerMineral",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeRefiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeTransporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receivingParty",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_destination",
          "type": "string"
        }
      ],
      "name": "transferMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newDetails",
          "type": "string"
        }
      ],
      "name": "updateMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "audited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "inspected",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "purchased",
          "type": "bool"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc06d4ca976f89fc897e8eedf3a10e721f6855160b112fb818380bb09f3d0e060",
  "receipt": {
    "to": null,
    "from": "0x0dfDb5bBaEeCE3871f826DF1C6Fe24a2772f5d38",
    "contractAddress": "0x1dc4052FDEc1CC197a280B19a657704bc1910BBf",
    "transactionIndex": 88,
    "gasUsed": "5337678",
    "logsBloom": "0x000000040000000000000000000040000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000001800000000000000000000000000000000000000000000000100000000000000000001000000000000000000000000000000000000020000000000000080000000000000000020000000001000000000000000000000000000000000400000000000000000000000000100000000000020000040000000000000000000000000000000000000000200000000000000000000",
    "blockHash": "0xf3b380d085fbb83bacab2a4b876e476d911048a6aef03f88761ecf58f57b78b9",
    "transactionHash": "0xc06d4ca976f89fc897e8eedf3a10e721f6855160b112fb818380bb09f3d0e060",
    "logs": [
      {
        "transactionIndex": 88,
        "blockNumber": 25807648,
        "transactionHash": "0xc06d4ca976f89fc897e8eedf3a10e721f6855160b112fb818380bb09f3d0e060",
        "address": "0x1dc4052FDEc1CC197a280B19a657704bc1910BBf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 964,
        "blockHash": "0xf3b380d085fbb83bacab2a4b876e476d911048a6aef03f88761ecf58f57b78b9"
      },
      {
        "transactionIndex": 88,
        "blockNumber": 25807648,
        "transactionHash": "0xc06d4ca976f89fc897e8eedf3a10e721f6855160b112fb818380bb09f3d0e060",
        "address": "0x1dc4052FDEc1CC197a280B19a657704bc1910BBf",
        "topics": [
          "0x458ea7e03b3466b3cf9bc2d66ddea8b11fe9469982816f42666888e6c8c6e664",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000006826f520",
        "logIndex": 965,
        "blockHash": "0xf3b380d085fbb83bacab2a4b876e476d911048a6aef03f88761ecf58f57b78b9"
      },
      {
        "transactionIndex": 88,
        "blockNumber": 25807648,
        "transactionHash": "0xc06d4ca976f89fc897e8eedf3a10e721f6855160b112fb818380bb09f3d0e060",
        "address": "0x1dc4052FDEc1CC197a280B19a657704bc1910BBf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 966,
        "blockHash": "0xf3b380d085fbb83bacab2a4b876e476d911048a6aef03f88761ecf58f57b78b9"
      }
    ],
    "blockNumber": 25807648,
    "cumulativeGasUsed": "32143993",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "57a6037bb722bde0dd8b4081e797ae09",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"AddressDoesNotHaveRequiredRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DisputeResolution__AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeEscalated_UnableToVote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeNotEscalated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeStatusNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__DisputeStatusNotPendingOrEscalated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeDefendantAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeDetails\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeEvidence\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidResolutionDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DisputeResolution__NotEligibleToVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__VotingPeriodStillActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InsufficientPermissionsToPerformAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccountAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentMethods\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attemptedStatus\",\"type\":\"string\"}],\"name\":\"InvalidTransportStateTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralNotReadyToTrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralRegistry__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralLocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralPurityPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralStorageConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidReceivingPartyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyAudited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyInspected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralNotAudited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralNotInspected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralRegistry__MineralNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__IncorrectETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidMineralPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidNumberOfPrices\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidTokenPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralAlreadySold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotFoundInWarehouse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotRefined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__UnacceptedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"MineralWarehouse__UnacceptedTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__UnauthorizedSeller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotAssignedTransporter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AccountAlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AccountDoesNotHaveRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralPurityPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralStorageConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidReceivingPartyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyAudited\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyInspected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyRefined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"}],\"name\":\"RolesManager__MineralPurityPercentageTooLowToRegister\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RolesManager__NotTheAssignedBuyer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"SupplychainValidator__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplychainValidator__InvalidMineralOwnershipChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplychainValidator__InvalidMineralTransactionHistory\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Tokenization__CallerNotMineralTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__InvalidTokenIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__TokenIsAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TransactionLog__InvalidOperationIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionLog__InvalidOperationType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionLog__InvalidTransactionIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"TransportRequestAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuditorRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuditorRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectorRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectorRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auditedAt\",\"type\":\"uint256\"}],\"name\":\"MineralAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralStatus\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"}],\"name\":\"MineralInspected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"name\":\"MineralPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ApprovedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectionDate\",\"type\":\"uint256\"}],\"name\":\"MineralReadyToTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"refineryReport\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refiner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refinedAt\",\"type\":\"uint256\"}],\"name\":\"MineralRefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"}],\"name\":\"MineralRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingParty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transportedAt\",\"type\":\"uint256\"}],\"name\":\"MineralTransported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefinerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefinerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleAssignedAt\",\"type\":\"uint256\"}],\"name\":\"RoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleRevokedAt\",\"type\":\"uint256\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransporterRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransporterRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSPORTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"_auditMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignRefiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"checkAuditAndInspectionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRoleCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refinerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transporterCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auditorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inspectorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"getMineralHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RolesManager.MineralHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRolesForAddress\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isMinted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"getTokenIdByMineralId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasBuyerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasMinerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRefinerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasTransporterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"inspectMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"isMineralRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mineralDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"storageConditions\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"currentLocation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentHandler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefined\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mineralHistories\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mineralToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"purchaseMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"refineMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_origin\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_storageConditions\",\"type\":\"string\"}],\"name\":\"registerMineral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeRefiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receivingParty\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_destination\",\"type\":\"string\"}],\"name\":\"transferMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newDetails\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"audited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inspected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"purchased\",\"type\":\"bool\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"_auditMineral(string,string)\":{\"details\":\"only the auditor can audit mineralDetails.Logs audit report on every successful audit.\",\"params\":{\"mineralId\":\"The ID of the mineral under audition.\",\"report\":\"The audit status report of the mineral under audition.\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"checkAuditAndInspectionStatus(string)\":{\"details\":\"checks audit and inspection status\",\"params\":{\"mineralId\":\"The ID of the mineral to check for audit and inspection status Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\"}},\"getAllRoleCounts()\":{\"details\":\"Returns all role counts in a single call\",\"returns\":{\"auditorCount\":\"Number of auditors\",\"buyerCount\":\"Number of buyers\",\"inspectorCount\":\"Number of inspectors\",\"minerCount\":\"Number of miners\",\"refinerCount\":\"Number of refiners\",\"transporterCount\":\"Number of transporters\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have a specific role\",\"params\":{\"role\":\"The role to query member count for\"},\"returns\":{\"count\":\"The number of accounts with the role\"}},\"getRolesForAddress(address)\":{\"details\":\"Returns all roles assigned to a given address\",\"params\":{\"account\":\"The address to check roles for\"},\"returns\":{\"roles\":\"An array of role names the address has\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasMinerRole(address)\":{\"details\":\"Roles helper functionschecks if an account has a specific role\",\"params\":{\"account\":\"The address of the account to checked with role association\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"inspectMineral(string,string)\":{\"details\":\"only the inspector can inspect mineralDetailsLogs audit report on every successful inspection\",\"params\":{\"mineralId\":\"The ID of the mineral under inspection\",\"report\":\"The inspection status report of the mineral under inspection\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isMineralRegistered(string)\":{\"details\":\"checks if a mineral with the given ID is registered\",\"params\":{\"mineralId\":\"the ID of the mineral to check\"},\"returns\":{\"_0\":\"A boolean indicating whether the mineral is registered or not\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"purchaseMineral(string)\":{\"details\":\"Only the buyer can purchase mineralDetails\",\"params\":{\"mineralId\":\"The ID of the mineral under purchase\"}},\"refineMineral(string,string)\":{\"details\":\"only the refiner can refiner a mineral\",\"params\":{\"mineralId\":\"The ID of the mineral under refinery\"}},\"registerMineral(string,string,uint256,string,uint256,string)\":{\"details\":\"Register a new mineral - only by miner.Every mineral is assigned a unique mineralId.\",\"params\":{\"_mineralType\":\"The type of a mineral.\",\"_name\":\"Mineral name.\",\"_origin\":\"Mineral Origin.\",\"_purityPercentage\":\"Mineral purity in percentage.\",\"_storageConditions\":\"Mineral Storage conditions.\",\"_weight\":\"Mineral weight in uint256.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferMineral(string,address,string,string)\":{\"details\":\"only the transporter can transport mineralDetails\",\"params\":{\"_destination\":\"The Destination area of the mineral(string)\",\"_origin\":\"The Original location of the mineral under transportation\",\"_receivingParty\":\"The address of the destination portal\",\"mineralId\":\"The ID of the mineral under transportation\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_auditMineral(string,string)\":{\"notice\":\"Emits MineralAudited event.\"},\"inspectMineral(string,string)\":{\"notice\":\"Emits MineralInspected event on successful inspection\"},\"purchaseMineral(string)\":{\"notice\":\"Emits MineralPurchased event on successful purchase\"},\"refineMineral(string,string)\":{\"notice\":\"Emits MineralRefined event on successfl refining process\"},\"registerMineral(string,string,uint256,string,uint256,string)\":{\"notice\":\"Emits MineralRegistered event on successful registration.\"},\"transferMineral(string,address,string,string)\":{\"notice\":\"Emits MineralTransported on successful transportation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/Tokenization.sol\":\"Tokenization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title RolesManager contract\\n * @author @0xJonaseb11\\n * It acts as the factory of all the roles in the whole supplychain\\n * It is where all the roles in the chain are assigned and granted. No any other contract can handle that\\n *\\n * It is a Modular contract\\n */\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\n\\ncontract RolesManager is AccessControl, Errors {\\n    /*/////////////////////////////////////////////////////\\n                           SUPPLYCHAIN ROLES\\n            /////////////////////////////////////////////////////*/\\n    bytes32 public constant MINER_ROLE = keccak256(\\\"MINER_ROLE\\\");\\n    bytes32 public constant REFINER_ROLE = keccak256(\\\"REFINER_ROLE\\\");\\n    bytes32 public constant TRANSPORTER_ROLE = keccak256(\\\"TRANSPORTER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTOR_ROLE\\\");\\n    bytes32 public constant BUYER_ROLE = keccak256(\\\"BUYER_ROLE\\\");\\n\\n    /*//////////////////////////////////////////////////////\\n                                 EVENTS\\n        //////////////////////////////////////////////////////*/\\n    event RoleAssigned(address indexed account, bytes32 indexed role, uint256 roleAssignedAt);\\n    event RoleRevoked(bytes32 role, address account, address revoker, uint256 roleRevokedAt);\\n\\n    event MineralRegistered(\\n        string mineralId,\\n        string mineralName,\\n        string mineralType,\\n        string origin,\\n        uint256 weight,\\n        uint256 purityPercentage,\\n        address indexed miner,\\n        uint256 registeredAt\\n    );\\n    event MineralRefined(string mineralId, string refineryReport, address indexed refiner, uint256 refinedAt);\\n    event MineralTransported(\\n        string mineralId,\\n        address indexed transporter,\\n        address receivingParty,\\n        string origin,\\n        string destination,\\n        uint256 transportedAt\\n    );\\n    event MineralInspected(string mineralId, string mineralStatus, address indexed inspector, uint256 inspectedAt);\\n    event MineralAudited(string mineralId, string status, address indexed auditor, uint256 auditedAt);\\n    event MineralPurchased(string mineralId, address indexed buyer, uint256 purchasedAt);\\n    event MineralReadyToTrade(string mineralId, address indexed ApprovedBy, string status, uint256 inspectionDate);\\n\\n    // For every assigned role\\n    event MinerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event RefinerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event TransporterRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event AuditorRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event InspectorRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event BuyerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event AdminRoleAssigned(address indexed assignee, uint256 timestamp);\\n    // For every revoked role\\n    event MinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event RefinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event TransporterRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event AuditorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event InspectorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event BuyerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event AdminRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n\\n    struct MineralDetails {\\n        string id;\\n        string name;\\n        string origin;\\n        string mineralType;\\n        uint256 weight;\\n        uint256 purityPercentage;\\n        string storageConditions;\\n        address registeredBy;\\n        string currentStatus;\\n        string currentLocation;\\n        address currentHandler;\\n        bool isPurchased;\\n        bool isRefined;\\n        bool isAudited;\\n        bool isInspected;\\n        uint256 timestamp;\\n    }\\n\\n    struct MineralHistory {\\n        string id;\\n        string fieldChanged;\\n        string newValue;\\n        address updatedBy;\\n        uint256 timestamp;\\n    }\\n\\n    uint256 private nonce = block.timestamp + block.number;\\n    mapping(string => MineralDetails) public mineralDetails;\\n    mapping(string => MineralHistory[]) public mineralHistories;\\n    mapping(bytes32 => uint256) public roleMemberCount;\\n\\n    // Set the deployer as the admin\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        roleMemberCount[DEFAULT_ADMIN_ROLE] = 1;\\n        emit AdminRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(MINER_ROLE, msg.sender);\\n        // roleMemberCount[MINER_ROLE] = 1;\\n        // emit MinerRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(AUDITOR_ROLE, msg.sender);\\n        // roleMemberCount[AUDITOR_ROLE] = 1;\\n        // emit AuditorRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(INSPECTOR_ROLE, msg.sender);\\n        // roleMemberCount[INSPECTOR_ROLE] = 1;\\n        // emit InspectorRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(BUYER_ROLE, msg.sender);\\n        // roleMemberCount[BUYER_ROLE] = 1;\\n        // emit BuyerRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(REFINER_ROLE, msg.sender);\\n        // roleMemberCount[REFINER_ROLE] = 1;\\n        // emit RefinerRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(TRANSPORTER_ROLE, msg.sender);\\n        // roleMemberCount[TRANSPORTER_ROLE] = 1;\\n        // emit TransporterRoleAssigned(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev checks if sender has specific role\\n     */\\n    modifier restrictedToRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) {\\n            revert InsufficientPermissionsToPerformAction(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyNonZeroAddress(address account) {\\n        if (account == address(0)) {\\n            revert InvalidAccountAddress();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyValidMineralId(string memory mineralId) {\\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\\n            revert InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ATTENTION HERE - CHECKING VALIDITY OF A MINERAL\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\        \\n    //////////////////////////////////////////////////////////////*/\\n    modifier onlyValidMineral(string memory mineralId) virtual {\\n        if (!isMineralRegistered(mineralId) || bytes(mineralId).length == 0) {\\n            revert InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        _;\\n    }\\n\\n    /*////////////////////////////////////////////////////\\n            =====================================================\\n            ///////// ROLE-BASED FUNCTIONALITY FUNCTIONS ////////\\n            ====================================================\\n            //////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ================================================================\\n                              MINING ENTERPRISE PORTAL\\n        =================================================================\\n       //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Register a new mineral - only by miner.\\n     * @dev Every mineral is assigned a unique mineralId.\\n     * @param _name Mineral name.\\n     * @param _mineralType The type of a mineral.\\n     * @param _weight Mineral weight in uint256.\\n     * @param _origin Mineral Origin.\\n     * @param _purityPercentage Mineral purity in percentage.\\n     * @param _storageConditions Mineral Storage conditions.\\n     * @notice Emits MineralRegistered event on successful registration.\\n     */\\n    function registerMineral(\\n        string memory _name,\\n        string memory _mineralType,\\n        uint256 _weight,\\n        string memory _origin,\\n        uint256 _purityPercentage,\\n        string memory _storageConditions\\n    ) external virtual restrictedToRole(MINER_ROLE) returns (string memory) {\\n        if (bytes(_name).length == 0) revert RolesManager__InvalidMineralName();\\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\\n\\n        if (bytes(_mineralType).length == 0) revert RolesManager__InvalidMineralType();\\n\\n        if (_weight == 0) revert RolesManager__InvalidMineralWeight();\\n\\n        if (_purityPercentage == 0 || _purityPercentage > 100) revert RolesManager__InvalidMineralPurityPercentage();\\n\\n        if (_purityPercentage <= 80) revert RolesManager__MineralPurityPercentageTooLowToRegister(_purityPercentage);\\n\\n        if (bytes(_storageConditions).length == 0) revert RolesManager__InvalidMineralStorageConditions();\\n\\n        string memory mineralId = _generateHashedMineralId(_mineralType);\\n\\n        mineralDetails[mineralId] = MineralDetails({\\n            id: mineralId,\\n            name: _name,\\n            origin: _origin,\\n            mineralType: _mineralType,\\n            weight: _weight,\\n            purityPercentage: _purityPercentage,\\n            storageConditions: _storageConditions,\\n            registeredBy: msg.sender,\\n            currentStatus: \\\"Raw\\\",\\n            currentLocation: \\\"Mining Center\\\",\\n            currentHandler: msg.sender,\\n            isPurchased: false,\\n            isRefined: false,\\n            isAudited: false,\\n            isInspected: false,\\n            timestamp: block.timestamp\\n        });\\n\\n        // record initial mineral history\\n        mineralHistories[mineralId].push(\\n            MineralHistory({\\n                id: mineralId,\\n                fieldChanged: \\\"Registered\\\",\\n                newValue: string(abi.encodePacked(\\\"Origin: \\\", _origin)),\\n                updatedBy: msg.sender,\\n                timestamp: block.timestamp\\n            })\\n        );\\n\\n        emit MineralRegistered(\\n            mineralId,\\n            _name,\\n            _mineralType,\\n            _origin,\\n            _weight,\\n            _purityPercentage,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        return mineralId;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                              PROCESSING ENTERPRISE\\n        ===============================================================                    \\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*///////////////////////////////////////////////\\n                              REFINER\\n        ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the refiner can refiner a mineral\\n     * @param mineralId The ID of the mineral under refinery\\n     * @notice Emits MineralRefined event on successfl refining process\\n     */\\n    function refineMineral(string memory mineralId, string memory report) public restrictedToRole(REFINER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isRefined == true) revert RolesManager__MineralAlreadyRefined(mineralId);\\n\\n        mineralDetails[mineralId].isRefined = true;\\n\\n        emit MineralRefined(mineralId, report, msg.sender, block.timestamp);\\n    }\\n\\n    /*////////////////////////////////////////////////\\n                              TRANSPORTER\\n          ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the transporter can transport mineralDetails\\n     * @param mineralId The ID of the mineral under transportation\\n     * @param _receivingParty The address of the destination portal\\n     * @param _origin The Original location of the mineral under transportation\\n     * @param _destination The Destination area of the mineral(string)\\n     * @notice Emits MineralTransported on successful transportation\\n     */\\n    function transferMineral(\\n        string memory mineralId,\\n        address _receivingParty,\\n        string memory _origin,\\n        string memory _destination\\n    ) public virtual restrictedToRole(TRANSPORTER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (_receivingParty == address(0)) revert RolesManager__InvalidReceivingPartyAddress();\\n\\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\\n\\n        if (bytes(_destination).length == 0) revert RolesManager__InvalidMineralDestination();\\n\\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\\n\\n        mineralDetails[mineralId].currentHandler = msg.sender;\\n\\n        emit MineralTransported(mineralId, msg.sender, _receivingParty, _origin, _destination, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                     SUPPLYCHAIN VALIDATION PORTAL\\n        ===============================================================\\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*///////////////////////////////////////////////\\n                               INSPECTOR\\n            ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the inspector can inspect mineralDetails\\n     * @param mineralId The ID of the mineral under inspection\\n     * @param report The inspection status report of the mineral under inspection\\n     * @notice Emits MineralInspected event on successful inspection\\n     * @dev Logs audit report on every successful inspection\\n     */\\n    function inspectMineral(string memory mineralId, string memory report) public restrictedToRole(INSPECTOR_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isInspected == true) revert RolesManager__MineralAlreadyInspected(mineralId);\\n\\n        mineralDetails[mineralId].isInspected = true;\\n\\n        emit MineralInspected(mineralId, report, msg.sender, block.timestamp);\\n\\n        /*//////////////////////////////////////////////////\\n                          HANDLE INSPECTION REPORTING\\n           ///////////////////////////////////////////////////*/\\n    }\\n\\n    /*/////////////////////////////////////////////\\n                               AUDITOR\\n            ////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the auditor can audit mineralDetails.\\n     * @dev Logs audit report on every successful audit.\\n     * @param mineralId The ID of the mineral under audition.\\n     * @param report The audit status report of the mineral under audition.\\n     * @notice Emits MineralAudited event.\\n     */\\n    function _auditMineral(\\n        string memory mineralId,\\n        string memory report\\n    ) public /*virtual*/ restrictedToRole(AUDITOR_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isAudited == true) revert RolesManager__MineralAlreadyAudited(mineralId);\\n\\n        mineralDetails[mineralId].isAudited = true;\\n\\n        emit MineralAudited(mineralId, report, msg.sender, block.timestamp);\\n\\n        /*//////////////////////////////////////////////////\\n                          HANDLE AUDIT REPORTING\\n           ///////////////////////////////////////////////////*/\\n    }\\n\\n    /**\\n     * @dev Only the buyer can purchase mineralDetails\\n     * @param mineralId The ID of the mineral under purchase\\n     * @notice Emits MineralPurchased event on successful purchase\\n     */\\n    function purchaseMineral(string memory mineralId) public restrictedToRole(BUYER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\\n\\n        (bool isAudited, bool isInspected) = checkAuditAndInspectionStatus(mineralId);\\n\\n        if (!(isAudited && isInspected)) revert RolesManager__MineralNotMarketReady(mineralId);\\n\\n        // require(mineralDetails[mineralId].currentHandler == msg.sender, \\\"You are not the assigned buyer for this mineral!!\\\");\\n\\n        mineralDetails[mineralId].isPurchased = true;\\n        mineralDetails[mineralId].currentHandler = msg.sender;\\n\\n        emit MineralPurchased(mineralId, msg.sender, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     ROLESMANAGER HELPER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ADMIN FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ////////////////////////////////////////////////\\n    /////// ROLEMANAGEMENT FUNCTIONS ////////////////\\n    ////////////////////////////////////////////////\\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n\\n    /*////////////////////////////////////////////////////\\n                  ROLE MANAGEMENT FUNCTIONS\\n    ////////////////////////////////////////////////////*/\\n\\n    function assignMiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasMinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(MINER_ROLE, account);\\n        roleMemberCount[MINER_ROLE]++;\\n        emit MinerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignRefiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasRefinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(REFINER_ROLE, account);\\n        roleMemberCount[REFINER_ROLE]++;\\n        emit RefinerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignTransporter(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasTransporterRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(TRANSPORTER_ROLE, account);\\n        roleMemberCount[TRANSPORTER_ROLE]++;\\n        emit TransporterRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignAuditor(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasAuditorRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(AUDITOR_ROLE, account);\\n        roleMemberCount[AUDITOR_ROLE]++;\\n        emit AuditorRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignInspector(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasInspectorRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(INSPECTOR_ROLE, account);\\n        roleMemberCount[INSPECTOR_ROLE]++;\\n        emit InspectorRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignBuyer(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasBuyerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(BUYER_ROLE, account);\\n        roleMemberCount[BUYER_ROLE]++;\\n        emit BuyerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n\\n    function revokeMiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasMinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(MINER_ROLE, account);\\n        if (roleMemberCount[MINER_ROLE] > 0) {\\n            roleMemberCount[MINER_ROLE]--;\\n        }\\n        emit MinerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeRefiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRefinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(REFINER_ROLE, account);\\n\\n        if (roleMemberCount[REFINER_ROLE] > 0) {\\n            roleMemberCount[REFINER_ROLE]--;\\n        }\\n        emit RefinerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeTransporter(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasTransporterRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(TRANSPORTER_ROLE, account);\\n        if (roleMemberCount[TRANSPORTER_ROLE] > 0) {\\n            roleMemberCount[TRANSPORTER_ROLE]--;\\n        }\\n        emit TransporterRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeInspector(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasInspectorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(INSPECTOR_ROLE, account);\\n        if (roleMemberCount[INSPECTOR_ROLE] > 0) {\\n            roleMemberCount[INSPECTOR_ROLE]--;\\n        }\\n        emit InspectorRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeAuditor(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasAuditorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(AUDITOR_ROLE, account);\\n        if (roleMemberCount[AUDITOR_ROLE] > 0) {\\n            roleMemberCount[AUDITOR_ROLE]--;\\n        }\\n        emit AuditorRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeBuyer(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasBuyerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(BUYER_ROLE, account);\\n        if (roleMemberCount[BUYER_ROLE] > 0) {\\n            roleMemberCount[BUYER_ROLE]--;\\n        }\\n        emit BuyerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    /*/////////////////////////////////////////////////////\\n                  NEW ROLE COUNT FUNCTIONS\\n    /////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the number of accounts that have a specific role\\n     * @param role The role to query member count for\\n     * @return count The number of accounts with the role\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256 count) {\\n        if (!isValidRole(role)) revert RolesManager__InvalidRole();\\n        return roleMemberCount[role];\\n    }\\n\\n    /**\\n     * @dev Returns all role counts in a single call\\n     * @return minerCount Number of miners\\n     * @return refinerCount Number of refiners\\n     * @return transporterCount Number of transporters\\n     * @return auditorCount Number of auditors\\n     * @return inspectorCount Number of inspectors\\n     * @return buyerCount Number of buyers\\n     */\\n    function getAllRoleCounts()\\n        public\\n        view\\n        returns (\\n            uint256 minerCount,\\n            uint256 refinerCount,\\n            uint256 transporterCount,\\n            uint256 auditorCount,\\n            uint256 inspectorCount,\\n            uint256 buyerCount\\n        )\\n    {\\n        return (\\n            roleMemberCount[MINER_ROLE],\\n            roleMemberCount[REFINER_ROLE],\\n            roleMemberCount[TRANSPORTER_ROLE],\\n            roleMemberCount[AUDITOR_ROLE],\\n            roleMemberCount[INSPECTOR_ROLE],\\n            roleMemberCount[BUYER_ROLE]\\n        );\\n    }\\n\\n    // ... (keep all your existing functions below this point) ...\\n    // Only modification needed is to ensure the _setupRole function also increments counters:\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n\\n        roleMemberCount[role]++;\\n    }\\n\\n    /**\\n     * @dev Revokes role from an account - onlydmin\\n     * @param account The address of the account to be revoked role by the admin\\n     * @notice Emits event of the revoked role\\n     */\\n\\n    /*/////////////////////////////////////////////////////\\n   ====================================================\\n            HELPER FUNCTIONS SECTION\\n   ====================================================\\n   /////////////////////////////////////////////////////*/\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE OWNERSHIP CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Returns all roles assigned to a given address\\n     * @param account The address to check roles for\\n     * @return roles An array of role names the address has\\n     */\\n    function getRolesForAddress(\\n        address account\\n    ) public view onlyNonZeroAddress(account) returns (string[] memory roles) {\\n        // Count how many roles the address has\\n        uint256 roleCount = 0;\\n\\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) roleCount++;\\n        if (hasRole(MINER_ROLE, account)) roleCount++;\\n        if (hasRole(REFINER_ROLE, account)) roleCount++;\\n        if (hasRole(TRANSPORTER_ROLE, account)) roleCount++;\\n        if (hasRole(AUDITOR_ROLE, account)) roleCount++;\\n        if (hasRole(INSPECTOR_ROLE, account)) roleCount++;\\n        if (hasRole(BUYER_ROLE, account)) roleCount++;\\n\\n        // Initialize array with the counted size\\n        roles = new string[](roleCount);\\n        uint256 index = 0;\\n\\n        // Populate the array with role names\\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) {\\n            roles[index] = \\\"ADMIN\\\";\\n            index++;\\n        }\\n        if (hasRole(MINER_ROLE, account)) {\\n            roles[index] = \\\"MINER\\\";\\n            index++;\\n        }\\n        if (hasRole(REFINER_ROLE, account)) {\\n            roles[index] = \\\"REFINER\\\";\\n            index++;\\n        }\\n        if (hasRole(TRANSPORTER_ROLE, account)) {\\n            roles[index] = \\\"TRANSPORTER\\\";\\n            index++;\\n        }\\n        if (hasRole(AUDITOR_ROLE, account)) {\\n            roles[index] = \\\"AUDITOR\\\";\\n            index++;\\n        }\\n        if (hasRole(INSPECTOR_ROLE, account)) {\\n            roles[index] = \\\"INSPECTOR\\\";\\n            index++;\\n        }\\n        if (hasRole(BUYER_ROLE, account)) {\\n            roles[index] = \\\"BUYER\\\";\\n            index++;\\n        }\\n\\n        return roles;\\n    }\\n\\n    // function _setupRole(bytes32 role, address account) internal virtual {\\n    //     __grantRole(role, account);\\n    // }\\n\\n    /**\\n     ** @dev Roles helper functions\\n     * @dev checks if an account has a specific role\\n     * @param account The address of the account to checked with role association\\n     */\\n    function hasMinerRole(address account) public view returns (bool) {\\n        return hasRole(MINER_ROLE, account);\\n    }\\n    function hasRefinerRole(address account) public view returns (bool) {\\n        return hasRole(REFINER_ROLE, account);\\n    }\\n    function hasTransporterRole(address account) public view returns (bool) {\\n        return hasRole(TRANSPORTER_ROLE, account);\\n    }\\n    function hasInspectorRole(address account) public view returns (bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n    function hasAuditorRole(address account) public view returns (bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n    function hasBuyerRole(address account) public view returns (bool) {\\n        return hasRole(BUYER_ROLE, account);\\n    }\\n    function hasAdminRole(address account) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    // Helper function to validate the role\\n    function isValidRole(bytes32 role) private pure returns (bool) {\\n        return\\n            role == MINER_ROLE ||\\n            role == REFINER_ROLE ||\\n            role == TRANSPORTER_ROLE ||\\n            role == AUDITOR_ROLE ||\\n            role == INSPECTOR_ROLE ||\\n            role == BUYER_ROLE;\\n    }\\n\\n    /**\\n    * @dev checks audit and inspection status\\n    * @param mineralId The ID of the mineral to check for audit and inspection status\\n\\n    * Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\\n    */\\n    function checkAuditAndInspectionStatus(\\n        string memory mineralId\\n    ) public virtual restrictedToRole(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert RolesManager__InvalidMineralIdOrNotFound();\\n        }\\n\\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\\n            emit MineralReadyToTrade(mineralId, msg.sender, \\\"TradingReady\\\", block.timestamp);\\n        } else {\\n            revert RolesManager__MineralNotMarketReady(mineralId);\\n        }\\n\\n        isAudited = mineralDetails[mineralId].isAudited;\\n        isInspected = mineralDetails[mineralId].isInspected;\\n\\n        return (isAudited, isInspected);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            GETTERS - For Traceability\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getMineralHistory(string memory mineralId) public view virtual returns (MineralHistory[] memory) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert RolesManager__InvalidMineralIdOrNotFound();\\n        }\\n\\n        return mineralHistories[mineralId];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n    ===============================================================\\n         MINERAL REGISTRATION HELPER FUNCTIONS SECTION\\n    ===============================================================\\n    ////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev checks if a mineral with the given ID is registered\\n     * @param mineralId the ID of the mineral to check\\n     * @return A boolean indicating whether the mineral is registered or not\\n     */\\n    function isMineralRegistered(string memory mineralId) public virtual returns (bool) {\\n        if (bytes(mineralId).length == 0) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\\n            revert MineralRegistry__MineralNotRegistered(mineralId);\\n        }\\n\\n        return true;\\n    }\\n\\n    //////////////////////////////////////////////////////\\n    //////// GENERATE HASHED MINERALID FOR UNIQUENESS/////\\n    //////////////////////////////////////////////////////\\n    function _generateHashedMineralId(string memory mineralType) internal returns (string memory) {\\n        bytes32 fullHash = keccak256(abi.encodePacked(mineralType, msg.sender, block.timestamp, nonce++));\\n\\n        // Convert first 4 bytes (8 hex characters) into hex string with \\\"0x\\\"\\n        bytes memory shortHex = new bytes(10); // 2 for \\\"0x\\\", 8 for hex chars\\n        shortHex[0] = \\\"0\\\";\\n        shortHex[1] = \\\"x\\\";\\n        for (uint i = 0; i < 4; i++) {\\n            shortHex[2 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] >> 4));\\n            shortHex[3 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] & 0x0f));\\n        }\\n\\n        return string(abi.encodePacked(mineralType, \\\"-\\\", string(shortHex)));\\n    }\\n\\n    // helper: convert nibble to hex char (0-9, a-f)\\n    function _nibbleToHexChar(uint8 nibble) internal pure returns (bytes1) {\\n        return nibble < 10 ? bytes1(nibble + 0x30) : bytes1(nibble + 0x61 - 10);\\n    }\\n\\n    ///////////////////////////////////////////////\\n    //////// getting all registered minerals /////\\n    // //////////////////////////////////////////////\\n    // function getAllRegisteredMineral() public view returns(MineralDetails[] memory mineralDetails) {\\n    //     return mineralDetails;\\n\\n    // }\\n}\\n\",\"keccak256\":\"0xe1d42561c04e03e5c20a3ffa091227c6ddf7827616de718f563331de64846c2f\",\"license\":\"MIT\"},\"contracts/tokens/Tokenization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\n\\ncontract Tokenization is ERC721, RolesManager {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n\\n    struct MineralToken {\\n        string mineralId;\\n        string details;\\n        address owner;\\n        uint8 flags; // bit 0: minted, 1: audited, 2: inspected, 3: purchased\\n    }\\n\\n    uint256 private nextTokenId = 1;\\n    mapping(uint256 => MineralToken) private _tokens;\\n    mapping(string => uint256) public mineralToToken;\\n\\n    event Minted(uint256 indexed tokenId, string mineralId, address indexed to);\\n    event Transferred(uint256 indexed tokenId, address indexed from, address indexed to);\\n    event Updated(uint256 indexed tokenId);\\n    event Revoked(uint256 indexed tokenId, string reason);\\n    event MetadataUpdated(uint256 indexed tokenId);\\n\\n    constructor() ERC721(\\\"MineralToken\\\", \\\"MTKN\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n    // Remove the onlyRole modifier since it's inherited from AccessControl\\n    // Keep onlySpecificRole if needed from RolesManager\\n\\n    function mintToken(address to, string calldata mineralId, string calldata details) external {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"Unauthorized\\\");\\n        uint256 tokenId = nextTokenId++;\\n\\n        require(!_exists(tokenId), \\\"Exists\\\");\\n        require(mineralToToken[mineralId] == 0, \\\"MineralUsed\\\");\\n\\n        _mint(to, tokenId);\\n\\n        _tokens[tokenId] = MineralToken({ mineralId: mineralId, details: details, owner: msg.sender, flags: 0x01 });\\n\\n        mineralToToken[mineralId] = tokenId;\\n        emit Minted(tokenId, mineralId, to);\\n    }\\n\\n    function updateToken(uint256 tokenId, string calldata, bool audited, bool inspected, bool purchased) external {\\n        address owner = ownerOf(tokenId);\\n        require(\\n            owner == msg.sender || getApproved(tokenId) == msg.sender || isApprovedForAll(owner, msg.sender),\\n            \\\"NotOwner\\\"\\n        );\\n\\n        MineralToken storage t = _tokens[tokenId];\\n        t.flags = _setFlag(t.flags, 1, audited);\\n        t.flags = _setFlag(t.flags, 2, inspected);\\n        t.flags = _setFlag(t.flags, 3, purchased);\\n\\n        emit Updated(tokenId);\\n    }\\n\\n    function updateMetadata(uint256 tokenId, string calldata newDetails) external {\\n        address owner = ownerOf(tokenId);\\n        require(\\n            owner == msg.sender || getApproved(tokenId) == msg.sender || isApprovedForAll(owner, msg.sender),\\n            \\\"NotOwner\\\"\\n        );\\n        _tokens[tokenId].details = newDetails;\\n        emit MetadataUpdated(tokenId);\\n    }\\n\\n    function transferOwnership(uint256 tokenId, address newOwner) external {\\n        require(hasRole(BUYER_ROLE, msg.sender), \\\"Unauthorized\\\");\\n        address owner = ownerOf(tokenId);\\n        require(\\n            owner == msg.sender || getApproved(tokenId) == msg.sender || isApprovedForAll(owner, msg.sender),\\n            \\\"NotOwner\\\"\\n        );\\n\\n        _transfer(owner, newOwner, tokenId);\\n        _tokens[tokenId].owner = newOwner;\\n\\n        emit Transferred(tokenId, owner, newOwner);\\n    }\\n\\n    function revokeToken(uint256 tokenId, string calldata reason) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Unauthorized\\\");\\n        require(_exists(tokenId), \\\"Invalid\\\");\\n        _burn(tokenId);\\n        delete _tokens[tokenId];\\n        emit Revoked(tokenId, reason);\\n    }\\n\\n    function getTokenDetails(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 id,\\n            string memory mineralId,\\n            string memory details,\\n            bool isMinted,\\n            bool isAudited,\\n            bool isInspected,\\n            bool isPurchased,\\n            address owner\\n        )\\n    {\\n        require(_exists(tokenId), \\\"Invalid\\\");\\n        MineralToken memory t = _tokens[tokenId];\\n        return (\\n            tokenId,\\n            t.mineralId,\\n            t.details,\\n            (t.flags & 0x01) != 0,\\n            (t.flags & 0x02) != 0,\\n            (t.flags & 0x04) != 0,\\n            (t.flags & 0x08) != 0,\\n            t.owner\\n        );\\n    }\\n\\n    function _setFlag(uint8 flags, uint8 bit, bool value) private pure returns (uint8) {\\n        return value ? uint8(flags | (1 << bit)) : uint8(flags & ~(1 << bit));\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokens[tokenId].owner != address(0);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function getTokenIdByMineralId(string calldata mineralId) external view returns (uint256) {\\n        uint256 tokenId = mineralToToken[mineralId];\\n        require(_exists(tokenId), \\\"Invalid\\\");\\n        return tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x94cd54c2538af0b469b8e6eea1c4f95fae3c57c2f3bd9db3c8740834f2330dbb\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract Errors {\\n    /*//////////////////////////////////////////////////////////////\\n                        MINERALREGISTRY__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error MineralRegistry__MineralNotRegistered(string mineralId);\\n    error MineralRegistry__MineralAlreadyPurchased();\\n    error MineralRegistry__MineralAlreadyAudited();\\n    error MineralRegistry__MineralAlreadyInspected();\\n    error MineralRegistry__MineralNotAudited();\\n    error MineralRegistry__MineralNotInspected();\\n\\n    error MineralRegistry__InvalidMineralDetails();\\n    error MineralRegistry__InvalidMineralIdOrNotFound(string mineralId);\\n    error MineralRegistry__InvalidMineralStatus();\\n    error MineralRegistry__InvalidMineralName();\\n    error MineralRegistry__InvalidMineralOrigin();\\n    error MineralRegistry__InvalidMineralType();\\n    error MineralRegistry__InvalidMineralWeight();\\n    error MineralRegistry__InvalidMineralPurityPercentage();\\n    error MineralRegistry__InvalidMineralStorageConditions();\\n    error MineralRegistry__InvalidMineralLocation();\\n    error MineralRegistry__InvalidReceivingPartyAddress();\\n    error MineralRegistry__InvalidMineralDestination();\\n\\n    error MineralNotReadyToTrade(string mineralId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ROLESMANAGER__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n    error RolesManager__MineralAlreadyRefined(string mineralId);\\n    error RolesManager__MineralAlreadyPurchased(string mineralId);\\n    error RolesManager__MineralAlreadyInspected(string mineralId);\\n    error RolesManager__MineralAlreadyAudited(string mineralId);\\n    error RolesManager__NotTheAssignedBuyer(address caller);\\n\\n    error RolesManager__InvalidMineralName();\\n    error RolesManager__InvalidMineralOrigin();\\n    error RolesManager__InvalidMineralDestination();\\n\\n    error RolesManager__MineralNotMarketReady(string mineralId);\\n\\n    error RolesManager__InvalidMineralIdOrNotFound();\\n    error RolesManager__InvalidMineralType();\\n    error RolesManager__InvalidReceivingPartyAddress();\\n    error RolesManager__InvalidMineralStorageConditions();\\n    error RolesManager__InvalidMineralPurityPercentage();\\n    error RolesManager__MineralPurityPercentageTooLowToRegister(uint256 purityPercentage);\\n    error RolesManager__InvalidMineralWeight();\\n\\n    error RolesManager__InvalidAddress();\\n    error RolesManager__InvalidRole();\\n\\n    // Roles Assignment and revocation\\n    error RolesManager__AccountAlreadyHasRole();\\n    error RolesManager__AccountDoesNotHaveRole();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            DISPUTERESOLUTION__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n    error DisputeResolution__InvalidMineralIdOrNotFound();\\n    error DisputeResolution__InvalidDisputeDefendantAddress();\\n    error DisputeResolution__InvalidDisputeDetails();\\n    error DisputeResolution__InvalidDisputeEvidence();\\n    error DisputeResolution__InvalidDisputeIdOrNotFound();\\n    error DisputeResolution__InvalidResolutionDetails();\\n    error DisputeResolution__DisputeStatusNotPendingOrEscalated();\\n    error DisputeResolution__DisputeStatusNotPending(uint256 disputeId);\\n    error DisputeResolution__NotEligibleToVote(address caller);\\n    error DisputeResolution__AlreadyVoted(address caller);\\n    error DisputeResolution__DisputeEscalated_UnableToVote(uint256 disputeId);\\n    error DisputeResolution__VotingPeriodStillActive();\\n    error DisputeResolution__DisputeNotEscalated(uint256 disputeId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MINERALWAREHOUSE__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error MineralWarehouse__InvalidTokenAddress(address tokenAddress);\\n    error MineralWarehouse__MineralNotRefined(string mineralId);\\n    error MineralWarehouse__InvalidNumberOfPrices();\\n    error MineralWarehouse__UnacceptedToken(address tokenAddress);\\n    error MineralWarehouse__UnacceptedTokens(address[] tokenAddresses);\\n    error MineralWarehouse__MineralNotMarketReady(string mineralId);\\n    error MineralWarehouse__InvalidMineralPrice();\\n    error MineralWarehouse__MineralAlreadySold(string mineralId);\\n    error MineralWarehouse__UnauthorizedSeller(address seller);\\n    error MineralNotMarketReady(string mineralId);\\n    error MineralWarehouse__IncorrectETHAmount();\\n    error MineralWarehouse__ETHTransferFailed();\\n    error MineralWarehouse__InvalidTokenPrice();\\n\\n    error MineralWarehouse__MineralNotFoundInWarehouse(string mineralId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            TOKENISATION__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error Tokenization__TokenAlreadyExists(uint256 tokenId);\\n    error Tokenization__TokenIsAlreadyMinted(uint256 tokenId);\\n    error Tokenization__InvalidTokenIdOrNotFound(uint256 tokenId);\\n    error Tokenization__CallerNotMineralTokenOwner(uint256 tokenId, address caller);\\n    error Tokenization__InvalidTokenId(uint256 tokenId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            TRANSACTIONlOG__CUSTOM ERRORS\\n       //////////////////////////////////////////////////////////////*/\\n    error TransactionLog__InvalidOperationType();\\n    error TransactionLog__InvalidOperationIndex(uint256 index);\\n    error TransactionLog__InvalidTransactionIdOrNotFound(uint256 transactionId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        SUPPLYCHAINVALIDATOR__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error SupplychainValidator__InvalidMineralIdOrNotFound(string mineralId);\\n    error SupplychainValidator__InvalidMineralTransactionHistory();\\n    error SupplychainValidator__InvalidMineralOwnershipChain();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             GLOBAL ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n    error InvalidAccountAddress();\\n    error ERC20TokenTransferFailed(address token, uint256 tokenAmount);\\n    error InvalidPaymentMethods();\\n    error InvalidMineralIdOrNotFound(string mineralId);\\n    error InsufficientPermissionsToPerformAction(address caller);\\n\\n    /////////////////////////////////////\\n    // LOGISTICS MANAGER ERRORS /////////\\n    /////////////////////////////////////\\n    error TransportRequestAlreadyExists(string mineralId);\\n    error AddressDoesNotHaveRequiredRole(address caller, bytes32 role);\\n    error NotAssignedTransporter(string mineralId, address caller);\\n    error InvalidTransportStateTransition(string currentStatus, string attemptedStatus);\\n}\\n\",\"keccak256\":\"0x6e0084b44ab8ded04100c9661f4ba7cc7f94b2e4e9393723af5b4dc1b3b8d62a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620003eb576040906001600160401b039080830182811182821017620003d5578352600c81526020916b26b4b732b930b62a37b5b2b760a11b8383015283519284840184811083821117620003d55785526004918285526326aa25a760e11b828601528351818111620003c0576000958654916001968784811c94168015620003b5575b86851014620003a2578190601f948581116200034f575b508690858311600114620002eb578a92620002df575b5050600019600383901b1c191690871b1787555b8051928311620002cc5785548681811c91168015620002c1575b85821014620002ae579081838594931162000259575b5084918311600114620001f5578792620001e9575b5050600019600383901b1c191690841b1783555b434201804211620001d657600755600a906200013c33620003f0565b848052818152838686205585514281527f458ea7e03b3466b3cf9bc2d66ddea8b11fe9469982816f42666888e6c8c6e664823392a283600b556200018033620003f0565b6200018b336200044f565b5060008051602062006153833981519152855252838320928354916000198314620001c357505001905551615bd09081620005638239f35b634e487b7160e01b825260119052602490fd5b634e487b7160e01b855260118352602485fd5b0151905038806200010c565b8688528488208794509190601f198416895b8782821062000242575050841162000228575b505050811b01835562000120565b015160001960f88460031b161c191690553880806200021a565b8385015186558a9790950194938401930162000207565b909192508688528488208380860160051c820192878710620002a4575b9186958a929594930160051c01915b82811062000295575050620000f7565b8a815586955089910162000285565b9250819262000276565b634e487b7160e01b885260228652602488fd5b90607f1690620000e1565b634e487b7160e01b875260418552602487fd5b015190503880620000b3565b8a8052878b208a94509190601f1984168c5b8a8282106200033857505084116200031e575b505050811b018755620000c7565b015160001960f88460031b161c1916905538808062000310565b8385015186558d97909501949384019301620002fd565b909150898052868a208580850160051c82019289861062000398575b918b91869594930160051c01915b828110620003895750506200009d565b8c81558594508b910162000379565b925081926200036b565b634e487b7160e01b895260228752602489fd5b93607f169362000086565b604184634e487b7160e01b6000525260246000fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b620003fb90620004e1565b5060008052600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e38054600019811462000439576001019055565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b031660008181527f8b6c17971091f14c72dc9926ac25eeb209486d91b49eb570e570d5ecdb8327a76020526040812054909190600080516020620061538339815191529060ff16620004dc5780835260066020526040832082845260205260408320600160ff1982541617905560008051602062006133833981519152339380a4600190565b505090565b6001600160a01b031660008181527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8602052604081205490919060ff166200055e5781805260066020526040822081835260205260408220600160ff198254161790553391600080516020620061338339815191528180a4600190565b509056fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146147715750806306fdde03146146ce578063081812fc146146b05780630958fc2d146145f6578063095ea7b31461450f5780630dacad2e14614455578063126ee3381461412057806323b872dd14614109578063248a9ca3146140da57806329507f7314613f565780632e689c3f14613b025780632f2ff15d14613ac3578063309514df14613a485780633499c3a2146139f857806335ba6207146138f257806336568abe146138ab5780633a7adea5146129b85780633cd0b75f1461283a57806342842e0e14612812578063480d1dd3146127585780634e2a31091461265f5780634eabbe771461263657806353c8388e146124a857806354902c751461244c5780635aee1b15146122295780636352211e146121f95780636377741d1461213f5780636394f6e6146121165780636e1d616e146120ed57806370a082311461209457806370e22e421461204457806375a2b0d414611e7057806379451cd714611e475780637a01a1da14611e1e5780637ae9c16014611da35780637cde2b9914611caa578063826fe0f514611a9d5780638850845f14611a4d57806391d1485414611a0057806395d89b411461192157806399691194146118235780639b188dd6146117a8578063a217fddf1461178c578063a22cb465146116e7578063a917601b1461162d578063abaa536f146115dd578063ac851dfd14611512578063b6ba1ca7146114e6578063b88d4fde14611487578063b9c5b83314611362578063bd607f7c146112e9578063beae461514611299578063c1e0372814611183578063c395fcb314611121578063c87b56dd146110ca578063ca15c87314610fe0578063cc82b09014610f14578063d539139314610ed9578063d547741f14610e98578063de7ce39114610e48578063df422bf21461092c578063e3a3c52214610903578063e438fdf814610888578063e985e9c514610832578063f17f352314610625578063f5716a85146105aa578063fc1032eb146104c85763feee971a1461030b57600080fd5b346104c35760a03660031901126104c3576004356024356001600160401b0381116104c35761033e90369060040161499c565b505060443580151581036104c3576064359081151582036104c35760843580151581036104c3576104389261040d906001600160a01b038061037f88615714565b16903382149081156104af575b508015610489575b61039e9150615924565b85600052600c6020526103e1600260406000200194855460a01c906000146104815760ff166002175b855460ff60a01b191660a09190911b60ff60a01b16178555565b835460a01c90156104795760ff166004175b835460ff60a01b191660a09190911b60ff60a01b16178355565b815460a01c901561045f57815460ff60a01b191660ff9190911660081760a01b60ff60a01b16179055565b7f208509800c5cb9707f116ef96a1d456499ab9fa3c8edc1cdf381fe5216d5b173600080a2005b815460ff60a01b191660a09190911b60f760a01b16179055565b60fb166103f3565b60fd166103c7565b50600052600560205260406000203360005260205261039e60ff60406000205416610394565b3391506104bb89615351565b16143861038c565b600080fd5b346104c3576104d6366149c9565b6104de614c6c565b6104e782614bc0565b156105985761056f7f93e936184fad9f80c7000aa987f91be0cd621bacde11839fdc7139f3d9c2407b91600080516020615b1b83398151915280600052600660205261053a600160406000200154614cc4565b61054385615276565b50600052600a6020526040600020805480610586575b5050604051918291604083526040830190614819565b4260208301526001600160a01b03909416930390a2005b61058f906157ea565b90558480610559565b604051632ac1560560e21b8152600490fd5b346104c3576105b8366149c9565b6105c0614c6c565b6105c982614beb565b156105985761056f7f4614600adaea632b1e4c381ad24471dab7b587dca104c8dd4da76bc64f19716f91600080516020615b3b83398151915280600052600660205261061c600160406000200154614cc4565b61054385615200565b346104c35760803660031901126104c3576001600160401b036004358181116104c357610656903690600401614949565b9061065f614854565b906044358181116104c357610678903690600401614949565b906064359081116104c357610691903690600401614949565b90600080516020615a1b83398151915260005260209260068452604060002033600052845260ff604060002054161561081a576001600160a01b03168015610808578151156107f6578251156107e457604051600160ff600a8851938881818c01966106fe81838a6147f6565b81016008815203019020015460a01c161515146107be57936107af93926107a192600a610759847f55b00b3c29344a545244b18d70b135e423405427088bd5425f13d690b82310b4998b6040519384928392519283916147f6565b8101600881520301902001336bffffffffffffffffffffffff60a01b8254161790556107906040519860a08a5260a08a0190614819565b928801528682036040880152614819565b908482036060860152614819565b914260808201528033930390a2005b604051632072bb0160e11b815260048101869052806107e06024820189614819565b0390fd5b604051635dbef47560e01b8152600490fd5b6040516326813e6f60e01b8152600490fd5b60405163bea3fd2f60e01b8152600490fd5b604051630568555f60e41b8152336004820152602490fd5b346104c35760403660031901126104c35761084b61483e565b610853614854565b9060018060a01b03809116600052600560205260406000209116600052602052602060ff604060002054166040519015158152f35b346104c357610896366149c9565b61089e614c6c565b6108a782614c41565b156105985761056f7f352e14c53d161e2481e65145b53265d1608f979a93a06df66d4c99b2a84ddc6391600080516020615a3b8339815191528060005260066020526108fa600160406000200154614cc4565b6105438561518a565b346104c35760003660031901126104c3576020604051600080516020615a3b8339815191528152f35b346104c3576020806003193601126104c3576001600160a01b0361094e61483e565b168015610e365760009060008052600690818452604060002081600052845260ff908160406000205416610e2d575b600080516020615afb833981519152928360005280865260406000208260005286528260406000205416610e1d575b600080516020615b3b8339815191528060005281875260406000208360005287528360406000205416610e0d575b600080516020615a1b8339815191528060005282885260406000208460005288528460406000205416610dfd575b600080516020615b1b8339815191528060005283895260406000208560005289528560406000205416610ded575b600080516020615a3b8339815191529182600052848a526040600020866000528a528660406000205416610ddd575b600080516020615adb8339815191529384600052858b526040600020876000528b528760406000205416610dcd575b610a9d8a6157f7565b99610aab6040519b8c6148d6565b808b52610aba601f19916157f7565b018b8b60005b838110610dbc575050505060009860008052868c526040600020886000528c528860406000205416610d81575b600052858b526040600020876000528b528760406000205416610d44575b600052848a526040600020866000528a528660406000205416610d05575b60005283895260406000208560005289528560406000205416610cc2575b60005282885260406000208460005288528460406000205416610c83575b60005281875260406000208360005287528360406000205416610c42575b6000528552604060002090600052845260406000205416610bff575b506040519082820192808352815180945260408301938160408260051b8601019301916000955b828710610bd35785850386f35b909192938280610bef600193603f198a82030186528851614819565b9601920196019592919092610bc6565b610c3b90604051610c0f816148a0565b6005815264212aaca2a960d91b85820152610c2a828561581b565b52610c35818461581b565b506157db565b5082610b9f565b93610c7d90604051610c53816148a0565b600981526824a729a822a1aa27a960b91b89820152610c72828961581b565b52610c35818861581b565b93610b83565b94610cbc90604051610c94816148a0565b600781526620aaa224aa27a960c91b8a820152610cb1828a61581b565b52610c35818961581b565b94610b65565b95610cff90604051610cd3816148a0565b600b81526a2a2920a729a827a92a22a960a91b8b820152610cf4828b61581b565b52610c35818a61581b565b95610b47565b96610d3e90604051610d16816148a0565b60078152662922a324a722a960c91b8c820152610d33828c61581b565b52610c35818b61581b565b96610b29565b97610d7b90604051610d55816148a0565b600581526426a4a722a960d91b8d820152610d70828d61581b565b52610c35818c61581b565b97610b0b565b9850604051610d8f816148a0565b600581526420a226a4a760d91b8c820152610da98b61580e565b52610db38a61580e565b50600198610aed565b606083828194010152018c90610ac0565b98610dd7906157db565b98610a94565b97610de7906157db565b97610a65565b96610df7906157db565b96610a36565b95610e07906157db565b95610a08565b94610e17906157db565b946109da565b93610e27906157db565b936109ac565b6001935061097d565b60405163200db56f60e11b8152600490fd5b346104c35760203660031901126104c357610e6161483e565b6001600160a01b031660009081526000805160206159fb833981519152602090815260409182902054915160ff9092161515825290f35b346104c35760403660031901126104c357610ed7600435610eb7614854565b90806000526006602052610ed2600160406000200154614cc4565b6152ec565b005b346104c35760003660031901126104c35760206040517ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc98152f35b346104c35760203660031901126104c357610f2d61483e565b6001600160a01b038116908115610e3657610f46614c6c565b610f4f81614c41565b610fce57610f5c90614f47565b50600080516020615a3b833981519152600052600a6020527f2a9d1069eeb67f67cc187d821eca67b4b2564e0248958345303d890243b2b23f8054610fa0906157db565b90557f49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e0926020604051428152a2005b6040516314726de560e21b8152600490fd5b346104c35760203660031901126104c357600435600080516020615afb833981519152811480156110b3575b801561109c575b8015611085575b801561106e575b8015611057575b1561104557600052600a6020526020604060002054604051908152f35b604051636b9c461160e01b8152600490fd5b50600080516020615adb8339815191528114611028565b50600080516020615a3b8339815191528114611021565b50600080516020615b1b833981519152811461101a565b50600080516020615a1b8339815191528114611013565b50600080516020615b3b833981519152811461100c565b346104c35760203660031901126104c3576110e6600435615714565b5060006040516110f5816148bb565b5261111d604051611105816148bb565b60008152604051918291602083526020830190614819565b0390f35b346104c35760203660031901126104c35761113a61483e565b6001600160a01b031660009081527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8602090815260409182902054915160ff9092161515825290f35b346104c35760203660031901126104c3576004356000818152600c60205260409020600201546111bd906001600160a01b0316151561595b565b80600052600c6020526040600020906040516111d88161486a565b6040516111f0816111e98187614a5e565b03826148d6565b8152600260405193611210856112098160018501614a5e565b03866148d6565b8460208401520154600861126660018060a01b0383169283604086015260a01c9360ff85166060820152519561125860405197889788526101008060208a0152880190614819565b908682036040880152614819565b926001811615156060860152600281161515608086015260048116151560a086015216151560c084015260e08301520390f35b346104c35760203660031901126104c3576112b261483e565b6001600160a01b03166000908152600080516020615a9b833981519152602090815260409182902054915160ff9092161515825290f35b346104c35760203660031901126104c3576004356001600160401b0381116104c357602061131c8192369060040161499c565b9190826040519384928337600d90820190815203019020546000818152600c602052604090206002015461135a906001600160a01b0316151561595b565b604051908152f35b346104c35760003660031901126104c357600a60209081527f3c262eea85e30be6a8514764bbc3c57d2458a53d482ccec22849f39a3664cdd9547f701354baf5fc0042f9efd6d9f70560ee4ca4abc2c70e828283ca93ea6f67b33c547ff70d81a1e8770ae7ad501c118ed085c1337509b81d6ba7dc03b47c7cf1b034f0547f473e73b9f26a9fd92c793dcefb649a4d1c3311083b769d9ee0cb0b4281562409547f2a9d1069eeb67f67cc187d821eca67b4b2564e0248958345303d890243b2b23f54600080516020615adb8339815191526000527f6123944ea9aa8fcd3876e0f59e0e450a46abe6fe31f4aed8033c2800f585cc63546040805196875296860194909452948401919091526060830152608082019290925260a081019190915260c090f35b346104c35760803660031901126104c3576114a061483e565b6114a8614854565b606435916001600160401b0383116104c357366023840112156104c3576114dc610ed7933690602481600401359101614912565b9160443591615506565b346104c35760203660031901126104c357600435600052600a6020526020604060002054604051908152f35b346104c3576020806003193601126104c3576004356001600160401b0381116104c357611543903690600401614949565b8051156115ba576040516111e961157d8351928581818701956115678183896147f6565b8101600881520301902060405192838092614a5e565b838151910120908251902003611597575060405160018152f35b906107e06040519283926311bb0bc960e31b845260048401526024830190614819565b906107e060405192839263f855236d60e01b845260048401526024830190614819565b346104c35760203660031901126104c3576115f661483e565b6001600160a01b03166000908152600080516020615abb833981519152602090815260409182902054915160ff9092161515825290f35b346104c35760203660031901126104c35761164661483e565b6001600160a01b038116908115610e365761165f614c6c565b61166881614c16565b610fce5761167590614ecf565b50600080516020615a1b833981519152600052600a6020527ff70d81a1e8770ae7ad501c118ed085c1337509b81d6ba7dc03b47c7cf1b034f080546116b9906157db565b90557f964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a66020604051428152a2005b346104c35760403660031901126104c35761170061483e565b602435908115158092036104c3576001600160a01b031690811561177357336000526005602052604060002082600052602052604060002060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b604051630b61174360e31b815260048101839052602490fd5b346104c35760003660031901126104c357602060405160008152f35b346104c3576117b6366149c9565b6117be614c6c565b6117c782614b95565b156105985761056f7f69e94e373f69f3f945457a07b335722310788af9cd459a33df6f72cc9e96404391600080516020615adb83398151915280600052600660205261181a600160406000200154614cc4565b61054385615114565b346104c35761183136614b27565b336000908152600080516020615a7b833981519152602090815260409091205491929160ff161561081a57604051600160ff600a85519385818189019661187981838a6147f6565b81016008815203019020015460b81c161515146118fe5791600a6118cd6118f9937f3a9eebd240f4c9f631531ebc672c4c040de483b868ccebe8a3a1fdad70cde0d9956040518093819287519283916147f6565b8101600881520301902001600160b81b60ff60b81b1982541617905560405191829133954291846157ad565b0390a2005b506107e0604051928392636f5f944160e11b845260048401526024830190614819565b346104c35760003660031901126104c3576040516000600180549061194582614a24565b808552918181169081156119d95750600114611980575b61111d8461196c818603826148d6565b604051918291602083526020830190614819565b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106119c157505050810160200161196c8261195c565b805460208587018101919091529093019281016119a9565b60ff191660208087019190915292151560051b8501909201925061196c915083905061195c565b346104c35760403660031901126104c357611a19614854565b600435600052600660205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346104c35760203660031901126104c357611a6661483e565b6001600160a01b03166000908152600080516020615a7b833981519152602090815260409182902054915160ff9092161515825290f35b346104c3576020806003193601126104c3576004356001600160401b0381116104c357611ace903690600401614949565b604051906111e9611aec82519385818186019661156781838a6147f6565b8381519101208151908184201490811591611ca1575b50611c8f57611b1e9183916040519384928392519283916147f6565b8101600981520301902090815491611b35836157f7565b92611b4360405194856148d6565b8084528284018092600052836000206000915b838310611c0b5750505050604051918083019381845251809452604083019360408160051b85010192916000955b828710611b915785850386f35b909192938280600192603f19898203018552875190611be0611bce611bbe845160a0808652850190614819565b8585015184820387860152614819565b60408401518382036040850152614819565b916060868060a01b038183015116908301526080809101519101529601920196019592919092611b84565b600586600192604099989951611c2081614885565b604051611c31816111e9818a614a5e565b8152604051611c46816111e981898b01614a5e565b83820152604051611c5e816111e98160028b01614a5e565b6040820152848060a01b03600387015416606082015260048601546080820152815201920192019190959495611b56565b6040516329d7b10b60e11b8152600490fd5b90501584611b02565b346104c357611cb836614b27565b3360009081526000805160206159fb833981519152602090815260409091205491929160ff161561081a57604051600160ff600a855193858181890196611d0081838a6147f6565b81016008815203019020015460a81c16151514611d805791600a611d546118f9937fa214f45af6d86b0d5ff7bb48f888cf4205e4a383da35fcbebfdbd9bd8e6d5a7c956040518093819287519283916147f6565b8101600881520301902001600160a81b60ff60a81b1982541617905560405191829133954291846157ad565b506107e060405192839263701203b760e01b845260048401526024830190614819565b346104c357611db1366149c9565b611db9614c6c565b611dc282614c16565b156105985761056f7f71577b91708c73ee54b43c6709958ff42e4bcc084910648ce7c3d16928b51d5291600080516020615a1b833981519152806000526006602052611e15600160406000200154614cc4565b6105438561509e565b346104c35760003660031901126104c3576020604051600080516020615adb8339815191528152f35b346104c35760003660031901126104c3576020604051600080516020615b3b8339815191528152f35b346104c3576020806003193601126104c3576004356001600160401b0381116104c357611ea1903690600401614949565b906000805260068152604060002033600052815260ff604060002054161561081a576040516111e9611ee08451928481818801956115678183896147f6565b828151910120835190818320149081159161203b575b50611c8f5760ff600a60405184818751611f118183896147f6565b81016008815203019020015460b01c168061200f575b15611fec579060ff600a611fcd83604096958751606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e22611f6d606083018a614819565b916b54726164696e67526561647960a01b85828503948582850152600c81520152428b8201528a33930190a28484895184818b51611fac8183896147f6565b81016008815203019020015460b01c169688519384928392519283916147f6565b81016008815203019020015460b81c1683519215158352151590820152f35b506107e06040519283926348cddbdb60e11b845260048401526024830190614819565b5060ff600a604051848187516120268183896147f6565b81016008815203019020015460b81c16611f27565b90501584611ef6565b346104c35760203660031901126104c35761205d61483e565b6001600160a01b03166000908152600080516020615b7b833981519152602090815260409182902054915160ff9092161515825290f35b346104c35760203660031901126104c3576001600160a01b036120b561483e565b1680156120d45760005260036020526020604060002054604051908152f35b6040516322718ad960e21b815260006004820152602490fd5b346104c35760003660031901126104c3576020604051600080516020615b1b8339815191528152f35b346104c35760003660031901126104c3576020604051600080516020615afb8339815191528152f35b346104c35760203660031901126104c35761215861483e565b6001600160a01b038116908115610e3657612171614c6c565b61217a81614beb565b610fce5761218790614e57565b50600080516020615b3b833981519152600052600a6020527f701354baf5fc0042f9efd6d9f70560ee4ca4abc2c70e828283ca93ea6f67b33c80546121cb906157db565b90557f4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be7516020604051428152a2005b346104c35760203660031901126104c3576020612217600435615714565b6040516001600160a01b039091168152f35b346104c35760203660031901126104c3576004356001600160401b0381116104c357612259903690600401614949565b6040518181809351602081930191612270926147f6565b8101600881520360200190206040518061228a8184614a5e565b0361229590826148d6565b60405191826122a78160018401614a5e565b036122b290846148d6565b604051806122c38160028501614a5e565b036122ce90826148d6565b60405191826122e08160038401614a5e565b036122eb90846148d6565b600481015460058201546040519491856123088160068701614a5e565b0361231390876148d6565b60078401546040516001600160a01b039790939188169290918461233a8160088a01614a5e565b0361234590866148d6565b60405195866123578160098b01614a5e565b0361236290886148d6565b600a88015497600b0154986040519c8d9c8d610200908181520161238591614819565b8d810360208f015261239691614819565b8c810360408e01526123a791614819565b8b810360608d01526123b891614819565b9160808b015260a08a015288810360c08a01526123d491614819565b9060e08801528681036101008801526123ec91614819565b8581036101208701526123fe91614819565b9281166101408501528060a01c60ff1615156101608501528060a81c60ff1615156101808501528060b01c60ff1615156101a085015260b81c60ff1615156101c08401526101e08301520390f35b346104c35760203660031901126104c3576004356001600160401b0381116104c357612495602061248281933690600401614949565b81604051938285809451938492016147f6565b8101600d81520301902054604051908152f35b346104c3576124b636614af4565b6001600160a01b03806124c885615714565b1690338214908115612622575b5080156125fc575b6124e79150615924565b82600052602090600c825260019182604060002001936001600160401b0383116125e65761251f836125198754614a24565b87615766565b600091601f84116001146125805750928293918392600094612575575b50501b916000199060031b1c19161790555b7f9428dcbe773ffde983d366e27dc72d5f9be6e309154036dd48f60fbc0784be68600080a2005b01359250868061253c565b9183601f1981168760005284600020946000905b888383106125cc57505050106125b2575b505050811b01905561254e565b0135600019600384901b60f8161c191690558480806125a5565b868601358855909601959384019387935090810190612594565b634e487b7160e01b600052604160045260246000fd5b5060005260056020526040600020336000526020526124e760ff604060002054166124dd565b33915061262e86615351565b1614856124d5565b346104c35760003660031901126104c3576020604051600080516020615a1b8339815191528152f35b346104c35761266d36614b27565b336000908152600080516020615abb833981519152602090815260409091205491929160ff161561081a57604051600160ff600a8551938581818901966126b581838a6147f6565b81016008815203019020015460b01c161515146127355791600a6127096118f9937fa9de1934279a83f8cfaaecf6a7002ac10aeaea244c8c763f3752f3fc4c3e631d956040518093819287519283916147f6565b8101600881520301902001600160b01b60ff60b01b1982541617905560405191829133954291846157ad565b506107e060405192839263c817400d60e01b845260048401526024830190614819565b346104c35760203660031901126104c35761277161483e565b6001600160a01b038116908115610e365761278a614c6c565b61279381614bc0565b610fce576127a090614ddf565b50600080516020615b1b833981519152600052600a6020527f473e73b9f26a9fd92c793dcefb649a4d1c3311083b769d9ee0cb0b428156240980546127e4906157db565b90557f4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb36020604051428152a2005b346104c357610ed761282336614967565b9060405192612831846148bb565b60008452615506565b346104c35761284836614af4565b3360009081527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f860209081526040909120549093929061288a9060ff166158c1565b6000838152600c60205260409020600201546128b0906001600160a01b0316151561595b565b60008381526002855260408120546001600160a01b031680159185918315612985575b828252600288526040822080546001600160a01b03191690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a461296c57600c83947f09e41d39f5fbe80f71bc2f0a44e937a0ee3dff62dd07f191a8a461a339891a039460005252600060026040822061294f81615991565b61295b60018201615991565b01556118f9604051928392836158fc565b604051637e27328960e01b815260048101849052602490fd5b600083815260046020526040902080546001600160a01b03191690558082526003885260408220821981540190556128d3565b346104c35760c03660031901126104c3576004356001600160401b0381116104c3576129e8903690600401614949565b6024356001600160401b0381116104c357612a07903690600401614949565b906064356001600160401b0381116104c357612a27903690600401614949565b9060a4356001600160401b0381116104c357612a47903690600401614949565b336000908152600080516020615a5b833981519152602052604090205490929060ff161561081a57815115613899578051156107f657835115613887576044351561387557608435158015613869575b613857576050608435111561383d5782511561382b57600754612ab9816157db565b600755604051612b0160748260208101946020612adc8b888151938492016147f6565b8201903360601b602083015242603483015260548201520360548101845201826148d6565b5190209260405193612b12856148a0565b600a8552602036818701378451156138155760306020860153845160011015613815576078602186015360005b60048110613782575050612b94602160405180968851612b66816020850160208d016147f6565b8201602d60f81b6020820152612b8582518093602087850191016147f6565b010360018101875201856148d6565b60405190816102008101106001600160401b03610200840111176125e6576102008201604052848252836020830152826040830152856060830152604435608083015260843560a083015260c08201523360e0820152604051612bf6816148a0565b600381526252617760e81b6020820152610100820152604051612c18816148a0565b600d81526c26b4b734b7339021b2b73a32b960991b6020820152610120820152336101408201526000610160820152600061018082015260006101a082015260006101c0820152426101e08201526040516020818651612c7b8183858b016147f6565b810160088152030190209080518051906001600160401b0382116125e6578190612ca9826125198754614a24565b602090601f83116001146137165760009261370b575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b0382116125e6578190612d0682612cfd6001880154614a24565b60018801615766565b602090601f83116001146136995760009261368e575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b0382116125e6578190612d6682612d5d6002880154614a24565b60028801615766565b602090601f831160011461361c57600092613611575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b0382116125e6578190612dc682612dbd6003880154614a24565b60038801615766565b602090601f831160011461359f57600092613594575b50508160011b916000199060031b1c19161760038301555b6080810151600483015560a0810151600583015560c08101518051906001600160401b0382116125e6578190612e3a82612e316006880154614a24565b60068801615766565b602090601f831160011461352257600092613517575b50508160011b916000199060031b1c19161760068301555b60e08101516007830180546001600160a01b0319166001600160a01b03929092169190911790556101008101518051906001600160401b0382116125e6578190612ec282612eb96008880154614a24565b60088801615766565b602090601f83116001146134a55760009261349a575b50508160011b916000199060031b1c19161760088301555b6101208101518051906001600160401b0382116125e657612f2182612f186009870154614a24565b60098701615766565b602090601f8311600114613424579180600b94926101e094600092613419575b50508160011b916000199060031b1c19161760098501555b600a840160018060a01b036101408301511681549060ff60a01b610160850151151560a01b1660ff60a81b610180860151151560a81b169060ff60b01b6101a0870151151560b01b169260ff60b81b6101c0880151151560b81b16946001600160401b0360c01b161717171717905501519101556040516020818551612fe28183858a016147f6565b81016009815203019020936040519467027b934b3b4b71d160c51b602087015261302a602887855161301a8184840160208a016147f6565b81010360088101895201876148d6565b6040519561303787614885565b858752604051613046816148a0565b600a815269149959da5cdd195c995960b21b6020820152602088015260408701523360608701524260808701528054680100000000000000008110156125e65761309591600182018155614a08565b6134035785518051906001600160401b0382116125e65781906130c2826130bc8654614a24565b86615766565b602090601f83116001146133975760009261338c575b50508160011b916000199060031b1c19161781555b60208601518051906001600160401b0382116125e657819061311f826131166001870154614a24565b60018701615766565b602090601f831160011461331a5760009261330f575b50508160011b916000199060031b1c19161760018201555b60408601519586516001600160401b0381116125e65761317d816131746002860154614a24565b60028601615766565b6020601f821160011461326e5792600460806107a1948461323298957f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939a9861111d9e600092613263575b50508160011b916000199060031b1c19161760028501555b6003840160018060a01b036060830151166bffffffffffffffffffffffff60a01b82541617905501519101556112586040519660e0885261322460e089018a614819565b9088820360208a0152614819565b91604435608082015260843560a08201524260c08201528033930390a2604051918291602083526020830190614819565b015190508e806131c8565b6002840160005260206000209860005b601f19841681106132f7575060806107a19460018561111d9d7f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939b99966004966132329c99601f198116106132de575b505050811b0160028501556131e0565b015160001960f88460031b161c191690558e80806132ce565b828201518b556001909a01996020928301920161327e565b015190508880613135565b9250600184016000526020600020906000935b601f1984168510613371576001945083601f19811610613358575b505050811b01600182015561314d565b015160001960f88460031b161c19169055888080613348565b8181015183556020948501946001909301929091019061332d565b0151905088806130d8565b9250836000526020600020906000935b601f19841685106133e8576001945083601f198116106133cf575b505050811b0181556130ed565b015160001960f88460031b161c191690558880806133c2565b818101518355602094850194600190930192909101906133a7565b634e487b7160e01b600052600060045260246000fd5b015190508a80612f41565b906009850160005260206000209160005b601f1985168110613482575092600b94926001926101e09583601f19811610613469575b505050811b016009850155612f59565b015160001960f88460031b161c191690558a8080613459565b91926020600181928685015181550194019201613435565b015190508880612ed8565b9250600885016000526020600020906000935b601f19841685106134fc576001945083601f198116106134e3575b505050811b016008830155612ef0565b015160001960f88460031b161c191690558880806134d3565b818101518355602094850194600190930192909101906134b8565b015190508880612e50565b9250600685016000526020600020906000935b601f1984168510613579576001945083601f19811610613560575b505050811b016006830155612e68565b015160001960f88460031b161c19169055888080613550565b81810151835560209485019460019093019290910190613535565b015190508880612ddc565b9250600385016000526020600020906000935b601f19841685106135f6576001945083601f198116106135dd575b505050811b016003830155612df4565b015160001960f88460031b161c191690558880806135cd565b818101518355602094850194600190930192909101906135b2565b015190508880612d7c565b9250600285016000526020600020906000935b601f1984168510613673576001945083601f1981161061365a575b505050811b016002830155612d94565b015160001960f88460031b161c1916905588808061364a565b8181015183556020948501946001909301929091019061362f565b015190508880612d1c565b9250600185016000526020600020906000935b601f19841685106136f0576001945083601f198116106136d7575b505050811b016001830155612d34565b015160001960f88460031b161c191690558880806136c7565b818101518355602094850194600190930192909101906136ac565b015190508880612cbf565b9250846000526020600020906000935b601f1984168510613767576001945083601f1981161061374e575b505050811b018255612cd4565b015160001960f88460031b161c19169055888080613741565b81810151835560209485019460019093019290910190613726565b60208110156138155781811a90600f61379f818460041c16615840565b908260011b9360028486048114851517156137ff578581018091116137ff576137cf6137d69460001a918c61582f565b5316615840565b9160039081018091116137ff576137f46137fa9360001a918961582f565b536157db565b612b3f565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60405163bfccc8e960e01b8152600490fd5b60405163d05db01960e01b81526084356004820152602490fd5b604051633abe7db760e21b8152600490fd5b50606460843511612a97565b60405163fd83f8d960e01b8152600490fd5b60405163a765e58f60e01b8152600490fd5b604051630ac6e45360e31b8152600490fd5b346104c35760403660031901126104c3576138c4614854565b336001600160a01b038216036138e057610ed7906004356152ec565b60405163334bd91960e11b8152600490fd5b346104c35760403660031901126104c3576004356001600160401b0381116104c357613922903690600401614949565b61393e60206024359281604051938285809451938492016147f6565b8101600981520301902080548210156104c3576139cd9161395e91614a08565b5060405190613978826139718184614a5e565b03836148d6565b60405161398c816111e98160018601614a5e565b6139e96040516139a3816111e98160028801614a5e565b6139db600460018060a01b036003870154169501549360405197889760a0895260a0890190614819565b908782036020890152614819565b908582036040870152614819565b91606084015260808301520390f35b346104c35760203660031901126104c357613a1161483e565b6001600160a01b03166000908152600080516020615a5b833981519152602090815260409182902054915160ff9092161515825290f35b346104c357613a56366149c9565b613a5e614c6c565b613a6782614b6a565b156105985761056f7f125f88db22967983b401f70f6804d47f43cb545fcb725d0b335fe7d43d9b4a4a91600080516020615afb833981519152806000526006602052613aba600160406000200154614cc4565b61054385615028565b346104c35760403660031901126104c357610ed7600435613ae2614854565b90806000526006602052613afd600160406000200154614cc4565b614fbf565b346104c35760603660031901126104c357613b1b61483e565b6024906001600160401b0382358181116104c357613b3d90369060040161499c565b906044358381116104c357613b5690369060040161499c565b3360009081527f8b6c17971091f14c72dc9926ac25eeb209486d91b49eb570e570d5ecdb8327a7602052604090205491949091613b959060ff166158c1565b600b5494613ba2866157db565b600b556000868152600c60205260409020600201546001600160a01b0316613f295760405185858237602081878101600d81520301902054613ef7576001600160a01b038716968715613edf576001600160a01b0390613c03908890615658565b16613ec757613c2d9060405193613c198561486a565b613c24368888614912565b85523691614912565b6020830190815233604084015260608301916001835286600052600c6020526040600020918451805190838211613eb2578190613c7482613c6e8854614a24565b88615766565b602090601f8311600114613e4c57600092613e41575b50508160011b916000199060031b1c19161783555b51988951918211613e2d5750613cc581613cbc6001850154614a24565b60018501615766565b6020601f8211600114613d915760ff9282613d5b9695936002937fc1177815a22ab58cdf6e40a80dfe322e9d00b7977bd78634869752fed8082f569b9c9d600092613d86575b50508160011b916000199060031b1c19161760018201555b6040909401519301805491516001600160a81b03199092166001600160a01b039490941693909317911660a01b60ff60a01b16179055565b8360405183838237602081858101600d81520301902055613d81604051928392836158fc565b0390a3005b015190508d80613d0b565b6001830160005260206000209960005b601f1984168110613e155750926001837fc1177815a22ab58cdf6e40a80dfe322e9d00b7977bd78634869752fed8082f569a9b9c60029460ff97613d5b9a9997601f19811610613dfc575b505050811b016001820155613d23565b015160001960f88460031b161c191690558d8080613dec565b828201518c556001909b019a60209283019201613da1565b634e487b7160e01b60009081526041600452fd5b015190508c80613c8a565b6000878152602081209350601f198516905b818110613e9a5750908460019594939210613e81575b505050811b018355613c9f565b015160001960f88460031b161c191690558c8080613e74565b92936020600181928786015181550195019301613e5e565b8b634e487b7160e01b60005260416004526000fd5b6040516339e3563760e11b8152600060048201528890fd5b604051633250574960e11b8152600060048201528990fd5b60405162461bcd60e51b815260206004820152600b818a01526a135a5b995c985b155cd95960aa1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526006818a01526545786973747360d01b6044820152606490fd5b346104c35760403660031901126104c357600435613f72614854565b336000908152600080516020615a9b8339815191526020526040902054909190613f9e9060ff166158c1565b613fa781615714565b6001600160a01b03818116919033831480156140c7575b801561409e575b613fce90615924565b8085169485156140855784613fe291615658565b9081168061400357604051637e27328960e01b815260048101869052602490fd5b92809493036140555750506000818152600c6020526040812060020180546001600160a01b031916851790557f0ea8df787dde63a7bdc34d17097adf25749a3521f660e92dabdff8d6ee91d18a9080a4005b6040516364283d7b60e01b81526001600160a01b0392831660048201526024810193909352166044820152606490fd5b604051633250574960e11b815260006004820152602490fd5b50826000526005602052604060002033600052602052613fce60ff604060002054169050613fc5565b5033816140d386615351565b1614613fbe565b346104c35760203660031901126104c35760043560005260066020526020600160406000200154604051908152f35b346104c357610ed761411a36614967565b91615376565b346104c3576020806003193601126104c3576004356001600160401b0381116104c357614151903690600401614949565b90600080516020615adb83398151915260005260068152604060002033600052815260ff9182604060002054161561081a57604051815193838301946141988184886147f6565b8201906001816008938481528588600a97889303019020015460a01c16151514614433576000805260068552604060002033600052855280604060002054161561081a576111e961420b6040518781806141f68c8b519283916147f6565b81018781520301902060405192838092614a5e565b858151910120845190818820149081159161442a575b50611c8f57808360405187818061423c8c8b519283916147f6565b810187815203019020015460b01c16806143ff575b156143dd57604051606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e2261428b6060830187614819565b916b54726164696e67526561647960a01b88828503948582850152600c81520152426040820152604033930190a280836040518781806142cf8c8b519283916147f6565b810187815203019020015460b01c1690836040518781806142f48c8b519283916147f6565b810187815203019020015460b81c16816143d5575b50156143b357837ffed1001c142a7ab386454a2f7d78b013ba7ff40595d10c128f2fb6463ccd7b7a949561437792846040518481895161434a8183896147f6565b81018581520301902001805460ff60a01b1916600160a01b179055604051865190948593829085906147f6565b8201908152030190200180546001600160a01b0319163317905560408051818152916143a591830190614819565b9242908201528033930390a2005b6040516348cddbdb60e11b815260048101859052806107e06024820186614819565b905086614309565b6040516348cddbdb60e11b815260048101869052806107e06024820187614819565b5080836040518781806144168c8b519283916147f6565b810187815203019020015460b81c16614251565b90501587614221565b604051632072bb0160e11b815260048101869052806107e06024820187614819565b346104c35760203660031901126104c35761446e61483e565b6001600160a01b038116908115610e3657614487614c6c565b61449081614b95565b610fce5761449d90614d67565b50600080516020615adb833981519152600052600a6020527f6123944ea9aa8fcd3876e0f59e0e450a46abe6fe31f4aed8033c2800f585cc6380546144e1906157db565b90557ff8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e975056020604051428152a2005b346104c35760403660031901126104c35761452861483e565b60243561453481615714565b331515806145e3575b806145b6575b61459e576001600160a01b039283169282918491167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4600090815260046020526040902080546001600160a01b0319169091179055005b60405163a9fbf51f60e01b8152336004820152602490fd5b5060018060a01b038116600052600560205260406000203360005260205260ff6040600020541615614543565b506001600160a01b03811633141561453d565b346104c35760203660031901126104c35761460f61483e565b6001600160a01b038116908115610e3657614628614c6c565b61463181614b6a565b610fce5761463e90614cea565b50600080516020615afb833981519152600052600a6020527f3c262eea85e30be6a8514764bbc3c57d2458a53d482ccec22849f39a3664cdd98054614682906157db565b90557f593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf5596020604051428152a2005b346104c35760203660031901126104c3576020612217600435615351565b346104c35760003660031901126104c357604051600080546146ef81614a24565b808452906001908181169081156119d957506001146147185761111d8461196c818603826148d6565b600080805292507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061475957505050810160200161196c8261195c565b80546020858701810191909152909301928101614741565b346104c35760203660031901126104c3576004359063ffffffff60e01b82168092036104c357602091637965db0b60e01b81149081156147b3575b5015158152f35b6380ac58cd60e01b8114915081156147e5575b81156147d4575b50836147ac565b6301ffc9a760e01b149050836147cd565b635b5e139f60e01b811491506147c6565b60005b8381106148095750506000910152565b81810151838201526020016147f9565b90602091614832815180928185528580860191016147f6565b601f01601f1916010190565b600435906001600160a01b03821682036104c357565b602435906001600160a01b03821682036104c357565b608081019081106001600160401b038211176125e657604052565b60a081019081106001600160401b038211176125e657604052565b604081019081106001600160401b038211176125e657604052565b602081019081106001600160401b038211176125e657604052565b90601f801991011681019081106001600160401b038211176125e657604052565b6001600160401b0381116125e657601f01601f191660200190565b92919261491e826148f7565b9161492c60405193846148d6565b8294818452818301116104c3578281602093846000960137010152565b9080601f830112156104c35781602061496493359101614912565b90565b60609060031901126104c3576001600160a01b039060043582811681036104c3579160243590811681036104c3579060443590565b9181601f840112156104c3578235916001600160401b0383116104c357602083818601950101116104c357565b9060406003198301126104c3576004356001600160a01b03811681036104c35791602435906001600160401b0382116104c35761496491600401614949565b8054821015613815576000526005602060002091020190600090565b90600182811c92168015614a54575b6020831014614a3e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691614a33565b9060009291805491614a6f83614a24565b918282526001938481169081600014614ad15750600114614a91575b50505050565b90919394506000526020928360002092846000945b838610614abd575050505001019038808080614a8b565b805485870183015294019385908201614aa6565b9294505050602093945060ff191683830152151560051b01019038808080614a8b565b9060406003198301126104c35760043591602435906001600160401b0382116104c357614b239160040161499c565b9091565b9060406003198301126104c3576001600160401b036004358181116104c35783614b5391600401614949565b926024359182116104c35761496491600401614949565b6001600160a01b03166000908152600080516020615a5b833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020615a9b833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020615abb833981519152602052604090205460ff1690565b6001600160a01b031660009081526000805160206159fb833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020615b7b833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020615a7b833981519152602052604090205460ff1690565b3360009081527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8602052604081205460ff1615614ca65750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b80600052600660205260406000203360005260205260ff6040600020541615614ca65750565b6001600160a01b03166000818152600080516020615a5b8339815191526020526040812054909190600080516020615afb8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b505090565b6001600160a01b03166000818152600080516020615a9b8339815191526020526040812054909190600080516020615adb8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b6001600160a01b03166000818152600080516020615abb8339815191526020526040812054909190600080516020615b1b8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b6001600160a01b031660008181526000805160206159fb8339815191526020526040812054909190600080516020615b3b8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b6001600160a01b03166000818152600080516020615b7b8339815191526020526040812054909190600080516020615a1b8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b6001600160a01b03166000818152600080516020615a7b8339815191526020526040812054909190600080516020615a3b8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b906000918083526006602052604083209160018060a01b03169182845260205260ff60408420541615600014614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b6001600160a01b03166000818152600080516020615a5b8339815191526020526040812054909190600080516020615afb8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b6001600160a01b03166000818152600080516020615b7b8339815191526020526040812054909190600080516020615a1b8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b6001600160a01b03166000818152600080516020615a9b8339815191526020526040812054909190600080516020615adb8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b6001600160a01b03166000818152600080516020615a7b8339815191526020526040812054909190600080516020615a3b8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b6001600160a01b031660008181526000805160206159fb8339815191526020526040812054909190600080516020615b3b8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b6001600160a01b03166000818152600080516020615abb8339815191526020526040812054909190600080516020615b1b8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b906000918083526006602052604083209160018060a01b03169182845260205260ff604084205416600014614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b61535a81615714565b506000908152600460205260409020546001600160a01b031690565b906001600160a01b03908116801561408557600091848352846020926002845260409383858720541695869133151580615470575b509060027fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928461543d575b85835260038152888320805460010190558683525286812080546001600160a01b0319168517905580a48316820361540f5750505050565b516364283d7b60e01b81526001600160a01b0392831660048201526024810193909352166044820152606490fd5b600087815260046020526040902080546001600160a01b03191690558483526003815288832080546000190190556153d7565b919394509150806154c5575b1561548c578792918691386153ab565b8488876154a9576024915190637e27328960e01b82526004820152fd5b604491519063177e802f60e01b82523360048301526024820152fd5b5033861480156154ea575b8061547c575087825260048152338486842054161461547c565b5085825260058152848220338352815260ff85832054166154d0565b615511838383615376565b813b61551d5750505050565b604051630a85bd0160e11b8082523360048301526001600160a01b0392831660248301526044820194909452608060648201526020959290911693909290839061556b906084830190614819565b039285816000958187895af1849181615614575b506155df575050503d6000146155d7573d615599816148f7565b906155a760405192836148d6565b81528091843d92013e5b805192836155d257604051633250574960e11b815260048101849052602490fd5b019050fd5b5060606155b1565b919450915063ffffffff60e01b16036155fc575038808080614a8b565b60249060405190633250574960e11b82526004820152fd5b9091508681813d8311615651575b61562c81836148d6565b8101031261564d57516001600160e01b03198116810361564d57903861557f565b8480fd5b503d615622565b6000828152600260205260408120546001600160a01b03908116939284917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91836156df575b1692836156c7575b84815260026020526040812080546001600160a01b0319168517905580a490565b838152600360205260408120600181540190556156a6565b600086815260046020526040902080546001600160a01b0319169055838552600360205260408520805460001901905561569e565b6000818152600260205260409020546001600160a01b0316908115615737575090565b60249060405190637e27328960e01b82526004820152fd5b81811061575a575050565b6000815560010161574f565b9190601f811161577557505050565b6157a1926000526020600020906020601f840160051c830193106157a3575b601f0160051c019061574f565b565b9091508190615794565b9392916157d6906157c8604093606088526060880190614819565b908682036020880152614819565b930152565b60001981146137ff5760010190565b80156137ff576000190190565b6001600160401b0381116125e65760051b60200190565b8051156138155760200190565b80518210156138155760209160051b010190565b908151811015613815570160200190565b60009060ff16600a81101561586c57603091500160ff81116137ff5760f81b6001600160f81b03191690565b60610160ff81116158ad5760ff6009199116019060ff8211615899575060f81b6001600160f81b03191690565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b82526011600452602482fd5b156158c857565b60405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606490fd5b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b1561592b57565b60405162461bcd60e51b81526020600482015260086024820152672737ba27bbb732b960c11b6044820152606490fd5b1561596257565b60405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606490fd5b61599b8154614a24565b90816159a5575050565b81601f600093116001146159b7575055565b9080839182526159d6601f60208420940160051c84016001850161574f565b555556fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0dca035b5fe9e485e185862b3d823a27c51239e882434fc92f4e9813290cdcda23ddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0eb11c4dffcd603b187030b5bf07e2a291164160a644644e9264774fce81d0e7f82185bb4be848e6312a435728ac1c9ae8846484253027baf02ec8ff1c18b0311bb37dc583cabdec48fe00fe8c624c62f51ef5512543d57db4979b66daa6ec34a242ea55e8d2c4ef0e59404c6dcfea3779f40e53603acb1ace99e5296fe40e3def8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90ea952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5a977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4df6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171bf3c994667eb080af4dc238df2ebbc27a8b635b22c13280cb411b8fdd8cb4f786a264697066735822122011f2fed4e19527c12490bdeda0784c7d71230273d6afd743646eb01a0c9484e664736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0df0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146147715750806306fdde03146146ce578063081812fc146146b05780630958fc2d146145f6578063095ea7b31461450f5780630dacad2e14614455578063126ee3381461412057806323b872dd14614109578063248a9ca3146140da57806329507f7314613f565780632e689c3f14613b025780632f2ff15d14613ac3578063309514df14613a485780633499c3a2146139f857806335ba6207146138f257806336568abe146138ab5780633a7adea5146129b85780633cd0b75f1461283a57806342842e0e14612812578063480d1dd3146127585780634e2a31091461265f5780634eabbe771461263657806353c8388e146124a857806354902c751461244c5780635aee1b15146122295780636352211e146121f95780636377741d1461213f5780636394f6e6146121165780636e1d616e146120ed57806370a082311461209457806370e22e421461204457806375a2b0d414611e7057806379451cd714611e475780637a01a1da14611e1e5780637ae9c16014611da35780637cde2b9914611caa578063826fe0f514611a9d5780638850845f14611a4d57806391d1485414611a0057806395d89b411461192157806399691194146118235780639b188dd6146117a8578063a217fddf1461178c578063a22cb465146116e7578063a917601b1461162d578063abaa536f146115dd578063ac851dfd14611512578063b6ba1ca7146114e6578063b88d4fde14611487578063b9c5b83314611362578063bd607f7c146112e9578063beae461514611299578063c1e0372814611183578063c395fcb314611121578063c87b56dd146110ca578063ca15c87314610fe0578063cc82b09014610f14578063d539139314610ed9578063d547741f14610e98578063de7ce39114610e48578063df422bf21461092c578063e3a3c52214610903578063e438fdf814610888578063e985e9c514610832578063f17f352314610625578063f5716a85146105aa578063fc1032eb146104c85763feee971a1461030b57600080fd5b346104c35760a03660031901126104c3576004356024356001600160401b0381116104c35761033e90369060040161499c565b505060443580151581036104c3576064359081151582036104c35760843580151581036104c3576104389261040d906001600160a01b038061037f88615714565b16903382149081156104af575b508015610489575b61039e9150615924565b85600052600c6020526103e1600260406000200194855460a01c906000146104815760ff166002175b855460ff60a01b191660a09190911b60ff60a01b16178555565b835460a01c90156104795760ff166004175b835460ff60a01b191660a09190911b60ff60a01b16178355565b815460a01c901561045f57815460ff60a01b191660ff9190911660081760a01b60ff60a01b16179055565b7f208509800c5cb9707f116ef96a1d456499ab9fa3c8edc1cdf381fe5216d5b173600080a2005b815460ff60a01b191660a09190911b60f760a01b16179055565b60fb166103f3565b60fd166103c7565b50600052600560205260406000203360005260205261039e60ff60406000205416610394565b3391506104bb89615351565b16143861038c565b600080fd5b346104c3576104d6366149c9565b6104de614c6c565b6104e782614bc0565b156105985761056f7f93e936184fad9f80c7000aa987f91be0cd621bacde11839fdc7139f3d9c2407b91600080516020615b1b83398151915280600052600660205261053a600160406000200154614cc4565b61054385615276565b50600052600a6020526040600020805480610586575b5050604051918291604083526040830190614819565b4260208301526001600160a01b03909416930390a2005b61058f906157ea565b90558480610559565b604051632ac1560560e21b8152600490fd5b346104c3576105b8366149c9565b6105c0614c6c565b6105c982614beb565b156105985761056f7f4614600adaea632b1e4c381ad24471dab7b587dca104c8dd4da76bc64f19716f91600080516020615b3b83398151915280600052600660205261061c600160406000200154614cc4565b61054385615200565b346104c35760803660031901126104c3576001600160401b036004358181116104c357610656903690600401614949565b9061065f614854565b906044358181116104c357610678903690600401614949565b906064359081116104c357610691903690600401614949565b90600080516020615a1b83398151915260005260209260068452604060002033600052845260ff604060002054161561081a576001600160a01b03168015610808578151156107f6578251156107e457604051600160ff600a8851938881818c01966106fe81838a6147f6565b81016008815203019020015460a01c161515146107be57936107af93926107a192600a610759847f55b00b3c29344a545244b18d70b135e423405427088bd5425f13d690b82310b4998b6040519384928392519283916147f6565b8101600881520301902001336bffffffffffffffffffffffff60a01b8254161790556107906040519860a08a5260a08a0190614819565b928801528682036040880152614819565b908482036060860152614819565b914260808201528033930390a2005b604051632072bb0160e11b815260048101869052806107e06024820189614819565b0390fd5b604051635dbef47560e01b8152600490fd5b6040516326813e6f60e01b8152600490fd5b60405163bea3fd2f60e01b8152600490fd5b604051630568555f60e41b8152336004820152602490fd5b346104c35760403660031901126104c35761084b61483e565b610853614854565b9060018060a01b03809116600052600560205260406000209116600052602052602060ff604060002054166040519015158152f35b346104c357610896366149c9565b61089e614c6c565b6108a782614c41565b156105985761056f7f352e14c53d161e2481e65145b53265d1608f979a93a06df66d4c99b2a84ddc6391600080516020615a3b8339815191528060005260066020526108fa600160406000200154614cc4565b6105438561518a565b346104c35760003660031901126104c3576020604051600080516020615a3b8339815191528152f35b346104c3576020806003193601126104c3576001600160a01b0361094e61483e565b168015610e365760009060008052600690818452604060002081600052845260ff908160406000205416610e2d575b600080516020615afb833981519152928360005280865260406000208260005286528260406000205416610e1d575b600080516020615b3b8339815191528060005281875260406000208360005287528360406000205416610e0d575b600080516020615a1b8339815191528060005282885260406000208460005288528460406000205416610dfd575b600080516020615b1b8339815191528060005283895260406000208560005289528560406000205416610ded575b600080516020615a3b8339815191529182600052848a526040600020866000528a528660406000205416610ddd575b600080516020615adb8339815191529384600052858b526040600020876000528b528760406000205416610dcd575b610a9d8a6157f7565b99610aab6040519b8c6148d6565b808b52610aba601f19916157f7565b018b8b60005b838110610dbc575050505060009860008052868c526040600020886000528c528860406000205416610d81575b600052858b526040600020876000528b528760406000205416610d44575b600052848a526040600020866000528a528660406000205416610d05575b60005283895260406000208560005289528560406000205416610cc2575b60005282885260406000208460005288528460406000205416610c83575b60005281875260406000208360005287528360406000205416610c42575b6000528552604060002090600052845260406000205416610bff575b506040519082820192808352815180945260408301938160408260051b8601019301916000955b828710610bd35785850386f35b909192938280610bef600193603f198a82030186528851614819565b9601920196019592919092610bc6565b610c3b90604051610c0f816148a0565b6005815264212aaca2a960d91b85820152610c2a828561581b565b52610c35818461581b565b506157db565b5082610b9f565b93610c7d90604051610c53816148a0565b600981526824a729a822a1aa27a960b91b89820152610c72828961581b565b52610c35818861581b565b93610b83565b94610cbc90604051610c94816148a0565b600781526620aaa224aa27a960c91b8a820152610cb1828a61581b565b52610c35818961581b565b94610b65565b95610cff90604051610cd3816148a0565b600b81526a2a2920a729a827a92a22a960a91b8b820152610cf4828b61581b565b52610c35818a61581b565b95610b47565b96610d3e90604051610d16816148a0565b60078152662922a324a722a960c91b8c820152610d33828c61581b565b52610c35818b61581b565b96610b29565b97610d7b90604051610d55816148a0565b600581526426a4a722a960d91b8d820152610d70828d61581b565b52610c35818c61581b565b97610b0b565b9850604051610d8f816148a0565b600581526420a226a4a760d91b8c820152610da98b61580e565b52610db38a61580e565b50600198610aed565b606083828194010152018c90610ac0565b98610dd7906157db565b98610a94565b97610de7906157db565b97610a65565b96610df7906157db565b96610a36565b95610e07906157db565b95610a08565b94610e17906157db565b946109da565b93610e27906157db565b936109ac565b6001935061097d565b60405163200db56f60e11b8152600490fd5b346104c35760203660031901126104c357610e6161483e565b6001600160a01b031660009081526000805160206159fb833981519152602090815260409182902054915160ff9092161515825290f35b346104c35760403660031901126104c357610ed7600435610eb7614854565b90806000526006602052610ed2600160406000200154614cc4565b6152ec565b005b346104c35760003660031901126104c35760206040517ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc98152f35b346104c35760203660031901126104c357610f2d61483e565b6001600160a01b038116908115610e3657610f46614c6c565b610f4f81614c41565b610fce57610f5c90614f47565b50600080516020615a3b833981519152600052600a6020527f2a9d1069eeb67f67cc187d821eca67b4b2564e0248958345303d890243b2b23f8054610fa0906157db565b90557f49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e0926020604051428152a2005b6040516314726de560e21b8152600490fd5b346104c35760203660031901126104c357600435600080516020615afb833981519152811480156110b3575b801561109c575b8015611085575b801561106e575b8015611057575b1561104557600052600a6020526020604060002054604051908152f35b604051636b9c461160e01b8152600490fd5b50600080516020615adb8339815191528114611028565b50600080516020615a3b8339815191528114611021565b50600080516020615b1b833981519152811461101a565b50600080516020615a1b8339815191528114611013565b50600080516020615b3b833981519152811461100c565b346104c35760203660031901126104c3576110e6600435615714565b5060006040516110f5816148bb565b5261111d604051611105816148bb565b60008152604051918291602083526020830190614819565b0390f35b346104c35760203660031901126104c35761113a61483e565b6001600160a01b031660009081527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8602090815260409182902054915160ff9092161515825290f35b346104c35760203660031901126104c3576004356000818152600c60205260409020600201546111bd906001600160a01b0316151561595b565b80600052600c6020526040600020906040516111d88161486a565b6040516111f0816111e98187614a5e565b03826148d6565b8152600260405193611210856112098160018501614a5e565b03866148d6565b8460208401520154600861126660018060a01b0383169283604086015260a01c9360ff85166060820152519561125860405197889788526101008060208a0152880190614819565b908682036040880152614819565b926001811615156060860152600281161515608086015260048116151560a086015216151560c084015260e08301520390f35b346104c35760203660031901126104c3576112b261483e565b6001600160a01b03166000908152600080516020615a9b833981519152602090815260409182902054915160ff9092161515825290f35b346104c35760203660031901126104c3576004356001600160401b0381116104c357602061131c8192369060040161499c565b9190826040519384928337600d90820190815203019020546000818152600c602052604090206002015461135a906001600160a01b0316151561595b565b604051908152f35b346104c35760003660031901126104c357600a60209081527f3c262eea85e30be6a8514764bbc3c57d2458a53d482ccec22849f39a3664cdd9547f701354baf5fc0042f9efd6d9f70560ee4ca4abc2c70e828283ca93ea6f67b33c547ff70d81a1e8770ae7ad501c118ed085c1337509b81d6ba7dc03b47c7cf1b034f0547f473e73b9f26a9fd92c793dcefb649a4d1c3311083b769d9ee0cb0b4281562409547f2a9d1069eeb67f67cc187d821eca67b4b2564e0248958345303d890243b2b23f54600080516020615adb8339815191526000527f6123944ea9aa8fcd3876e0f59e0e450a46abe6fe31f4aed8033c2800f585cc63546040805196875296860194909452948401919091526060830152608082019290925260a081019190915260c090f35b346104c35760803660031901126104c3576114a061483e565b6114a8614854565b606435916001600160401b0383116104c357366023840112156104c3576114dc610ed7933690602481600401359101614912565b9160443591615506565b346104c35760203660031901126104c357600435600052600a6020526020604060002054604051908152f35b346104c3576020806003193601126104c3576004356001600160401b0381116104c357611543903690600401614949565b8051156115ba576040516111e961157d8351928581818701956115678183896147f6565b8101600881520301902060405192838092614a5e565b838151910120908251902003611597575060405160018152f35b906107e06040519283926311bb0bc960e31b845260048401526024830190614819565b906107e060405192839263f855236d60e01b845260048401526024830190614819565b346104c35760203660031901126104c3576115f661483e565b6001600160a01b03166000908152600080516020615abb833981519152602090815260409182902054915160ff9092161515825290f35b346104c35760203660031901126104c35761164661483e565b6001600160a01b038116908115610e365761165f614c6c565b61166881614c16565b610fce5761167590614ecf565b50600080516020615a1b833981519152600052600a6020527ff70d81a1e8770ae7ad501c118ed085c1337509b81d6ba7dc03b47c7cf1b034f080546116b9906157db565b90557f964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a66020604051428152a2005b346104c35760403660031901126104c35761170061483e565b602435908115158092036104c3576001600160a01b031690811561177357336000526005602052604060002082600052602052604060002060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b604051630b61174360e31b815260048101839052602490fd5b346104c35760003660031901126104c357602060405160008152f35b346104c3576117b6366149c9565b6117be614c6c565b6117c782614b95565b156105985761056f7f69e94e373f69f3f945457a07b335722310788af9cd459a33df6f72cc9e96404391600080516020615adb83398151915280600052600660205261181a600160406000200154614cc4565b61054385615114565b346104c35761183136614b27565b336000908152600080516020615a7b833981519152602090815260409091205491929160ff161561081a57604051600160ff600a85519385818189019661187981838a6147f6565b81016008815203019020015460b81c161515146118fe5791600a6118cd6118f9937f3a9eebd240f4c9f631531ebc672c4c040de483b868ccebe8a3a1fdad70cde0d9956040518093819287519283916147f6565b8101600881520301902001600160b81b60ff60b81b1982541617905560405191829133954291846157ad565b0390a2005b506107e0604051928392636f5f944160e11b845260048401526024830190614819565b346104c35760003660031901126104c3576040516000600180549061194582614a24565b808552918181169081156119d95750600114611980575b61111d8461196c818603826148d6565b604051918291602083526020830190614819565b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106119c157505050810160200161196c8261195c565b805460208587018101919091529093019281016119a9565b60ff191660208087019190915292151560051b8501909201925061196c915083905061195c565b346104c35760403660031901126104c357611a19614854565b600435600052600660205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346104c35760203660031901126104c357611a6661483e565b6001600160a01b03166000908152600080516020615a7b833981519152602090815260409182902054915160ff9092161515825290f35b346104c3576020806003193601126104c3576004356001600160401b0381116104c357611ace903690600401614949565b604051906111e9611aec82519385818186019661156781838a6147f6565b8381519101208151908184201490811591611ca1575b50611c8f57611b1e9183916040519384928392519283916147f6565b8101600981520301902090815491611b35836157f7565b92611b4360405194856148d6565b8084528284018092600052836000206000915b838310611c0b5750505050604051918083019381845251809452604083019360408160051b85010192916000955b828710611b915785850386f35b909192938280600192603f19898203018552875190611be0611bce611bbe845160a0808652850190614819565b8585015184820387860152614819565b60408401518382036040850152614819565b916060868060a01b038183015116908301526080809101519101529601920196019592919092611b84565b600586600192604099989951611c2081614885565b604051611c31816111e9818a614a5e565b8152604051611c46816111e981898b01614a5e565b83820152604051611c5e816111e98160028b01614a5e565b6040820152848060a01b03600387015416606082015260048601546080820152815201920192019190959495611b56565b6040516329d7b10b60e11b8152600490fd5b90501584611b02565b346104c357611cb836614b27565b3360009081526000805160206159fb833981519152602090815260409091205491929160ff161561081a57604051600160ff600a855193858181890196611d0081838a6147f6565b81016008815203019020015460a81c16151514611d805791600a611d546118f9937fa214f45af6d86b0d5ff7bb48f888cf4205e4a383da35fcbebfdbd9bd8e6d5a7c956040518093819287519283916147f6565b8101600881520301902001600160a81b60ff60a81b1982541617905560405191829133954291846157ad565b506107e060405192839263701203b760e01b845260048401526024830190614819565b346104c357611db1366149c9565b611db9614c6c565b611dc282614c16565b156105985761056f7f71577b91708c73ee54b43c6709958ff42e4bcc084910648ce7c3d16928b51d5291600080516020615a1b833981519152806000526006602052611e15600160406000200154614cc4565b6105438561509e565b346104c35760003660031901126104c3576020604051600080516020615adb8339815191528152f35b346104c35760003660031901126104c3576020604051600080516020615b3b8339815191528152f35b346104c3576020806003193601126104c3576004356001600160401b0381116104c357611ea1903690600401614949565b906000805260068152604060002033600052815260ff604060002054161561081a576040516111e9611ee08451928481818801956115678183896147f6565b828151910120835190818320149081159161203b575b50611c8f5760ff600a60405184818751611f118183896147f6565b81016008815203019020015460b01c168061200f575b15611fec579060ff600a611fcd83604096958751606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e22611f6d606083018a614819565b916b54726164696e67526561647960a01b85828503948582850152600c81520152428b8201528a33930190a28484895184818b51611fac8183896147f6565b81016008815203019020015460b01c169688519384928392519283916147f6565b81016008815203019020015460b81c1683519215158352151590820152f35b506107e06040519283926348cddbdb60e11b845260048401526024830190614819565b5060ff600a604051848187516120268183896147f6565b81016008815203019020015460b81c16611f27565b90501584611ef6565b346104c35760203660031901126104c35761205d61483e565b6001600160a01b03166000908152600080516020615b7b833981519152602090815260409182902054915160ff9092161515825290f35b346104c35760203660031901126104c3576001600160a01b036120b561483e565b1680156120d45760005260036020526020604060002054604051908152f35b6040516322718ad960e21b815260006004820152602490fd5b346104c35760003660031901126104c3576020604051600080516020615b1b8339815191528152f35b346104c35760003660031901126104c3576020604051600080516020615afb8339815191528152f35b346104c35760203660031901126104c35761215861483e565b6001600160a01b038116908115610e3657612171614c6c565b61217a81614beb565b610fce5761218790614e57565b50600080516020615b3b833981519152600052600a6020527f701354baf5fc0042f9efd6d9f70560ee4ca4abc2c70e828283ca93ea6f67b33c80546121cb906157db565b90557f4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be7516020604051428152a2005b346104c35760203660031901126104c3576020612217600435615714565b6040516001600160a01b039091168152f35b346104c35760203660031901126104c3576004356001600160401b0381116104c357612259903690600401614949565b6040518181809351602081930191612270926147f6565b8101600881520360200190206040518061228a8184614a5e565b0361229590826148d6565b60405191826122a78160018401614a5e565b036122b290846148d6565b604051806122c38160028501614a5e565b036122ce90826148d6565b60405191826122e08160038401614a5e565b036122eb90846148d6565b600481015460058201546040519491856123088160068701614a5e565b0361231390876148d6565b60078401546040516001600160a01b039790939188169290918461233a8160088a01614a5e565b0361234590866148d6565b60405195866123578160098b01614a5e565b0361236290886148d6565b600a88015497600b0154986040519c8d9c8d610200908181520161238591614819565b8d810360208f015261239691614819565b8c810360408e01526123a791614819565b8b810360608d01526123b891614819565b9160808b015260a08a015288810360c08a01526123d491614819565b9060e08801528681036101008801526123ec91614819565b8581036101208701526123fe91614819565b9281166101408501528060a01c60ff1615156101608501528060a81c60ff1615156101808501528060b01c60ff1615156101a085015260b81c60ff1615156101c08401526101e08301520390f35b346104c35760203660031901126104c3576004356001600160401b0381116104c357612495602061248281933690600401614949565b81604051938285809451938492016147f6565b8101600d81520301902054604051908152f35b346104c3576124b636614af4565b6001600160a01b03806124c885615714565b1690338214908115612622575b5080156125fc575b6124e79150615924565b82600052602090600c825260019182604060002001936001600160401b0383116125e65761251f836125198754614a24565b87615766565b600091601f84116001146125805750928293918392600094612575575b50501b916000199060031b1c19161790555b7f9428dcbe773ffde983d366e27dc72d5f9be6e309154036dd48f60fbc0784be68600080a2005b01359250868061253c565b9183601f1981168760005284600020946000905b888383106125cc57505050106125b2575b505050811b01905561254e565b0135600019600384901b60f8161c191690558480806125a5565b868601358855909601959384019387935090810190612594565b634e487b7160e01b600052604160045260246000fd5b5060005260056020526040600020336000526020526124e760ff604060002054166124dd565b33915061262e86615351565b1614856124d5565b346104c35760003660031901126104c3576020604051600080516020615a1b8339815191528152f35b346104c35761266d36614b27565b336000908152600080516020615abb833981519152602090815260409091205491929160ff161561081a57604051600160ff600a8551938581818901966126b581838a6147f6565b81016008815203019020015460b01c161515146127355791600a6127096118f9937fa9de1934279a83f8cfaaecf6a7002ac10aeaea244c8c763f3752f3fc4c3e631d956040518093819287519283916147f6565b8101600881520301902001600160b01b60ff60b01b1982541617905560405191829133954291846157ad565b506107e060405192839263c817400d60e01b845260048401526024830190614819565b346104c35760203660031901126104c35761277161483e565b6001600160a01b038116908115610e365761278a614c6c565b61279381614bc0565b610fce576127a090614ddf565b50600080516020615b1b833981519152600052600a6020527f473e73b9f26a9fd92c793dcefb649a4d1c3311083b769d9ee0cb0b428156240980546127e4906157db565b90557f4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb36020604051428152a2005b346104c357610ed761282336614967565b9060405192612831846148bb565b60008452615506565b346104c35761284836614af4565b3360009081527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f860209081526040909120549093929061288a9060ff166158c1565b6000838152600c60205260409020600201546128b0906001600160a01b0316151561595b565b60008381526002855260408120546001600160a01b031680159185918315612985575b828252600288526040822080546001600160a01b03191690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a461296c57600c83947f09e41d39f5fbe80f71bc2f0a44e937a0ee3dff62dd07f191a8a461a339891a039460005252600060026040822061294f81615991565b61295b60018201615991565b01556118f9604051928392836158fc565b604051637e27328960e01b815260048101849052602490fd5b600083815260046020526040902080546001600160a01b03191690558082526003885260408220821981540190556128d3565b346104c35760c03660031901126104c3576004356001600160401b0381116104c3576129e8903690600401614949565b6024356001600160401b0381116104c357612a07903690600401614949565b906064356001600160401b0381116104c357612a27903690600401614949565b9060a4356001600160401b0381116104c357612a47903690600401614949565b336000908152600080516020615a5b833981519152602052604090205490929060ff161561081a57815115613899578051156107f657835115613887576044351561387557608435158015613869575b613857576050608435111561383d5782511561382b57600754612ab9816157db565b600755604051612b0160748260208101946020612adc8b888151938492016147f6565b8201903360601b602083015242603483015260548201520360548101845201826148d6565b5190209260405193612b12856148a0565b600a8552602036818701378451156138155760306020860153845160011015613815576078602186015360005b60048110613782575050612b94602160405180968851612b66816020850160208d016147f6565b8201602d60f81b6020820152612b8582518093602087850191016147f6565b010360018101875201856148d6565b60405190816102008101106001600160401b03610200840111176125e6576102008201604052848252836020830152826040830152856060830152604435608083015260843560a083015260c08201523360e0820152604051612bf6816148a0565b600381526252617760e81b6020820152610100820152604051612c18816148a0565b600d81526c26b4b734b7339021b2b73a32b960991b6020820152610120820152336101408201526000610160820152600061018082015260006101a082015260006101c0820152426101e08201526040516020818651612c7b8183858b016147f6565b810160088152030190209080518051906001600160401b0382116125e6578190612ca9826125198754614a24565b602090601f83116001146137165760009261370b575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b0382116125e6578190612d0682612cfd6001880154614a24565b60018801615766565b602090601f83116001146136995760009261368e575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b0382116125e6578190612d6682612d5d6002880154614a24565b60028801615766565b602090601f831160011461361c57600092613611575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b0382116125e6578190612dc682612dbd6003880154614a24565b60038801615766565b602090601f831160011461359f57600092613594575b50508160011b916000199060031b1c19161760038301555b6080810151600483015560a0810151600583015560c08101518051906001600160401b0382116125e6578190612e3a82612e316006880154614a24565b60068801615766565b602090601f831160011461352257600092613517575b50508160011b916000199060031b1c19161760068301555b60e08101516007830180546001600160a01b0319166001600160a01b03929092169190911790556101008101518051906001600160401b0382116125e6578190612ec282612eb96008880154614a24565b60088801615766565b602090601f83116001146134a55760009261349a575b50508160011b916000199060031b1c19161760088301555b6101208101518051906001600160401b0382116125e657612f2182612f186009870154614a24565b60098701615766565b602090601f8311600114613424579180600b94926101e094600092613419575b50508160011b916000199060031b1c19161760098501555b600a840160018060a01b036101408301511681549060ff60a01b610160850151151560a01b1660ff60a81b610180860151151560a81b169060ff60b01b6101a0870151151560b01b169260ff60b81b6101c0880151151560b81b16946001600160401b0360c01b161717171717905501519101556040516020818551612fe28183858a016147f6565b81016009815203019020936040519467027b934b3b4b71d160c51b602087015261302a602887855161301a8184840160208a016147f6565b81010360088101895201876148d6565b6040519561303787614885565b858752604051613046816148a0565b600a815269149959da5cdd195c995960b21b6020820152602088015260408701523360608701524260808701528054680100000000000000008110156125e65761309591600182018155614a08565b6134035785518051906001600160401b0382116125e65781906130c2826130bc8654614a24565b86615766565b602090601f83116001146133975760009261338c575b50508160011b916000199060031b1c19161781555b60208601518051906001600160401b0382116125e657819061311f826131166001870154614a24565b60018701615766565b602090601f831160011461331a5760009261330f575b50508160011b916000199060031b1c19161760018201555b60408601519586516001600160401b0381116125e65761317d816131746002860154614a24565b60028601615766565b6020601f821160011461326e5792600460806107a1948461323298957f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939a9861111d9e600092613263575b50508160011b916000199060031b1c19161760028501555b6003840160018060a01b036060830151166bffffffffffffffffffffffff60a01b82541617905501519101556112586040519660e0885261322460e089018a614819565b9088820360208a0152614819565b91604435608082015260843560a08201524260c08201528033930390a2604051918291602083526020830190614819565b015190508e806131c8565b6002840160005260206000209860005b601f19841681106132f7575060806107a19460018561111d9d7f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939b99966004966132329c99601f198116106132de575b505050811b0160028501556131e0565b015160001960f88460031b161c191690558e80806132ce565b828201518b556001909a01996020928301920161327e565b015190508880613135565b9250600184016000526020600020906000935b601f1984168510613371576001945083601f19811610613358575b505050811b01600182015561314d565b015160001960f88460031b161c19169055888080613348565b8181015183556020948501946001909301929091019061332d565b0151905088806130d8565b9250836000526020600020906000935b601f19841685106133e8576001945083601f198116106133cf575b505050811b0181556130ed565b015160001960f88460031b161c191690558880806133c2565b818101518355602094850194600190930192909101906133a7565b634e487b7160e01b600052600060045260246000fd5b015190508a80612f41565b906009850160005260206000209160005b601f1985168110613482575092600b94926001926101e09583601f19811610613469575b505050811b016009850155612f59565b015160001960f88460031b161c191690558a8080613459565b91926020600181928685015181550194019201613435565b015190508880612ed8565b9250600885016000526020600020906000935b601f19841685106134fc576001945083601f198116106134e3575b505050811b016008830155612ef0565b015160001960f88460031b161c191690558880806134d3565b818101518355602094850194600190930192909101906134b8565b015190508880612e50565b9250600685016000526020600020906000935b601f1984168510613579576001945083601f19811610613560575b505050811b016006830155612e68565b015160001960f88460031b161c19169055888080613550565b81810151835560209485019460019093019290910190613535565b015190508880612ddc565b9250600385016000526020600020906000935b601f19841685106135f6576001945083601f198116106135dd575b505050811b016003830155612df4565b015160001960f88460031b161c191690558880806135cd565b818101518355602094850194600190930192909101906135b2565b015190508880612d7c565b9250600285016000526020600020906000935b601f1984168510613673576001945083601f1981161061365a575b505050811b016002830155612d94565b015160001960f88460031b161c1916905588808061364a565b8181015183556020948501946001909301929091019061362f565b015190508880612d1c565b9250600185016000526020600020906000935b601f19841685106136f0576001945083601f198116106136d7575b505050811b016001830155612d34565b015160001960f88460031b161c191690558880806136c7565b818101518355602094850194600190930192909101906136ac565b015190508880612cbf565b9250846000526020600020906000935b601f1984168510613767576001945083601f1981161061374e575b505050811b018255612cd4565b015160001960f88460031b161c19169055888080613741565b81810151835560209485019460019093019290910190613726565b60208110156138155781811a90600f61379f818460041c16615840565b908260011b9360028486048114851517156137ff578581018091116137ff576137cf6137d69460001a918c61582f565b5316615840565b9160039081018091116137ff576137f46137fa9360001a918961582f565b536157db565b612b3f565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60405163bfccc8e960e01b8152600490fd5b60405163d05db01960e01b81526084356004820152602490fd5b604051633abe7db760e21b8152600490fd5b50606460843511612a97565b60405163fd83f8d960e01b8152600490fd5b60405163a765e58f60e01b8152600490fd5b604051630ac6e45360e31b8152600490fd5b346104c35760403660031901126104c3576138c4614854565b336001600160a01b038216036138e057610ed7906004356152ec565b60405163334bd91960e11b8152600490fd5b346104c35760403660031901126104c3576004356001600160401b0381116104c357613922903690600401614949565b61393e60206024359281604051938285809451938492016147f6565b8101600981520301902080548210156104c3576139cd9161395e91614a08565b5060405190613978826139718184614a5e565b03836148d6565b60405161398c816111e98160018601614a5e565b6139e96040516139a3816111e98160028801614a5e565b6139db600460018060a01b036003870154169501549360405197889760a0895260a0890190614819565b908782036020890152614819565b908582036040870152614819565b91606084015260808301520390f35b346104c35760203660031901126104c357613a1161483e565b6001600160a01b03166000908152600080516020615a5b833981519152602090815260409182902054915160ff9092161515825290f35b346104c357613a56366149c9565b613a5e614c6c565b613a6782614b6a565b156105985761056f7f125f88db22967983b401f70f6804d47f43cb545fcb725d0b335fe7d43d9b4a4a91600080516020615afb833981519152806000526006602052613aba600160406000200154614cc4565b61054385615028565b346104c35760403660031901126104c357610ed7600435613ae2614854565b90806000526006602052613afd600160406000200154614cc4565b614fbf565b346104c35760603660031901126104c357613b1b61483e565b6024906001600160401b0382358181116104c357613b3d90369060040161499c565b906044358381116104c357613b5690369060040161499c565b3360009081527f8b6c17971091f14c72dc9926ac25eeb209486d91b49eb570e570d5ecdb8327a7602052604090205491949091613b959060ff166158c1565b600b5494613ba2866157db565b600b556000868152600c60205260409020600201546001600160a01b0316613f295760405185858237602081878101600d81520301902054613ef7576001600160a01b038716968715613edf576001600160a01b0390613c03908890615658565b16613ec757613c2d9060405193613c198561486a565b613c24368888614912565b85523691614912565b6020830190815233604084015260608301916001835286600052600c6020526040600020918451805190838211613eb2578190613c7482613c6e8854614a24565b88615766565b602090601f8311600114613e4c57600092613e41575b50508160011b916000199060031b1c19161783555b51988951918211613e2d5750613cc581613cbc6001850154614a24565b60018501615766565b6020601f8211600114613d915760ff9282613d5b9695936002937fc1177815a22ab58cdf6e40a80dfe322e9d00b7977bd78634869752fed8082f569b9c9d600092613d86575b50508160011b916000199060031b1c19161760018201555b6040909401519301805491516001600160a81b03199092166001600160a01b039490941693909317911660a01b60ff60a01b16179055565b8360405183838237602081858101600d81520301902055613d81604051928392836158fc565b0390a3005b015190508d80613d0b565b6001830160005260206000209960005b601f1984168110613e155750926001837fc1177815a22ab58cdf6e40a80dfe322e9d00b7977bd78634869752fed8082f569a9b9c60029460ff97613d5b9a9997601f19811610613dfc575b505050811b016001820155613d23565b015160001960f88460031b161c191690558d8080613dec565b828201518c556001909b019a60209283019201613da1565b634e487b7160e01b60009081526041600452fd5b015190508c80613c8a565b6000878152602081209350601f198516905b818110613e9a5750908460019594939210613e81575b505050811b018355613c9f565b015160001960f88460031b161c191690558c8080613e74565b92936020600181928786015181550195019301613e5e565b8b634e487b7160e01b60005260416004526000fd5b6040516339e3563760e11b8152600060048201528890fd5b604051633250574960e11b8152600060048201528990fd5b60405162461bcd60e51b815260206004820152600b818a01526a135a5b995c985b155cd95960aa1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526006818a01526545786973747360d01b6044820152606490fd5b346104c35760403660031901126104c357600435613f72614854565b336000908152600080516020615a9b8339815191526020526040902054909190613f9e9060ff166158c1565b613fa781615714565b6001600160a01b03818116919033831480156140c7575b801561409e575b613fce90615924565b8085169485156140855784613fe291615658565b9081168061400357604051637e27328960e01b815260048101869052602490fd5b92809493036140555750506000818152600c6020526040812060020180546001600160a01b031916851790557f0ea8df787dde63a7bdc34d17097adf25749a3521f660e92dabdff8d6ee91d18a9080a4005b6040516364283d7b60e01b81526001600160a01b0392831660048201526024810193909352166044820152606490fd5b604051633250574960e11b815260006004820152602490fd5b50826000526005602052604060002033600052602052613fce60ff604060002054169050613fc5565b5033816140d386615351565b1614613fbe565b346104c35760203660031901126104c35760043560005260066020526020600160406000200154604051908152f35b346104c357610ed761411a36614967565b91615376565b346104c3576020806003193601126104c3576004356001600160401b0381116104c357614151903690600401614949565b90600080516020615adb83398151915260005260068152604060002033600052815260ff9182604060002054161561081a57604051815193838301946141988184886147f6565b8201906001816008938481528588600a97889303019020015460a01c16151514614433576000805260068552604060002033600052855280604060002054161561081a576111e961420b6040518781806141f68c8b519283916147f6565b81018781520301902060405192838092614a5e565b858151910120845190818820149081159161442a575b50611c8f57808360405187818061423c8c8b519283916147f6565b810187815203019020015460b01c16806143ff575b156143dd57604051606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e2261428b6060830187614819565b916b54726164696e67526561647960a01b88828503948582850152600c81520152426040820152604033930190a280836040518781806142cf8c8b519283916147f6565b810187815203019020015460b01c1690836040518781806142f48c8b519283916147f6565b810187815203019020015460b81c16816143d5575b50156143b357837ffed1001c142a7ab386454a2f7d78b013ba7ff40595d10c128f2fb6463ccd7b7a949561437792846040518481895161434a8183896147f6565b81018581520301902001805460ff60a01b1916600160a01b179055604051865190948593829085906147f6565b8201908152030190200180546001600160a01b0319163317905560408051818152916143a591830190614819565b9242908201528033930390a2005b6040516348cddbdb60e11b815260048101859052806107e06024820186614819565b905086614309565b6040516348cddbdb60e11b815260048101869052806107e06024820187614819565b5080836040518781806144168c8b519283916147f6565b810187815203019020015460b81c16614251565b90501587614221565b604051632072bb0160e11b815260048101869052806107e06024820187614819565b346104c35760203660031901126104c35761446e61483e565b6001600160a01b038116908115610e3657614487614c6c565b61449081614b95565b610fce5761449d90614d67565b50600080516020615adb833981519152600052600a6020527f6123944ea9aa8fcd3876e0f59e0e450a46abe6fe31f4aed8033c2800f585cc6380546144e1906157db565b90557ff8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e975056020604051428152a2005b346104c35760403660031901126104c35761452861483e565b60243561453481615714565b331515806145e3575b806145b6575b61459e576001600160a01b039283169282918491167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4600090815260046020526040902080546001600160a01b0319169091179055005b60405163a9fbf51f60e01b8152336004820152602490fd5b5060018060a01b038116600052600560205260406000203360005260205260ff6040600020541615614543565b506001600160a01b03811633141561453d565b346104c35760203660031901126104c35761460f61483e565b6001600160a01b038116908115610e3657614628614c6c565b61463181614b6a565b610fce5761463e90614cea565b50600080516020615afb833981519152600052600a6020527f3c262eea85e30be6a8514764bbc3c57d2458a53d482ccec22849f39a3664cdd98054614682906157db565b90557f593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf5596020604051428152a2005b346104c35760203660031901126104c3576020612217600435615351565b346104c35760003660031901126104c357604051600080546146ef81614a24565b808452906001908181169081156119d957506001146147185761111d8461196c818603826148d6565b600080805292507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061475957505050810160200161196c8261195c565b80546020858701810191909152909301928101614741565b346104c35760203660031901126104c3576004359063ffffffff60e01b82168092036104c357602091637965db0b60e01b81149081156147b3575b5015158152f35b6380ac58cd60e01b8114915081156147e5575b81156147d4575b50836147ac565b6301ffc9a760e01b149050836147cd565b635b5e139f60e01b811491506147c6565b60005b8381106148095750506000910152565b81810151838201526020016147f9565b90602091614832815180928185528580860191016147f6565b601f01601f1916010190565b600435906001600160a01b03821682036104c357565b602435906001600160a01b03821682036104c357565b608081019081106001600160401b038211176125e657604052565b60a081019081106001600160401b038211176125e657604052565b604081019081106001600160401b038211176125e657604052565b602081019081106001600160401b038211176125e657604052565b90601f801991011681019081106001600160401b038211176125e657604052565b6001600160401b0381116125e657601f01601f191660200190565b92919261491e826148f7565b9161492c60405193846148d6565b8294818452818301116104c3578281602093846000960137010152565b9080601f830112156104c35781602061496493359101614912565b90565b60609060031901126104c3576001600160a01b039060043582811681036104c3579160243590811681036104c3579060443590565b9181601f840112156104c3578235916001600160401b0383116104c357602083818601950101116104c357565b9060406003198301126104c3576004356001600160a01b03811681036104c35791602435906001600160401b0382116104c35761496491600401614949565b8054821015613815576000526005602060002091020190600090565b90600182811c92168015614a54575b6020831014614a3e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691614a33565b9060009291805491614a6f83614a24565b918282526001938481169081600014614ad15750600114614a91575b50505050565b90919394506000526020928360002092846000945b838610614abd575050505001019038808080614a8b565b805485870183015294019385908201614aa6565b9294505050602093945060ff191683830152151560051b01019038808080614a8b565b9060406003198301126104c35760043591602435906001600160401b0382116104c357614b239160040161499c565b9091565b9060406003198301126104c3576001600160401b036004358181116104c35783614b5391600401614949565b926024359182116104c35761496491600401614949565b6001600160a01b03166000908152600080516020615a5b833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020615a9b833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020615abb833981519152602052604090205460ff1690565b6001600160a01b031660009081526000805160206159fb833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020615b7b833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020615a7b833981519152602052604090205460ff1690565b3360009081527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8602052604081205460ff1615614ca65750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b80600052600660205260406000203360005260205260ff6040600020541615614ca65750565b6001600160a01b03166000818152600080516020615a5b8339815191526020526040812054909190600080516020615afb8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b505090565b6001600160a01b03166000818152600080516020615a9b8339815191526020526040812054909190600080516020615adb8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b6001600160a01b03166000818152600080516020615abb8339815191526020526040812054909190600080516020615b1b8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b6001600160a01b031660008181526000805160206159fb8339815191526020526040812054909190600080516020615b3b8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b6001600160a01b03166000818152600080516020615b7b8339815191526020526040812054909190600080516020615a1b8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b6001600160a01b03166000818152600080516020615a7b8339815191526020526040812054909190600080516020615a3b8339815191529060ff16614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b906000918083526006602052604083209160018060a01b03169182845260205260ff60408420541615600014614d625780835260066020526040832082845260205260408320600160ff198254161790556000805160206159db833981519152339380a4600190565b6001600160a01b03166000818152600080516020615a5b8339815191526020526040812054909190600080516020615afb8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b6001600160a01b03166000818152600080516020615b7b8339815191526020526040812054909190600080516020615a1b8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b6001600160a01b03166000818152600080516020615a9b8339815191526020526040812054909190600080516020615adb8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b6001600160a01b03166000818152600080516020615a7b8339815191526020526040812054909190600080516020615a3b8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b6001600160a01b031660008181526000805160206159fb8339815191526020526040812054909190600080516020615b3b8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b6001600160a01b03166000818152600080516020615abb8339815191526020526040812054909190600080516020615b1b8339815191529060ff1615614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b906000918083526006602052604083209160018060a01b03169182845260205260ff604084205416600014614d62578083526006602052604083208284526020526040832060ff198154169055600080516020615b5b833981519152339380a4600190565b61535a81615714565b506000908152600460205260409020546001600160a01b031690565b906001600160a01b03908116801561408557600091848352846020926002845260409383858720541695869133151580615470575b509060027fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928461543d575b85835260038152888320805460010190558683525286812080546001600160a01b0319168517905580a48316820361540f5750505050565b516364283d7b60e01b81526001600160a01b0392831660048201526024810193909352166044820152606490fd5b600087815260046020526040902080546001600160a01b03191690558483526003815288832080546000190190556153d7565b919394509150806154c5575b1561548c578792918691386153ab565b8488876154a9576024915190637e27328960e01b82526004820152fd5b604491519063177e802f60e01b82523360048301526024820152fd5b5033861480156154ea575b8061547c575087825260048152338486842054161461547c565b5085825260058152848220338352815260ff85832054166154d0565b615511838383615376565b813b61551d5750505050565b604051630a85bd0160e11b8082523360048301526001600160a01b0392831660248301526044820194909452608060648201526020959290911693909290839061556b906084830190614819565b039285816000958187895af1849181615614575b506155df575050503d6000146155d7573d615599816148f7565b906155a760405192836148d6565b81528091843d92013e5b805192836155d257604051633250574960e11b815260048101849052602490fd5b019050fd5b5060606155b1565b919450915063ffffffff60e01b16036155fc575038808080614a8b565b60249060405190633250574960e11b82526004820152fd5b9091508681813d8311615651575b61562c81836148d6565b8101031261564d57516001600160e01b03198116810361564d57903861557f565b8480fd5b503d615622565b6000828152600260205260408120546001600160a01b03908116939284917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91836156df575b1692836156c7575b84815260026020526040812080546001600160a01b0319168517905580a490565b838152600360205260408120600181540190556156a6565b600086815260046020526040902080546001600160a01b0319169055838552600360205260408520805460001901905561569e565b6000818152600260205260409020546001600160a01b0316908115615737575090565b60249060405190637e27328960e01b82526004820152fd5b81811061575a575050565b6000815560010161574f565b9190601f811161577557505050565b6157a1926000526020600020906020601f840160051c830193106157a3575b601f0160051c019061574f565b565b9091508190615794565b9392916157d6906157c8604093606088526060880190614819565b908682036020880152614819565b930152565b60001981146137ff5760010190565b80156137ff576000190190565b6001600160401b0381116125e65760051b60200190565b8051156138155760200190565b80518210156138155760209160051b010190565b908151811015613815570160200190565b60009060ff16600a81101561586c57603091500160ff81116137ff5760f81b6001600160f81b03191690565b60610160ff81116158ad5760ff6009199116019060ff8211615899575060f81b6001600160f81b03191690565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b82526011600452602482fd5b156158c857565b60405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606490fd5b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b1561592b57565b60405162461bcd60e51b81526020600482015260086024820152672737ba27bbb732b960c11b6044820152606490fd5b1561596257565b60405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606490fd5b61599b8154614a24565b90816159a5575050565b81601f600093116001146159b7575055565b9080839182526159d6601f60208420940160051c84016001850161574f565b555556fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0dca035b5fe9e485e185862b3d823a27c51239e882434fc92f4e9813290cdcda23ddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0eb11c4dffcd603b187030b5bf07e2a291164160a644644e9264774fce81d0e7f82185bb4be848e6312a435728ac1c9ae8846484253027baf02ec8ff1c18b0311bb37dc583cabdec48fe00fe8c624c62f51ef5512543d57db4979b66daa6ec34a242ea55e8d2c4ef0e59404c6dcfea3779f40e53603acb1ace99e5296fe40e3def8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90ea952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5a977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4df6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171bf3c994667eb080af4dc238df2ebbc27a8b635b22c13280cb411b8fdd8cb4f786a264697066735822122011f2fed4e19527c12490bdeda0784c7d71230273d6afd743646eb01a0c9484e664736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "_auditMineral(string,string)": {
        "details": "only the auditor can audit mineralDetails.Logs audit report on every successful audit.",
        "params": {
          "mineralId": "The ID of the mineral under audition.",
          "report": "The audit status report of the mineral under audition."
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "checkAuditAndInspectionStatus(string)": {
        "details": "checks audit and inspection status",
        "params": {
          "mineralId": "The ID of the mineral to check for audit and inspection status Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId"
        }
      },
      "getAllRoleCounts()": {
        "details": "Returns all role counts in a single call",
        "returns": {
          "auditorCount": "Number of auditors",
          "buyerCount": "Number of buyers",
          "inspectorCount": "Number of inspectors",
          "minerCount": "Number of miners",
          "refinerCount": "Number of refiners",
          "transporterCount": "Number of transporters"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have a specific role",
        "params": {
          "role": "The role to query member count for"
        },
        "returns": {
          "count": "The number of accounts with the role"
        }
      },
      "getRolesForAddress(address)": {
        "details": "Returns all roles assigned to a given address",
        "params": {
          "account": "The address to check roles for"
        },
        "returns": {
          "roles": "An array of role names the address has"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasMinerRole(address)": {
        "details": "Roles helper functionschecks if an account has a specific role",
        "params": {
          "account": "The address of the account to checked with role association"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "inspectMineral(string,string)": {
        "details": "only the inspector can inspect mineralDetailsLogs audit report on every successful inspection",
        "params": {
          "mineralId": "The ID of the mineral under inspection",
          "report": "The inspection status report of the mineral under inspection"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isMineralRegistered(string)": {
        "details": "checks if a mineral with the given ID is registered",
        "params": {
          "mineralId": "the ID of the mineral to check"
        },
        "returns": {
          "_0": "A boolean indicating whether the mineral is registered or not"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "purchaseMineral(string)": {
        "details": "Only the buyer can purchase mineralDetails",
        "params": {
          "mineralId": "The ID of the mineral under purchase"
        }
      },
      "refineMineral(string,string)": {
        "details": "only the refiner can refiner a mineral",
        "params": {
          "mineralId": "The ID of the mineral under refinery"
        }
      },
      "registerMineral(string,string,uint256,string,uint256,string)": {
        "details": "Register a new mineral - only by miner.Every mineral is assigned a unique mineralId.",
        "params": {
          "_mineralType": "The type of a mineral.",
          "_name": "Mineral name.",
          "_origin": "Mineral Origin.",
          "_purityPercentage": "Mineral purity in percentage.",
          "_storageConditions": "Mineral Storage conditions.",
          "_weight": "Mineral weight in uint256."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferMineral(string,address,string,string)": {
        "details": "only the transporter can transport mineralDetails",
        "params": {
          "_destination": "The Destination area of the mineral(string)",
          "_origin": "The Original location of the mineral under transportation",
          "_receivingParty": "The address of the destination portal",
          "mineralId": "The ID of the mineral under transportation"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_auditMineral(string,string)": {
        "notice": "Emits MineralAudited event."
      },
      "inspectMineral(string,string)": {
        "notice": "Emits MineralInspected event on successful inspection"
      },
      "purchaseMineral(string)": {
        "notice": "Emits MineralPurchased event on successful purchase"
      },
      "refineMineral(string,string)": {
        "notice": "Emits MineralRefined event on successfl refining process"
      },
      "registerMineral(string,string,uint256,string,uint256,string)": {
        "notice": "Emits MineralRegistered event on successful registration."
      },
      "transferMineral(string,address,string,string)": {
        "notice": "Emits MineralTransported on successful transportation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 626,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 628,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 632,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 636,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 640,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 646,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 26,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 3707,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "nonce",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3712,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "mineralDetails",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_struct(MineralDetails)3689_storage)"
      },
      {
        "astId": 3718,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "mineralHistories",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(MineralHistory)3700_storage)dyn_storage)"
      },
      {
        "astId": 3722,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "roleMemberCount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 8584,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 8589,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "_tokens",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(MineralToken)8581_storage)"
      },
      {
        "astId": 8593,
        "contract": "contracts/tokens/Tokenization.sol:Tokenization",
        "label": "mineralToToken",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MineralHistory)3700_storage)dyn_storage": {
        "base": "t_struct(MineralHistory)3700_storage",
        "encoding": "dynamic_array",
        "label": "struct RolesManager.MineralHistory[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(MineralHistory)3700_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RolesManager.MineralHistory[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(MineralHistory)3700_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MineralDetails)3689_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RolesManager.MineralDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(MineralDetails)3689_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(MineralToken)8581_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Tokenization.MineralToken)",
        "numberOfBytes": "32",
        "value": "t_struct(MineralToken)8581_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MineralDetails)3689_storage": {
        "encoding": "inplace",
        "label": "struct RolesManager.MineralDetails",
        "members": [
          {
            "astId": 3658,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3660,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3662,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "origin",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3664,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "mineralType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3666,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "weight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3668,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "purityPercentage",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3670,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "storageConditions",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3672,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "registeredBy",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3674,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "currentStatus",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 3676,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "currentLocation",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 3678,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "currentHandler",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 3680,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "isPurchased",
            "offset": 20,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3682,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "isRefined",
            "offset": 21,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3684,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "isAudited",
            "offset": 22,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3686,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "isInspected",
            "offset": 23,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3688,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "timestamp",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(MineralHistory)3700_storage": {
        "encoding": "inplace",
        "label": "struct RolesManager.MineralHistory",
        "members": [
          {
            "astId": 3691,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3693,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "fieldChanged",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3695,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "newValue",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3697,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "updatedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3699,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(MineralToken)8581_storage": {
        "encoding": "inplace",
        "label": "struct Tokenization.MineralToken",
        "members": [
          {
            "astId": 8574,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "mineralId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8576,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "details",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 8578,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8580,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "flags",
            "offset": 20,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/tokens/Tokenization.sol:Tokenization",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}