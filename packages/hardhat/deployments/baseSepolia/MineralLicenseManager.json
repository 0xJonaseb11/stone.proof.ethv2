{
  "address": "0x0bf6822791cFc0DA01993D2D7783b9D435604e48",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reviewer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum MineralLicenseManager.ApplicationStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "ApplicationReviewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum MineralLicenseManager.LicenseType",
          "name": "licenseType",
          "type": "uint8"
        }
      ],
      "name": "ApplicationSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BondForfeited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BondPosted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BondReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "passed",
          "type": "bool"
        }
      ],
      "name": "ComplianceInspection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryDate",
          "type": "uint256"
        }
      ],
      "name": "LicenseApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExpiryDate",
          "type": "uint256"
        }
      ],
      "name": "LicenseRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "LicenseRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "LicenseSuspended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMPLIANCE_OFFICER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LICENSE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeLicensesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_passed",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_findingsIPFS",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_nextInspectionDue",
          "type": "uint64"
        }
      ],
      "name": "addComplianceInspection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "applicantApplications",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "applicationData",
      "outputs": [
        {
          "internalType": "string",
          "name": "companyDetailsIPFS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "projectDetailsIPFS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "environmentalImpactIPFS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "financialCapabilityIPFS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "geographicArea",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rejectionReason",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "applications",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "applicationId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        },
        {
          "internalType": "enum MineralLicenseManager.LicenseType",
          "name": "licenseType",
          "type": "uint8"
        },
        {
          "internalType": "enum MineralLicenseManager.ApplicationStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "submissionDate",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "reviewDate",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "approvalDate",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "expiryDate",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "reviewingOfficer",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "annualProductionLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondAmount",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "requiresEnvironmentalBond",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "bondPosted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_applicant",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_banned",
          "type": "bool"
        }
      ],
      "name": "banApplicant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bannedApplicants",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_applicationIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum MineralLicenseManager.ApplicationStatus[]",
          "name": "_statuses",
          "type": "uint8[]"
        }
      ],
      "name": "batchUpdateStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "complianceRecords",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "inspectionDate",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "nextInspectionDue",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "passed",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "findingsIPFS",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        }
      ],
      "name": "emergencyPauseApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_applicant",
          "type": "address"
        }
      ],
      "name": "getApplicantApplications",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        }
      ],
      "name": "getApplication",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "applicationId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "applicant",
              "type": "address"
            },
            {
              "internalType": "enum MineralLicenseManager.LicenseType",
              "name": "licenseType",
              "type": "uint8"
            },
            {
              "internalType": "enum MineralLicenseManager.ApplicationStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "submissionDate",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "reviewDate",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "approvalDate",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expiryDate",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "reviewingOfficer",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "annualProductionLimit",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "bondAmount",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "requiresEnvironmentalBond",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "bondPosted",
              "type": "bool"
            }
          ],
          "internalType": "struct MineralLicenseManager.LicenseApplication",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "companyDetailsIPFS",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectDetailsIPFS",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "environmentalImpactIPFS",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "financialCapabilityIPFS",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "geographicArea",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rejectionReason",
              "type": "string"
            }
          ],
          "internalType": "struct MineralLicenseManager.ApplicationData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MineralLicenseManager.ApplicationStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "getApplicationsByStatus",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        }
      ],
      "name": "getComplianceRecords",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "inspectionDate",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "nextInspectionDue",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "inspector",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "findingsIPFS",
              "type": "string"
            }
          ],
          "internalType": "struct MineralLicenseManager.ComplianceRecord[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MineralLicenseManager.LicenseType",
          "name": "_licenseType",
          "type": "uint8"
        }
      ],
      "name": "getLicenseFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalApplications",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        }
      ],
      "name": "isLicenseActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MineralLicenseManager.LicenseType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "licenseDurations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MineralLicenseManager.LicenseType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "licenseFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        }
      ],
      "name": "postEnvironmentalBond",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        }
      ],
      "name": "reinstateLicense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        }
      ],
      "name": "releaseEnvironmentalBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        }
      ],
      "name": "renewLicense",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        },
        {
          "internalType": "enum MineralLicenseManager.ApplicationStatus",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_comments",
          "type": "string"
        }
      ],
      "name": "reviewApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        }
      ],
      "name": "revokeLicense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MineralLicenseManager.LicenseType",
          "name": "_licenseType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_companyDetailsIPFS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_projectDetailsIPFS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_environmentalImpactIPFS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_financialCapabilityIPFS",
          "type": "string"
        },
        {
          "internalType": "uint128",
          "name": "_annualProductionLimit",
          "type": "uint128"
        },
        {
          "internalType": "string",
          "name": "_geographicArea",
          "type": "string"
        }
      ],
      "name": "submitApplication",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        }
      ],
      "name": "suspendLicense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MineralLicenseManager.LicenseType",
          "name": "_licenseType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "updateLicenseFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd194b4f3550dd4342cf17551d000236abcfaf04caeb17534069c0e43a419e5c",
  "receipt": {
    "to": null,
    "from": "0x0dfDb5bBaEeCE3871f826DF1C6Fe24a2772f5d38",
    "contractAddress": "0x0bf6822791cFc0DA01993D2D7783b9D435604e48",
    "transactionIndex": 3,
    "gasUsed": "3933341",
    "logsBloom": "0x
    "blockHash": "0x9ad6d35171b07638a1e7334112cbd1df0e946de67c5c5de23bd700119102a2f1",
    "transactionHash": "0xdd194b4f3550dd4342cf17551d000236abcfaf04caeb17534069c0e43a419e5c",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 33029042,
        "transactionHash": "0xdd194b4f3550dd4342cf17551d000236abcfaf04caeb17534069c0e43a419e5c",
        "address": "0x0bf6822791cFc0DA01993D2D7783b9D435604e48",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x9ad6d35171b07638a1e7334112cbd1df0e946de67c5c5de23bd700119102a2f1"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 33029042,
        "transactionHash": "0xdd194b4f3550dd4342cf17551d000236abcfaf04caeb17534069c0e43a419e5c",
        "address": "0x0bf6822791cFc0DA01993D2D7783b9D435604e48",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x61ccfb66066ba6446eb193969811c8e1df99e1d5b9eae29748c1d5be84b4d1af",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x9ad6d35171b07638a1e7334112cbd1df0e946de67c5c5de23bd700119102a2f1"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 33029042,
        "transactionHash": "0xdd194b4f3550dd4342cf17551d000236abcfaf04caeb17534069c0e43a419e5c",
        "address": "0x0bf6822791cFc0DA01993D2D7783b9D435604e48",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb938b4e8be78c5b3d6090a6dcee4f5257472278c0aaffb0b01bee86005dc1fee",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0x9ad6d35171b07638a1e7334112cbd1df0e946de67c5c5de23bd700119102a2f1"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 33029042,
        "transactionHash": "0xdd194b4f3550dd4342cf17551d000236abcfaf04caeb17534069c0e43a419e5c",
        "address": "0x0bf6822791cFc0DA01993D2D7783b9D435604e48",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd8994f6d76f930dc5ea8c60e38e6334a87bb8539cc3082ac6828681c33316e3d",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 43,
        "blockHash": "0x9ad6d35171b07638a1e7334112cbd1df0e946de67c5c5de23bd700119102a2f1"
      }
    ],
    "blockNumber": 33029042,
    "cumulativeGasUsed": "4683826",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7c3d72a177373b46b126c9cb9d71da65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reviewer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum MineralLicenseManager.ApplicationStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ApplicationReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum MineralLicenseManager.LicenseType\",\"name\":\"licenseType\",\"type\":\"uint8\"}],\"name\":\"ApplicationSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BondForfeited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BondPosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BondReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"}],\"name\":\"ComplianceInspection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"}],\"name\":\"LicenseApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiryDate\",\"type\":\"uint256\"}],\"name\":\"LicenseRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"LicenseRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"LicenseSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPLIANCE_OFFICER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LICENSE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeLicensesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_passed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_findingsIPFS\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_nextInspectionDue\",\"type\":\"uint64\"}],\"name\":\"addComplianceInspection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applicantApplications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applicationData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"companyDetailsIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectDetailsIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"environmentalImpactIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"financialCapabilityIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"geographicArea\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rejectionReason\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"enum MineralLicenseManager.LicenseType\",\"name\":\"licenseType\",\"type\":\"uint8\"},{\"internalType\":\"enum MineralLicenseManager.ApplicationStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"submissionDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"reviewDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"approvalDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiryDate\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"reviewingOfficer\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"annualProductionLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondAmount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"requiresEnvironmentalBond\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bondPosted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_banned\",\"type\":\"bool\"}],\"name\":\"banApplicant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bannedApplicants\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_applicationIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum MineralLicenseManager.ApplicationStatus[]\",\"name\":\"_statuses\",\"type\":\"uint8[]\"}],\"name\":\"batchUpdateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"complianceRecords\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"inspectionDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInspectionDue\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"findingsIPFS\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"}],\"name\":\"emergencyPauseApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_applicant\",\"type\":\"address\"}],\"name\":\"getApplicantApplications\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"}],\"name\":\"getApplication\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"applicationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"enum MineralLicenseManager.LicenseType\",\"name\":\"licenseType\",\"type\":\"uint8\"},{\"internalType\":\"enum MineralLicenseManager.ApplicationStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"submissionDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"reviewDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"approvalDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiryDate\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"reviewingOfficer\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"annualProductionLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondAmount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"requiresEnvironmentalBond\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bondPosted\",\"type\":\"bool\"}],\"internalType\":\"struct MineralLicenseManager.LicenseApplication\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"companyDetailsIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectDetailsIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"environmentalImpactIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"financialCapabilityIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"geographicArea\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rejectionReason\",\"type\":\"string\"}],\"internalType\":\"struct MineralLicenseManager.ApplicationData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MineralLicenseManager.ApplicationStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"getApplicationsByStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"}],\"name\":\"getComplianceRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"inspectionDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInspectionDue\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"findingsIPFS\",\"type\":\"string\"}],\"internalType\":\"struct MineralLicenseManager.ComplianceRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MineralLicenseManager.LicenseType\",\"name\":\"_licenseType\",\"type\":\"uint8\"}],\"name\":\"getLicenseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalApplications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"}],\"name\":\"isLicenseActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MineralLicenseManager.LicenseType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"licenseDurations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MineralLicenseManager.LicenseType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"licenseFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"}],\"name\":\"postEnvironmentalBond\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"}],\"name\":\"reinstateLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"}],\"name\":\"releaseEnvironmentalBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"}],\"name\":\"renewLicense\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"},{\"internalType\":\"enum MineralLicenseManager.ApplicationStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_comments\",\"type\":\"string\"}],\"name\":\"reviewApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"revokeLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MineralLicenseManager.LicenseType\",\"name\":\"_licenseType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_companyDetailsIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectDetailsIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_environmentalImpactIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_financialCapabilityIPFS\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"_annualProductionLimit\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_geographicArea\",\"type\":\"string\"}],\"name\":\"submitApplication\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"suspendLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MineralLicenseManager.LicenseType\",\"name\":\"_licenseType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateLicenseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Comprehensive license management for mineral supply chain\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addComplianceInspection(uint256,bool,string,uint64)\":{\"details\":\"Add compliance inspection record\"},\"banApplicant(address,bool)\":{\"details\":\"Ban applicant from future applications\"},\"batchUpdateStatus(uint256[],uint8[])\":{\"details\":\"Batch update application statuses\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"postEnvironmentalBond(uint256)\":{\"details\":\"Post environmental bond for approved license\"},\"reinstateLicense(uint256)\":{\"details\":\"Reinstate a suspended license\"},\"releaseEnvironmentalBond(uint256)\":{\"details\":\"Release environmental bond (for compliance closure)\"},\"renewLicense(uint256)\":{\"details\":\"Renew an expiring license\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"reviewApplication(uint256,uint8,string)\":{\"details\":\"Review and approve/reject application\"},\"revokeLicense(uint256,string)\":{\"details\":\"Revoke a license permanently\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"submitApplication(uint8,string,string,string,string,uint128,string)\":{\"details\":\"Submit a new license application\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"suspendLicense(uint256,string)\":{\"details\":\"Suspend a license for compliance issues\"},\"updateLicenseFee(uint8,uint256)\":{\"details\":\"Update license fees\"}},\"title\":\"MineralLicenseManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Handles applications, approvals, renewals, and compliance tracking\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/MineralLicenseManager.sol\":\"MineralLicenseManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/modules/MineralLicenseManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title MineralLicenseManager\\n * @dev Comprehensive license management for mineral supply chain\\n * @notice Handles applications, approvals, renewals, and compliance tracking\\n */\\ncontract MineralLicenseManager is AccessControl, ReentrancyGuard {\\n    // Role definitions\\n    bytes32 public constant LICENSE_MANAGER = keccak256(\\\"LICENSE_MANAGER\\\");\\n    bytes32 public constant COMPLIANCE_OFFICER = keccak256(\\\"COMPLIANCE_OFFICER\\\");\\n    bytes32 public constant AUDITOR = keccak256(\\\"AUDITOR\\\");\\n\\n    // License type enumerations\\n    enum LicenseType {\\n        PROSPECTING,\\n        EXPLORATION,\\n        SMALL_SCALE_MINING,\\n        LARGE_SCALE_MINING,\\n        PROCESSING,\\n        TRADING_EXPORT\\n    }\\n\\n    enum ApplicationStatus {\\n        DRAFT,\\n        SUBMITTED,\\n        UNDER_REVIEW,\\n        APPROVED,\\n        REJECTED,\\n        SUSPENDED,\\n        REVOKED,\\n        EXPIRED\\n    }\\n\\n    // License structure - packed for gas efficiency\\n    struct LicenseApplication {\\n        uint256 applicationId;\\n        address applicant;\\n        LicenseType licenseType;\\n        ApplicationStatus status;\\n        uint64 submissionDate;\\n        uint64 reviewDate;\\n        uint64 approvalDate;\\n        uint64 expiryDate;\\n        address reviewingOfficer;\\n        uint128 annualProductionLimit; // in tons\\n        uint128 bondAmount;\\n        bool requiresEnvironmentalBond;\\n        bool bondPosted;\\n        // IPFS hashes stored separately to avoid struct packing issues\\n    }\\n\\n    // IPFS data stored separately to optimize struct packing\\n    struct ApplicationData {\\n        string companyDetailsIPFS;\\n        string projectDetailsIPFS;\\n        string environmentalImpactIPFS;\\n        string financialCapabilityIPFS;\\n        string geographicArea;\\n        string rejectionReason;\\n    }\\n\\n    // Compliance tracking\\n    struct ComplianceRecord {\\n        uint64 inspectionDate;\\n        uint64 nextInspectionDue;\\n        address inspector;\\n        bool passed;\\n        string findingsIPFS;\\n    }\\n\\n    // State variables\\n    uint256 private _nextApplicationId = 1;\\n    mapping(uint256 => LicenseApplication) public applications;\\n    mapping(uint256 => ApplicationData) public applicationData;\\n    mapping(address => uint256[]) public applicantApplications;\\n    mapping(LicenseType => uint256) public licenseFees;\\n    mapping(LicenseType => uint256) public licenseDurations;\\n    mapping(uint256 => ComplianceRecord[]) public complianceRecords;\\n    mapping(address => bool) public bannedApplicants;\\n\\n    // Efficient storage for active licenses count per applicant\\n    mapping(address => uint256) public activeLicensesCount;\\n\\n    // Events\\n    event ApplicationSubmitted(uint256 indexed applicationId, address indexed applicant, LicenseType licenseType);\\n    event ApplicationReviewed(uint256 indexed applicationId, address indexed reviewer, ApplicationStatus status);\\n    event LicenseApproved(uint256 indexed applicationId, uint256 expiryDate);\\n    event LicenseRevoked(uint256 indexed applicationId, string reason);\\n    event LicenseSuspended(uint256 indexed applicationId, string reason);\\n    event LicenseRenewed(uint256 indexed applicationId, uint256 newExpiryDate);\\n    event ComplianceInspection(uint256 indexed applicationId, address inspector, bool passed);\\n    event BondPosted(uint256 indexed applicationId, uint256 amount);\\n    event BondForfeited(uint256 indexed applicationId, uint256 amount);\\n    event BondReleased(uint256 indexed applicationId, uint256 amount);\\n\\n    // Modifiers\\n    modifier onlyApplicant(uint256 _applicationId) {\\n        require(applications[_applicationId].applicant == msg.sender, \\\"Not application owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyLicenseManager() {\\n        require(hasRole(LICENSE_MANAGER, msg.sender), \\\"Requires LICENSE_MANAGER role\\\");\\n        _;\\n    }\\n\\n    modifier onlyComplianceOfficer() {\\n        require(\\n            hasRole(COMPLIANCE_OFFICER, msg.sender) || hasRole(LICENSE_MANAGER, msg.sender),\\n            \\\"Requires COMPLIANCE_OFFICER role\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier applicationExists(uint256 _applicationId) {\\n        require(_applicationId > 0 && _applicationId < _nextApplicationId, \\\"Application does not exist\\\");\\n        require(applications[_applicationId].applicant != address(0), \\\"Application deleted\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(LICENSE_MANAGER, msg.sender);\\n        _setupRole(COMPLIANCE_OFFICER, msg.sender);\\n        _setupRole(AUDITOR, msg.sender);\\n\\n        // Initialize license fees (in wei)\\n        _initializeLicenseFees();\\n        _initializeLicenseDurations();\\n    }\\n\\n    function _initializeLicenseFees() private {\\n        licenseFees[LicenseType.PROSPECTING] = 0.1 ether;\\n        licenseFees[LicenseType.EXPLORATION] = 0.5 ether;\\n        licenseFees[LicenseType.SMALL_SCALE_MINING] = 1 ether;\\n        licenseFees[LicenseType.LARGE_SCALE_MINING] = 5 ether;\\n        licenseFees[LicenseType.PROCESSING] = 2 ether;\\n        licenseFees[LicenseType.TRADING_EXPORT] = 1.5 ether;\\n    }\\n\\n    function _initializeLicenseDurations() private {\\n        licenseDurations[LicenseType.PROSPECTING] = 365 days;\\n        licenseDurations[LicenseType.EXPLORATION] = 1095 days; // 3 years\\n        licenseDurations[LicenseType.SMALL_SCALE_MINING] = 1825 days; // 5 years\\n        licenseDurations[LicenseType.LARGE_SCALE_MINING] = 10950 days; // 30 years\\n        licenseDurations[LicenseType.PROCESSING] = 7300 days; // 20 years\\n        licenseDurations[LicenseType.TRADING_EXPORT] = 3650 days; // 10 years\\n    }\\n\\n    /**\\n     * @dev Submit a new license application\\n     */\\n    function submitApplication(\\n        LicenseType _licenseType,\\n        string memory _companyDetailsIPFS,\\n        string memory _projectDetailsIPFS,\\n        string memory _environmentalImpactIPFS,\\n        string memory _financialCapabilityIPFS,\\n        uint128 _annualProductionLimit,\\n        string memory _geographicArea\\n    ) external payable nonReentrant returns (uint256) {\\n        require(!bannedApplicants[msg.sender], \\\"Applicant is banned\\\");\\n        require(msg.value >= licenseFees[_licenseType], \\\"Insufficient license fee\\\");\\n\\n        uint256 applicationId = _nextApplicationId++;\\n\\n        LicenseApplication memory newApplication = LicenseApplication({\\n            applicationId: applicationId,\\n            applicant: msg.sender,\\n            licenseType: _licenseType,\\n            status: ApplicationStatus.SUBMITTED,\\n            submissionDate: uint64(block.timestamp),\\n            reviewDate: 0,\\n            approvalDate: 0,\\n            expiryDate: 0,\\n            reviewingOfficer: address(0),\\n            annualProductionLimit: _annualProductionLimit,\\n            bondAmount: 0,\\n            requiresEnvironmentalBond: _licenseType == LicenseType.LARGE_SCALE_MINING ||\\n                _licenseType == LicenseType.PROCESSING,\\n            bondPosted: false\\n        });\\n\\n        ApplicationData memory data = ApplicationData({\\n            companyDetailsIPFS: _companyDetailsIPFS,\\n            projectDetailsIPFS: _projectDetailsIPFS,\\n            environmentalImpactIPFS: _environmentalImpactIPFS,\\n            financialCapabilityIPFS: _financialCapabilityIPFS,\\n            geographicArea: _geographicArea,\\n            rejectionReason: \\\"\\\"\\n        });\\n\\n        applications[applicationId] = newApplication;\\n        applicationData[applicationId] = data;\\n        applicantApplications[msg.sender].push(applicationId);\\n\\n        // Set bond amount for applicable licenses\\n        if (newApplication.requiresEnvironmentalBond) {\\n            applications[applicationId].bondAmount = _calculateBondAmount(_licenseType, _annualProductionLimit);\\n        }\\n\\n        emit ApplicationSubmitted(applicationId, msg.sender, _licenseType);\\n\\n        return applicationId;\\n    }\\n\\n    /**\\n     * @dev Review and approve/reject application\\n     */\\n    function reviewApplication(\\n        uint256 _applicationId,\\n        ApplicationStatus _status,\\n        string memory _comments\\n    ) external onlyLicenseManager applicationExists(_applicationId) {\\n        LicenseApplication storage application = applications[_applicationId];\\n        ApplicationData storage data = applicationData[_applicationId];\\n\\n        require(\\n            application.status == ApplicationStatus.SUBMITTED || application.status == ApplicationStatus.UNDER_REVIEW,\\n            \\\"Application not in reviewable state\\\"\\n        );\\n\\n        application.status = _status;\\n        application.reviewDate = uint64(block.timestamp);\\n        application.reviewingOfficer = msg.sender;\\n\\n        if (_status == ApplicationStatus.APPROVED) {\\n            application.approvalDate = uint64(block.timestamp);\\n            application.expiryDate = uint64(block.timestamp + licenseDurations[application.licenseType]);\\n            activeLicensesCount[application.applicant]++;\\n            emit LicenseApproved(_applicationId, application.expiryDate);\\n        } else if (_status == ApplicationStatus.REJECTED) {\\n            data.rejectionReason = _comments;\\n        }\\n\\n        emit ApplicationReviewed(_applicationId, msg.sender, _status);\\n    }\\n\\n    /**\\n     * @dev Post environmental bond for approved license\\n     */\\n    function postEnvironmentalBond(\\n        uint256 _applicationId\\n    ) external payable onlyApplicant(_applicationId) applicationExists(_applicationId) nonReentrant {\\n        LicenseApplication storage application = applications[_applicationId];\\n\\n        require(application.status == ApplicationStatus.APPROVED, \\\"License not approved\\\");\\n        require(application.requiresEnvironmentalBond, \\\"No bond required\\\");\\n        require(!application.bondPosted, \\\"Bond already posted\\\");\\n        require(msg.value >= application.bondAmount, \\\"Insufficient bond amount\\\");\\n\\n        application.bondPosted = true;\\n        emit BondPosted(_applicationId, msg.value);\\n    }\\n\\n    /**\\n     * @dev Release environmental bond (for compliance closure)\\n     */\\n    function releaseEnvironmentalBond(\\n        uint256 _applicationId\\n    ) external onlyComplianceOfficer applicationExists(_applicationId) nonReentrant {\\n        LicenseApplication storage application = applications[_applicationId];\\n\\n        require(application.bondPosted, \\\"No bond posted\\\");\\n        require(application.status == ApplicationStatus.APPROVED, \\\"License not active\\\");\\n\\n        application.bondPosted = false;\\n        uint256 bondAmount = application.bondAmount;\\n\\n        (bool success, ) = application.applicant.call{ value: bondAmount }(\\\"\\\");\\n        require(success, \\\"Bond release failed\\\");\\n\\n        emit BondReleased(_applicationId, bondAmount);\\n    }\\n\\n    /**\\n     * @dev Renew an expiring license\\n     */\\n    function renewLicense(\\n        uint256 _applicationId\\n    ) external payable onlyApplicant(_applicationId) applicationExists(_applicationId) nonReentrant {\\n        LicenseApplication storage application = applications[_applicationId];\\n\\n        require(application.status == ApplicationStatus.APPROVED, \\\"License not active\\\");\\n        require(block.timestamp > application.expiryDate - 90 days, \\\"Too early to renew\\\");\\n        require(block.timestamp <= application.expiryDate + 30 days, \\\"License expired\\\");\\n        require(!bannedApplicants[msg.sender], \\\"Applicant is banned\\\");\\n        require(msg.value >= licenseFees[application.licenseType] / 2, \\\"Insufficient renewal fee\\\");\\n\\n        application.expiryDate = uint64(block.timestamp + licenseDurations[application.licenseType]);\\n        application.bondPosted = false; // Require new bond posting\\n\\n        emit LicenseRenewed(_applicationId, application.expiryDate);\\n    }\\n\\n    /**\\n     * @dev Suspend a license for compliance issues\\n     */\\n    function suspendLicense(\\n        uint256 _applicationId,\\n        string memory _reason\\n    ) external onlyComplianceOfficer applicationExists(_applicationId) {\\n        LicenseApplication storage application = applications[_applicationId];\\n        require(application.status == ApplicationStatus.APPROVED, \\\"License not active\\\");\\n\\n        application.status = ApplicationStatus.SUSPENDED;\\n        emit LicenseSuspended(_applicationId, _reason);\\n    }\\n\\n    /**\\n     * @dev Reinstate a suspended license\\n     */\\n    function reinstateLicense(uint256 _applicationId) external onlyComplianceOfficer applicationExists(_applicationId) {\\n        LicenseApplication storage application = applications[_applicationId];\\n        require(application.status == ApplicationStatus.SUSPENDED, \\\"License not suspended\\\");\\n\\n        application.status = ApplicationStatus.APPROVED;\\n        // Note: You might want to add an event for reinstatement\\n    }\\n\\n    /**\\n     * @dev Revoke a license permanently\\n     */\\n    function revokeLicense(\\n        uint256 _applicationId,\\n        string memory _reason\\n    ) external onlyLicenseManager applicationExists(_applicationId) {\\n        LicenseApplication storage application = applications[_applicationId];\\n        ApplicationData storage data = applicationData[_applicationId];\\n\\n        require(\\n            application.status == ApplicationStatus.APPROVED || application.status == ApplicationStatus.SUSPENDED,\\n            \\\"Cannot revoke in current state\\\"\\n        );\\n\\n        application.status = ApplicationStatus.REVOKED;\\n        data.rejectionReason = _reason;\\n\\n        // Update active licenses count\\n        if (activeLicensesCount[application.applicant] > 0) {\\n            activeLicensesCount[application.applicant]--;\\n        }\\n\\n        // Forfeit bond if applicable\\n        if (application.bondPosted && application.requiresEnvironmentalBond) {\\n            application.bondPosted = false;\\n            emit BondForfeited(_applicationId, application.bondAmount);\\n        }\\n\\n        emit LicenseRevoked(_applicationId, _reason);\\n    }\\n\\n    /**\\n     * @dev Add compliance inspection record\\n     */\\n    function addComplianceInspection(\\n        uint256 _applicationId,\\n        bool _passed,\\n        string memory _findingsIPFS,\\n        uint64 _nextInspectionDue\\n    ) external onlyComplianceOfficer applicationExists(_applicationId) {\\n        ComplianceRecord memory record = ComplianceRecord({\\n            inspectionDate: uint64(block.timestamp),\\n            inspector: msg.sender,\\n            passed: _passed,\\n            findingsIPFS: _findingsIPFS,\\n            nextInspectionDue: _nextInspectionDue\\n        });\\n\\n        complianceRecords[_applicationId].push(record);\\n        emit ComplianceInspection(_applicationId, msg.sender, _passed);\\n\\n        // Auto-suspend if failed inspection\\n        LicenseApplication storage application = applications[_applicationId];\\n        if (!_passed && application.status == ApplicationStatus.APPROVED) {\\n            application.status = ApplicationStatus.SUSPENDED;\\n            emit LicenseSuspended(_applicationId, \\\"Failed compliance inspection\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Batch update application statuses\\n     */\\n    function batchUpdateStatus(\\n        uint256[] calldata _applicationIds,\\n        ApplicationStatus[] calldata _statuses\\n    ) external onlyLicenseManager {\\n        require(_applicationIds.length == _statuses.length, \\\"Arrays length mismatch\\\");\\n\\n        for (uint256 i = 0; i < _applicationIds.length; i++) {\\n            if (_applicationIds[i] < _nextApplicationId && applications[_applicationIds[i]].applicant != address(0)) {\\n                applications[_applicationIds[i]].status = _statuses[i];\\n                emit ApplicationReviewed(_applicationIds[i], msg.sender, _statuses[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Ban applicant from future applications\\n     */\\n    function banApplicant(address _applicant, bool _banned) external onlyLicenseManager {\\n        bannedApplicants[_applicant] = _banned;\\n    }\\n\\n    /**\\n     * @dev Update license fees\\n     */\\n    function updateLicenseFee(LicenseType _licenseType, uint256 _newFee) external onlyLicenseManager {\\n        licenseFees[_licenseType] = _newFee;\\n    }\\n\\n    /**\\n     * @dev Calculate environmental bond amount based on license type and production\\n     */\\n    function _calculateBondAmount(\\n        LicenseType _licenseType,\\n        uint256 _annualProductionLimit\\n    ) internal pure returns (uint128) {\\n        if (_licenseType == LicenseType.LARGE_SCALE_MINING) {\\n            return uint128((_annualProductionLimit * 0.01 ether) / 1000); // 0.01 ETH per 1000 tons\\n        } else if (_licenseType == LicenseType.PROCESSING) {\\n            return uint128((_annualProductionLimit * 0.005 ether) / 1000); // 0.005 ETH per 1000 tons\\n        }\\n        return 0;\\n    }\\n\\n    // View functions\\n    function getApplication(\\n        uint256 _applicationId\\n    ) external view applicationExists(_applicationId) returns (LicenseApplication memory, ApplicationData memory) {\\n        return (applications[_applicationId], applicationData[_applicationId]);\\n    }\\n\\n    function getApplicantApplications(address _applicant) external view returns (uint256[] memory) {\\n        return applicantApplications[_applicant];\\n    }\\n\\n    function getComplianceRecords(uint256 _applicationId) external view returns (ComplianceRecord[] memory) {\\n        return complianceRecords[_applicationId];\\n    }\\n\\n    function getLicenseFee(LicenseType _licenseType) external view returns (uint256) {\\n        return licenseFees[_licenseType];\\n    }\\n\\n    function isLicenseActive(uint256 _applicationId) external view returns (bool) {\\n        LicenseApplication memory application = applications[_applicationId];\\n        return application.status == ApplicationStatus.APPROVED && application.expiryDate > block.timestamp;\\n    }\\n\\n    function getTotalApplications() external view returns (uint256) {\\n        return _nextApplicationId - 1;\\n    }\\n\\n    function getApplicationsByStatus(ApplicationStatus _status) external view returns (uint256[] memory) {\\n        uint256 count = 0;\\n\\n        // First pass: count matching applications\\n        for (uint256 i = 1; i < _nextApplicationId; i++) {\\n            if (applications[i].applicant != address(0) && applications[i].status == _status) {\\n                count++;\\n            }\\n        }\\n\\n        // Second pass: collect application IDs\\n        uint256[] memory result = new uint256[](count);\\n        uint256 index = 0;\\n        for (uint256 i = 1; i < _nextApplicationId; i++) {\\n            if (applications[i].applicant != address(0) && applications[i].status == _status) {\\n                result[index++] = i;\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // Admin functions for fund management\\n    function withdrawFees(address payable _to, uint256 _amount) external onlyLicenseManager {\\n        require(_amount <= address(this).balance, \\\"Insufficient balance\\\");\\n        _to.transfer(_amount);\\n    }\\n\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    // Emergency functions\\n    function emergencyPauseApplication(uint256 _applicationId) external onlyLicenseManager {\\n        LicenseApplication storage application = applications[_applicationId];\\n        require(\\n            application.status == ApplicationStatus.APPROVED || application.status == ApplicationStatus.SUSPENDED,\\n            \\\"Cannot pause in current state\\\"\\n        );\\n        application.status = ApplicationStatus.SUSPENDED;\\n    }\\n}\\n\",\"keccak256\":\"0x274d1dcde689d8c86a58589d5ed3afb26fcd31e269ae52ecc1acd3b29c0f51ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060408181523462000294576312cc03009060018080558060025560009081805260076020838152848420338552815260ff8585205416156200025d575b7f61ccfb66066ba6446eb193969811c8e1df99e1d5b9eae29748c1d5be84b4d1af808552848252858520338652825260ff86862054161562000224575b507fb938b4e8be78c5b3d6090a6dcee4f5257472278c0aaffb0b01bee86005dc1fee808552848252858520338652825260ff868620541615620001eb575b507fd8994f6d76f930dc5ea8c60e38e6334a87bb8539cc3082ac6828681c33316e3d808552848252858520338652825260ff868620541615620001b2575b508380526006815267016345785d8a0000858520558284526706f05b59d3b200008585205560028452670de0b6b3a76400008585205560038452674563918244f400008585205560048452671bc16d674ec8000085852055600584526714d1120d7b16000085852055838052526301e133808383205581526305a39a8082822055600281526309660180828220556003815263386409008282205560048152632598060082822055600581522055613e9b90816200029a8239f35b80855284825285852033865282528585208460ff1982541617905533903390600080516020620041358339815191528780a438620000f7565b80855284825285852033865282528585208460ff1982541617905533903390600080516020620041358339815191528780a438620000b9565b80855284825285852033865282528585208460ff1982541617905533903390600080516020620041358339815191528780a4386200007b565b83805283815284842033855281528484208360ff19825416179055333385600080516020620041358339815191528180a46200003e565b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146132ec57508063082df41114610dd05780630be6e2c614612f9c5780631a40d39414612f625780631f2f4bfd14612c8f578063248a9ca314612c6057806325bc528c146128bc5780632b23fb0d146126c65780632f2ff15d14612613578063302fe97114611a4b578063324170e614611979578063338f5cc81461183157806336568abe1461179f5780633b510eee146115f35780634615352e1461155c57806348ad2ac2146115345780635171b458146114f55780635321c4fd1461137657806353e166c6146112f2578063581c091b146112c75780635d4111a71461126f5780635e7520271461100f5780636f9fb98a14610ff357806374b14d9a14610fb857806379a3391714610f8f57806388ef701114610e4e57806391d1485414610e01578063944d029114610dd0578063a217fddf14610db4578063aa375a8a14610d79578063ad3b1b4714610cb6578063b45f452714610aa6578063c468bfa4146109cc578063d2e61f18146105b3578063d547741f14610574578063da7e2cb2146104fc578063dfefadff14610415578063e705c2b814610398578063ed882851146102315763fa80b5ff146101d757600080fd5b3461022c57604036600319011261022c57600435600681101561022c57336000908152600080516020613e06833981519152602052604090205461021d9060ff16613af0565b61022960243591613600565b55005b600080fd5b3461022c5760208060031936011261022c576004356000526008815260406000209081549161025f83613dee565b9261026d6040519485613391565b8084528284018092600052836000206000915b83831061032b5750505050604051918083019381845251809452604083019360408160051b85010192916000955b8287106102bb5785850386f35b90919293828061031b600193603f198a820301865288516001600160401b03808251168352848201511684830152858060a01b0360408201511660408301526060808201511515908301526080809101519160a0809282015201906134af565b96019201960195929190926102ae565b60038660019260409998995161034081613376565b85546001600160401b0390818116835260401c168382015260ff85870154868060a01b038116604084015260a01c16151560608201526103826002870161355a565b6080820152815201920192019190959495610280565b3461022c57602036600319011261022c5760043560005260036020526103c16040600020613d1d565b60608101519060088210156103ff5760036020921490816103e8575b506040519015158152f35b6001600160401b03915060e00151164210826103dd565b634e487b7160e01b600052602160045260246000fd5b3461022c57602036600319011261022c5760043560005260036020526101a0604060002060ff815491600181015490600281015460018060a01b0392836003840154169160056004850154940154946040519788528216602088015261048360408801878460a01c16613472565b61049560608801878460a81c1661347f565b6001600160401b03809260b01c16608088015281811660a0880152818160401c1660c088015260801c1660e08601526101008501526001600160801b03811661012085015260801c610140840152818116151561016084015260081c161515610180820152f35b3461022c57604036600319011261022c57610572610518613446565b610520613685565b336000908152600080516020613e06833981519152602052604090205490919061054c9060ff16613af0565b60018060a01b0316600052600960205260406000209060ff801983541691151516179055565b005b3461022c57604036600319011261022c5761057260043561059361345c565b908060005260006020526105ae600160406000200154613694565b61397a565b3461022c57608036600319011261022c576004356105cf613685565b6001600160401b039060443582811161022c576105f09036906004016133cd565b6064359280841680940361022c573360009081527fca440bb5b4f276d246650b92ae261b87f0f2224864f13e13edcfda2aaca53102602090815260409091205490929060ff16801561099f575b61064690613c0e565b85151580610994575b61065890613b3c565b856000526003835260018060a01b039060019561067f838860406000200154161515613b88565b6040519061068c82613376565b84421682528582019081526040820133815260608301971597881595868252608085019586528b6000526008895260406000208054600160401b811015610968576106db918d82018155613504565b94909461097e5788610727918160029851166001600160401b03198854161787555116859067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b8a840192511682549160ff60a01b9051151560a01b16916affffffffffffffffffffff60a81b161717905501905192835190811161096857879361076b8354613520565b601f811161090f575b508590601f831160011461087f579180604094927f56fee222d9c6f14f38b45b01418211a2fd26417646952b6007a189a599421c309694600092610874575b5050600019600383901b1c191690891b1790555b81519033825285820152a2836000526003815260406000209180610858575b6107ec57005b7fdc9fcacd2006c7678363b02fba5b8f6cd86c3e895f2d4cabdcb6558da525a2eb9260609201600560a81b60ff60a81b19825416179055601c604051918083528201527f4661696c656420636f6d706c69616e636520696e7370656374696f6e000000006040820152a2005b5060ff8383015460a81c1660088110156103ff576003146107e6565b015190508b806107b3565b889291601f1983169185600052886000209260005b8a8282106108f6575050917f56fee222d9c6f14f38b45b01418211a2fd26417646952b6007a189a599421c3097959391856040989694106108dd575b505050811b0190556107c7565b015160001960f88460031b161c191690558b80806108d0565b8484015186558e9a508d97909501949384019301610894565b9091928094955060005285600020601f840160051c81019187851061095e575b8a969594939291601f8b920160051c01915b82811061094f575050610774565b600081558b97508a9101610941565b909150819061092f565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052600060045260246000fd5b50600254861061064f565b50600080516020613e2683398151915260009081528084526040808220338352855290205460ff1661063d565b3461022c57602036600319011261022c576004356000526004602052610a5c6040600020610aa26109fc8261355a565b91610a94610a0c6001830161355a565b91610a86610a1c6002830161355a565b610a78610a2b6003850161355a565b91610a6a610a476005610a406004890161355a565b970161355a565b976040519b8c9b60c08d5260c08d01906134af565b908b820360208d01526134af565b9089820360408b01526134af565b9087820360608901526134af565b9085820360808701526134af565b9083820360a08501526134af565b0390f35b3461022c5760208060031936011261022c57600435907fb938b4e8be78c5b3d6090a6dcee4f5257472278c0aaffb0b01bee86005dc1fee60005260008152604060002033600052815260ff604060002054168015610c89575b610b0890613c0e565b81151580610c7e575b610b1a90613b3c565b60008281526003825260409020600101546001600160a01b0390610b419082161515613b88565b610b49613a9a565b82600052600382526040600020600581019081549160ff8360081c1615610c485760018201549260ff8460a81c169360088510156103ff57600094859485948594600493610b9990600314613c59565b61ff0019169055015460801c958691165af13d15610c43573d610bbb816133b2565b90610bc96040519283613391565b81526000843d92013e5b15610c0857907fa82cc801d3441a544199a29213af59c68395a29ea31e3130a7badf410f166b6791604051908152a260018055005b60405162461bcd60e51b8152600481018390526013602482015272109bdb99081c995b19585cd94819985a5b1959606a1b6044820152606490fd5b610bd3565b60405162461bcd60e51b815260048101869052600e60248201526d139bc8189bdb99081c1bdcdd195960921b6044820152606490fd5b506002548210610b11565b50600080516020613e2683398151915260009081528082526040808220338352835290205460ff16610aff565b3461022c57604036600319011261022c576004356001600160a01b0381169081900361022c57336000908152600080516020613e0683398151915260205260409020546024359190610d0a9060ff16613af0565b478211610d3d5760008080938193828215610d34575bf115610d2857005b6040513d6000823e3d90fd5b506108fc610d20565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b3461022c57600036600319011261022c5760206040517fd8994f6d76f930dc5ea8c60e38e6334a87bb8539cc3082ac6828681c33316e3d8152f35b3461022c57600036600319011261022c57602060405160008152f35b3461022c57602036600319011261022c57600435600681101561022c57610df8602091613600565b54604051908152f35b3461022c57604036600319011261022c57610e1a61345c565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461022c57610e5c36613414565b3360009081527fca440bb5b4f276d246650b92ae261b87f0f2224864f13e13edcfda2aaca53102602090815260409091205490919060ff168015610f62575b610ea490613c0e565b82151580610f57575b610eb690613b3c565b6000838152600383526040902060010154610edb906001600160a01b03161515613b88565b826000526003825260016040600020019182549260ff8460a81c169360088510156103ff57610f2d60037fdc9fcacd2006c7678363b02fba5b8f6cd86c3e895f2d4cabdcb6558da525a2eb9614613c59565b60ff60a81b1916600560a81b179055604051818152918291610f5291908301906134af565b0390a2005b506002548310610ead565b50600080516020613e2683398151915260009081528083526040808220338352845290205460ff16610e9b565b3461022c57600036600319011261022c576020604051600080516020613e268339815191528152f35b3461022c57600036600319011261022c5760206040517fb938b4e8be78c5b3d6090a6dcee4f5257472278c0aaffb0b01bee86005dc1fee8152f35b3461022c57600036600319011261022c57602047604051908152f35b60208060031936011261022c57600435806000526003825260018060a01b0390611073600192611049818560406000200154163314613bca565b82151580611264575b61105b90613b3c565b82600052600385528360406000200154161515613b88565b61107b613a9a565b80600052600383526040600020928284015460ff8160a81c1660088110156103ff5760036110a99114613c59565b600285016001600160401b039182825460801c166276a6ff19810184811161121457841642111561122a5762278d000183811161121457831642116111dd5760ff903360005260098552611104826040600020541615613a19565b60a01c1661111181613600565b54861c3410611198577f641f1db3da55b0df612710b4b1d9cceba57bd7a3a2b900d7265b08c8c7068a2e94959661117e84611157611150600595613619565b54426139ee565b855467ffffffffffffffff60801b1916911660801b67ffffffffffffffff60801b16178455565b0161ff001981541690555460801c16604051908152a28055005b60405162461bcd60e51b815260048101859052601860248201527f496e73756666696369656e742072656e6577616c2066656500000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052600f60248201526e131a58d95b9cd948195e1c1a5c9959608a1b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b8152600481018690526012602482015271546f6f206561726c7920746f2072656e657760701b6044820152606490fd5b506002548310611052565b3461022c57604036600319011261022c57611288613446565b6001600160a01b031660009081526005602052604090208054602435919082101561022c576020916112b99161366d565b90546040519160031b1c8152f35b3461022c57600036600319011261022c57600254600019810190811161121457602090604051908152f35b3461022c5760208060031936011261022c576001600160a01b03611314613446565b1660005260058152604060002090604051908181845491828152019360005281600020916000905b82821061135f57610aa28561135381890382613391565b60405191829182613632565b83548652948501946001938401939091019061133c565b3461022c5760208060031936011261022c5760043560089182821015908161022c57600093600193600254945b85811061148857506113b486613dee565b956113c26040519788613391565b8087526113d1601f1991613dee565b01368488013760009360015b8681106113f25760405180610aa28a82613632565b60008181526003865260409020600101546001600160a01b03811615159083908261146b575b505061142d575b61142890613a5b565b6113dd565b9461143781613a5b565b9588518210156114555780866114289360051b8b010152905061141f565b634e487b7160e01b600052603260045260246000fd5b60a81c60ff1691506103ff57848110156103ff578314828a611418565b60008181526003855260409020600101546001600160a01b0381161515908690826114d8575b50506114c3575b6114be90613a5b565b6113a3565b956114d06114be91613a5b565b9690506114b5565b60a81c60ff1691506103ff57838110156103ff57821485896114ae565b3461022c57602036600319011261022c576001600160a01b03611516613446565b166000526009602052602060ff604060002054166040519015158152f35b3461022c57602036600319011261022c57600435600681101561022c57610df8602091613619565b3461022c57604036600319011261022c576024356004356000526008602052604060002090815481101561022c5761159391613504565b508054610aa26115aa60026001850154940161355a565b60ff6040519485946001600160401b0390818116875260401c16602086015260018060a01b038116604086015260a01c161515606084015260a0608084015260a08301906134af565b3461022c57604036600319011261022c576001600160401b0360043581811161022c576116249036906004016134d4565b909160243590811161022c5761163e9036906004016134d4565b336000908152600080516020613e068339815191526020908152604090912054909492919061166f9060ff16613af0565b8084036117615760005b84811061168257005b61168d818686613c9a565b356002541180611733575b6116ab575b6116a690613a5b565b611679565b6116b6818385613c9a565b35906008918281101561022c576116e7906116d2838989613c9a565b35600052600389526001604060002001613a76565b6116f2818787613c9a565b35916116ff828587613c9a565b359081101561022c576116a692611719604051809361347f565b600080516020613e46833981519152893393a3905061169d565b5061173f818686613c9a565b3560009081526003875260409020600101546001600160a01b03161515611698565b60405162461bcd60e51b8152600481018690526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b6044820152606490fd5b3461022c57604036600319011261022c576117b861345c565b336001600160a01b038216036117d4576105729060043561397a565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b3461022c5760208060031936011261022c576004357fb938b4e8be78c5b3d6090a6dcee4f5257472278c0aaffb0b01bee86005dc1fee60005260008252604060002033600052825260ff60406000205416801561194c575b61189290613c0e565b80151580611941575b6118a490613b3c565b60008181526003835260409020600101546118c9906001600160a01b03161515613b88565b6000526003815260016040600020019081549060ff8260a81c1660088110156103ff57600503611905575060ff60a81b1916600360a81b179055005b6064906040519062461bcd60e51b825260048201526015602482015274131a58d95b9cd9481b9bdd081cdd5cdc195b991959605a1b6044820152fd5b50600254811061189b565b50600080516020613e2683398151915260009081528083526040808220338352845290205460ff16611889565b3461022c57602036600319011261022c57336000908152600080516020613e0683398151915260205260409020546119b39060ff16613af0565b60043560005260036020526001604060002001805460ff8160a81c1660088110156103ff5760038114908115611a40575b50156119fb5760ff60a81b1916600560a81b179055005b60405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f7420706175736520696e2063757272656e742073746174650000006044820152606490fd5b6005915014836119e4565b60e036600319011261022c576006600435101561022c576024356001600160401b03811161022c57611a819036906004016133cd565b6044356001600160401b03811161022c57611aa09036906004016133cd565b906064356001600160401b03811161022c57611ac09036906004016133cd565b906084356001600160401b03811161022c57611ae09036906004016133cd565b9060a435916001600160801b038316830361022c5760c4356001600160401b03811161022c57611b149036906004016133cd565b90611b1d613a9a565b336000526009602052611b3860ff6040600020541615613a19565b611b43600435613600565b5434106125ce5760025494611b5786613a5b565b6002556003600435149687156125c2575b60405197611b758961333f565b8789523360208a0152611b8d60043560408b01613a6a565b600160608a01526001600160401b03421660808a0152600060a08a0152600060c08a0152600060e08a015260006101008a01526001600160801b0387166101208a015260006101408a01521515610160890152600061018089015260405194611bf58661335b565b855260208501526040840152606083015260808201526040518060208101106001600160401b0360208301111761096857602081016040526000815260a082015282600052600360205260406000208451815560018060a01b03602086015116600182015490604087015160068110156103ff576001600160a81b03199092161760a09190911b60ff60a01b1617600182015560608501519060088210156103ff57611ca660059260018301613a76565b608086015160018201805467ffffffffffffffff60b01b191660b09290921b67ffffffffffffffff60b01b1691909117905560a086015160028201805467ffffffffffffffff19166001600160401b0392831617815560c0880151611d6092611d339116829067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b60e0880151815467ffffffffffffffff60801b191660809190911b67ffffffffffffffff60801b16179055565b6101008601516003820180546001600160a01b0319166001600160a01b039290921691909117905561012086015161014087015160801b6fffffffffffffffffffffffffffffffff19166001600160801b039190911617600482015501611dda6101608601511515829060ff801983541691151516179055565b610180850151151561ff0082549160081b169061ff00191617905582600052600460205260406000209080518051906001600160401b038211610968578190611e238554613520565b601f8111612572575b50602090601f8311600114612506576000926124fb575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b038211610968578190611e7d6001860154613520565b601f81116124a8575b50602090601f83116001146124365760009261242b575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610968578190611eda6002860154613520565b601f81116123d8575b50602090601f83116001146123665760009261235b575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b038211610968578190611f376003860154613520565b601f8111612308575b50602090601f83116001146122965760009261228b575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b03821161096857611f926004850154613520565b601f8111612244575b50602090601f83116001146121d15760a0939291600091836121c6575b50508160011b916000199060031b1c19161760048401555b01518051906001600160401b03821161096857611ff06005840154613520565b601f811161217f575b50602090601f831160011461210f576005929160009183612104575b50508160011b916000199060031b1c1916179101555b336000526005602052604060002092835490600160401b8210156109685761205e8260209660016101609501815561366d565b81549060031b9086821b91600019901b191617905501516120bc575b5060405161208a81600435613472565b817f1360b2b6c1c6ea582f8a3495ecb18c213439139bc6afd0f1d00bea8e285e57ba843393a360018055604051908152f35b6120d46001600160801b036120fe9216600435613caa565b82600052600384526004604060002001906001600160801b0382549181199060801b169116179055565b8261207a565b015190508780612015565b906005840160005260206000209160005b601f19851681106121675750918391600193600595601f1981161061214e575b505050811b0191015561202b565b015160001960f88460031b161c19169055878080612140565b91926020600181928685015181550194019201612120565b600584016000526020600020601f840160051c8101602085106121bf575b601f830160051c820181106121b3575050611ff9565b6000815560010161219d565b508061219d565b015190508880611fb8565b906004850160005260206000209160005b601f198516811061222c575091839160019360a09695601f19811610612213575b505050811b016004840155611fd0565b015160001960f88460031b161c19169055888080612203565b919260206001819286850151815501940192016121e2565b600485016000526020600020601f840160051c810160208510612284575b601f830160051c82018110612278575050611f9b565b60008155600101612262565b5080612262565b015190508780611f57565b9250600385016000526020600020906000935b601f19841685106122ed576001945083601f198116106122d4575b505050811b016003830155611f6f565b015160001960f88460031b161c191690558780806122c4565b818101518355602094850194600190930192909101906122a9565b909150600385016000526020600020601f840160051c810160208510612354575b90849392915b601f830160051c82018110612345575050611f40565b6000815585945060010161232f565b5080612329565b015190508780611efa565b9250600285016000526020600020906000935b601f19841685106123bd576001945083601f198116106123a4575b505050811b016002830155611f12565b015160001960f88460031b161c19169055878080612394565b81810151835560209485019460019093019290910190612379565b909150600285016000526020600020601f840160051c810160208510612424575b90849392915b601f830160051c82018110612415575050611ee3565b600081558594506001016123ff565b50806123f9565b015190508780611e9d565b9250600185016000526020600020906000935b601f198416851061248d576001945083601f19811610612474575b505050811b016001830155611eb5565b015160001960f88460031b161c19169055878080612464565b81810151835560209485019460019093019290910190612449565b909150600185016000526020600020601f840160051c8101602085106124f4575b90849392915b601f830160051c820181106124e5575050611e86565b600081558594506001016124cf565b50806124c9565b015190508780611e43565b9250846000526020600020906000935b601f1984168510612557576001945083601f1981161061253e575b505050811b018255611e58565b015160001960f88460031b161c19169055878080612531565b81810151835560209485019460019093019290910190612516565b909150846000526020600020601f840160051c8101602085106125bb575b90849392915b601f830160051c820181106125ac575050611e2c565b60008155859450600101612596565b5080612590565b60048035149750611b68565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206c6963656e73652066656500000000000000006044820152606490fd5b3461022c57604036600319011261022c5760043561262f61345c565b816000526000602052612649600160406000200154613694565b81600052600060205260406000209060018060a01b0316908160005260205260ff604060002054161561267857005b8160005260006020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b60208060031936011261022c5760043590816000526003815261272960018060a01b036126fe81600160406000200154163314613bca565b831515806128b1575b61271090613b3c565b8360005260038352600160406000200154161515613b88565b612731613a9a565b8160005260038152604060002060ff600182015460a81c1660088110156103ff5760030361287557600581019081549060ff82161561283d5760ff8260081c16612802576004015460801c34106127bd5761ff0019166101001790556040513481527f644d2aa06d4f63348089f9438ef6246ed82252dd0eb4b3104a0679250983c5749190a260018055005b60405162461bcd60e51b815260048101849052601860248201527f496e73756666696369656e7420626f6e6420616d6f756e7400000000000000006044820152606490fd5b60405162461bcd60e51b8152600481018590526013602482015272109bdb9908185b1c9958591e481c1bdcdd1959606a1b6044820152606490fd5b60405162461bcd60e51b815260048101859052601060248201526f139bc8189bdb99081c995c5d5a5c995960821b6044820152606490fd5b60405162461bcd60e51b8152600481018390526014602482015273131a58d95b9cd9481b9bdd08185c1c1c9bdd995960621b6044820152606490fd5b506002548410612707565b3461022c57606036600319011261022c57600435602435600881101561022c576001600160401b039160443583811161022c576128fd9036906004016133cd565b336000908152600080516020613e0683398151915260209081526040909120549194909161292d9060ff16613af0565b82151580612c55575b61293f90613b3c565b82600052600380835260018060a01b03906001612966838260406000200154161515613b88565b8560005281855260406000209760048652604060002091808a019360ff855460a81c1660088110156103ff57828114908115612c4a575b5015612bf9576129ad8a86613a76565b60028b01805467ffffffffffffffff191642891690811782559b820180546001600160a01b031916331790559a938a8203612a9c575050505092877fafea0bea83ac009c0e92de7d70f0aa58a1ad051d1fccb33f54b084b7e86ad56b938693612a4c899a9b97600080516020613e468339815191529a989067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b612a638461115761115060ff855460a01c16613619565b5416600052600a83526040600020612a7b8154613a5b565b90555460801c16604051908152a25b612a97604051809561347f565b3393a3005b93509350949350975060048714612aca575b50505050600080516020613e4683398151915291929350612a8a565b60050192875192831161096857612ae18454613520565b601f8111612bb0575b508497601f8411600114612b3d57839291600080516020613e468339815191529798998492600095612b32575b50501b92600019911b1c19161790555b839291858080612aae565b015193508a80612b17565b909291601f1983169885600052866000209260005b8b8110612b9b575084600080516020613e46833981519152999a9b10612b81575b50505050811b019055612b27565b01519060f884600019921b161c1916905587808080612b73565b81830151855593860193918801918801612b52565b8460005285600020601f850160051c810191878610612bef575b601f0160051c019082905b828110612be3575050612aea565b60008155018290612bd5565b9091508190612bca565b60405162461bcd60e51b815260048101899052602360248201527f4170706c69636174696f6e206e6f7420696e2072657669657761626c6520737460448201526261746560e81b6064820152608490fd5b60029150148c61299d565b506002548310612936565b3461022c57602036600319011261022c5760043560005260006020526020600160406000200154604051908152f35b3461022c57602036600319011261022c576004356000610180604051612cb48161333f565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152826101608201520152606060a0604051612d0f8161335b565b8281528260208201528260408201528280820152826080820152015280151580612f57575b612d3d90613b3c565b600081815260036020526040902060010154612d63906001600160a01b03161515613b88565b600052600360205261018060406000206004602052610aa2612d89604060002092613d1d565b91612df1600560405192612d9c8461335b565b612da58161355a565b8452612db36001820161355a565b6020850152612dc46002820161355a565b6040850152612dd56003820161355a565b6060850152612de66004820161355a565b60808501520161355a565b60a08201526040519383859451855260018060a01b036020820151166020860152612e2460408201516040870190613472565b612e366060820151606087019061347f565b6001600160401b038060808301511660808701528060a08301511660a08701528060c08301511660c087015260e08201511660e086015260018060a01b03610100820151166101008601526001600160801b03806101208301511661012087015261014082015116610140860152610160810151151561016086015201511515610180840152612edc6101c0806101a086015260c08351918601526102808501906134af565b60a0612f44612f2f612f1a612f056020870151956101bf1996878b8303016101e08c01526134af565b6040870151868a8303016102008b01526134af565b606086015185898303016102208a01526134af565b608085015184888303016102408901526134af565b92015190848303016102608501526134af565b506002548110612d34565b3461022c57602036600319011261022c576001600160a01b03612f83613446565b16600052600a6020526020604060002054604051908152f35b3461022c57612faa36613414565b336000908152600080516020613e068339815191526020526040902054612fd39060ff16613af0565b811515806132e1575b612fe590613b3c565b60008281526003602052604090206001015461300b906001600160a01b03161515613b88565b81600052600360205260406000206004602052604060002090600181015460ff8160a81c1660088110156103ff57600381149081156132d6575b50156132915760ff60a81b1916600360a91b1760018201558251916001600160401b03831161096857849261307d6005830154613520565b601f8111613237575b506020601f821160011461319f57916005827f6ee3b31d44997c648df5e90862e4a006388f62a5305fc479c0d13958d1926a06979593610f529795600091613194575b508160011b916000199060031b1c1916179101555b60018101546001600160a01b03166000908152600a60205260409020805480613182575b505060058101805460ff8160081c1680613178575b613134575b505050506040519182916020835260208301906134af565b7fefea404e9c23a12458cbca8f4820d343a60870306fc6aae6f96f88010cb96ccc9260209260049261ff0019169055015460801c604051908152a28385808061311c565b5060ff8116613117565b61318b90613a0c565b90558680613102565b90508601518a6130c9565b6005830160005260206000209060005b601f198416811061321c5750600183610f529795936005937f6ee3b31d44997c648df5e90862e4a006388f62a5305fc479c0d13958d1926a069a9896601f19811610613203575b5050811b019101556130de565b88015160001960f88460031b161c191690558a806131f6565b878201518355889650600190920191602091820191016131af565b9091929350600583016000526020600020601f830160051c81019160208410613287575b90601f8896959493920160051c01905b8181106132785750613086565b6000815587955060010161326b565b909150819061325b565b60405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207265766f6b6520696e2063757272656e7420737461746500006044820152606490fd5b600591501486613045565b506002548210612fdc565b3461022c57602036600319011261022c576004359063ffffffff60e01b821680920361022c57602091637965db0b60e01b811490811561332e575b5015158152f35b6301ffc9a760e01b14905083613327565b6101a081019081106001600160401b0382111761096857604052565b60c081019081106001600160401b0382111761096857604052565b60a081019081106001600160401b0382111761096857604052565b90601f801991011681019081106001600160401b0382111761096857604052565b6001600160401b03811161096857601f01601f191660200190565b81601f8201121561022c578035906133e4826133b2565b926133f26040519485613391565b8284526020838301011161022c57816000926020809301838601378301015290565b90604060031983011261022c5760043591602435906001600160401b03821161022c57613443916004016133cd565b90565b600435906001600160a01b038216820361022c57565b602435906001600160a01b038216820361022c57565b9060068210156103ff5752565b9060088210156103ff5752565b60005b83811061349f5750506000910152565b818101518382015260200161348f565b906020916134c88151809281855285808601910161348c565b601f01601f1916010190565b9181601f8401121561022c578235916001600160401b03831161022c576020808501948460051b01011161022c57565b8054821015611455576000526003602060002091020190600090565b90600182811c92168015613550575b602083101461353a57565b634e487b7160e01b600052602260045260246000fd5b91607f169161352f565b906040519182600082549261356e84613520565b9081845260019485811690816000146135dd575060011461359a575b505061359892500383613391565b565b9093915060005260209081600020936000915b8183106135c55750506135989350820101388061358a565b855488840185015294850194879450918301916135ad565b91505061359894506020925060ff191682840152151560051b820101388061358a565b60068110156103ff576000526006602052604060002090565b60068110156103ff576000526007602052604060002090565b6020908160408183019282815285518094520193019160005b828110613659575050505090565b83518552938101939281019260010161364b565b80548210156114555760005260206000200190600090565b60243590811515820361022c57565b600090808252602090828252604092838120338252835260ff8482205416156136bd5750505050565b339084519260608401916001600160401b0392858110848211176138ba578752602a855285850191873684378551156138a65760308353855194600195861015613966576078602188015360295b86811161391057506138ce57908751936080850190858210908211176138ba578852604284528684019460603687378451156138a6576030865384518110156138a65790607860218601536041915b80831161384c5750505061380a576138069386936137ea936137db6048946137b29a519a8b957f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008c880152518092603788019061348c565b8401917001034b99036b4b9b9b4b733903937b6329607d1b60378401525180938684019061348c565b01036028810187520185613391565b5192839262461bcd60e51b8452600484015260248301906134af565b0390fd5b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f811660108110156138925761388b91906f181899199a1a9b1b9c1cb0b131b232b360811b901a61388186896139fb565b5360041c93613a0c565b919061375a565b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b60648789519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f811660108110156139525761394d91906f181899199a1a9b1b9c1cb0b131b232b360811b901a613943848b6139fb565b5360041c91613a0c565b61370b565b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b83526032600452602483fd5b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166139aa57505050565b80835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b9190820180921161121457565b908151811015611455570160200190565b8015611214576000190190565b15613a2057565b60405162461bcd60e51b8152602060048201526013602482015272105c1c1b1a58d85b9d081a5cc818985b9b9959606a1b6044820152606490fd5b60001981146112145760010190565b60068210156103ff5752565b9060088110156103ff57815460ff60a81b191660a89190911b60ff60a81b16179055565b600260015414613aab576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15613af757565b60405162461bcd60e51b815260206004820152601d60248201527f5265717569726573204c4943454e53455f4d414e4147455220726f6c650000006044820152606490fd5b15613b4357565b60405162461bcd60e51b815260206004820152601a60248201527f4170706c69636174696f6e20646f6573206e6f742065786973740000000000006044820152606490fd5b15613b8f57565b60405162461bcd60e51b8152602060048201526013602482015272105c1c1b1a58d85d1a5bdb8819195b195d1959606a1b6044820152606490fd5b15613bd157565b60405162461bcd60e51b81526020600482015260156024820152742737ba1030b8383634b1b0ba34b7b71037bbb732b960591b6044820152606490fd5b15613c1557565b606460405162461bcd60e51b815260206004820152602060248201527f526571756972657320434f4d504c49414e43455f4f46464943455220726f6c656044820152fd5b15613c6057565b60405162461bcd60e51b81526020600482015260126024820152714c6963656e7365206e6f742061637469766560701b6044820152606490fd5b91908110156114555760051b0190565b60068110156103ff5760038103613ce65750662386f26fc1000090818102918183041490151715611214576103e86001600160801b0391041690565b600414613cf35750600090565b6611c37937e0800090818102918183041490151715611214576103e86001600160801b0391041690565b90604051613d2a8161333f565b809280548252600181015460018060a01b03918282166020850152613d5860ff8360a01c1660408601613a6a565b60ff8260a81c169060088210156103ff576101809360ff9360059360608801526001600160401b03809160b01c166080880152600283015481811660a0890152818160401c1660c089015260801c1660e087015260038201541661010086015260048101546001600160801b03811661012087015260801c6101408601520154818116151561016085015260081c161515910152565b6001600160401b0381116109685760051b6020019056fe97f80153d7b772297c89aa05f5f9bba21ff2f387cf9323e6c8789815fc638cc561ccfb66066ba6446eb193969811c8e1df99e1d5b9eae29748c1d5be84b4d1af232f4dd324bbe0c242177e6d58d6413878093337c3edfc5dbd758a63fd3cbb6ca264697066735822122008b5624fcb11bf5497d726a00fdefb980d11f86e1d40e8f81d4575f756dac29464736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146132ec57508063082df41114610dd05780630be6e2c614612f9c5780631a40d39414612f625780631f2f4bfd14612c8f578063248a9ca314612c6057806325bc528c146128bc5780632b23fb0d146126c65780632f2ff15d14612613578063302fe97114611a4b578063324170e614611979578063338f5cc81461183157806336568abe1461179f5780633b510eee146115f35780634615352e1461155c57806348ad2ac2146115345780635171b458146114f55780635321c4fd1461137657806353e166c6146112f2578063581c091b146112c75780635d4111a71461126f5780635e7520271461100f5780636f9fb98a14610ff357806374b14d9a14610fb857806379a3391714610f8f57806388ef701114610e4e57806391d1485414610e01578063944d029114610dd0578063a217fddf14610db4578063aa375a8a14610d79578063ad3b1b4714610cb6578063b45f452714610aa6578063c468bfa4146109cc578063d2e61f18146105b3578063d547741f14610574578063da7e2cb2146104fc578063dfefadff14610415578063e705c2b814610398578063ed882851146102315763fa80b5ff146101d757600080fd5b3461022c57604036600319011261022c57600435600681101561022c57336000908152600080516020613e06833981519152602052604090205461021d9060ff16613af0565b61022960243591613600565b55005b600080fd5b3461022c5760208060031936011261022c576004356000526008815260406000209081549161025f83613dee565b9261026d6040519485613391565b8084528284018092600052836000206000915b83831061032b5750505050604051918083019381845251809452604083019360408160051b85010192916000955b8287106102bb5785850386f35b90919293828061031b600193603f198a820301865288516001600160401b03808251168352848201511684830152858060a01b0360408201511660408301526060808201511515908301526080809101519160a0809282015201906134af565b96019201960195929190926102ae565b60038660019260409998995161034081613376565b85546001600160401b0390818116835260401c168382015260ff85870154868060a01b038116604084015260a01c16151560608201526103826002870161355a565b6080820152815201920192019190959495610280565b3461022c57602036600319011261022c5760043560005260036020526103c16040600020613d1d565b60608101519060088210156103ff5760036020921490816103e8575b506040519015158152f35b6001600160401b03915060e00151164210826103dd565b634e487b7160e01b600052602160045260246000fd5b3461022c57602036600319011261022c5760043560005260036020526101a0604060002060ff815491600181015490600281015460018060a01b0392836003840154169160056004850154940154946040519788528216602088015261048360408801878460a01c16613472565b61049560608801878460a81c1661347f565b6001600160401b03809260b01c16608088015281811660a0880152818160401c1660c088015260801c1660e08601526101008501526001600160801b03811661012085015260801c610140840152818116151561016084015260081c161515610180820152f35b3461022c57604036600319011261022c57610572610518613446565b610520613685565b336000908152600080516020613e06833981519152602052604090205490919061054c9060ff16613af0565b60018060a01b0316600052600960205260406000209060ff801983541691151516179055565b005b3461022c57604036600319011261022c5761057260043561059361345c565b908060005260006020526105ae600160406000200154613694565b61397a565b3461022c57608036600319011261022c576004356105cf613685565b6001600160401b039060443582811161022c576105f09036906004016133cd565b6064359280841680940361022c573360009081527fca440bb5b4f276d246650b92ae261b87f0f2224864f13e13edcfda2aaca53102602090815260409091205490929060ff16801561099f575b61064690613c0e565b85151580610994575b61065890613b3c565b856000526003835260018060a01b039060019561067f838860406000200154161515613b88565b6040519061068c82613376565b84421682528582019081526040820133815260608301971597881595868252608085019586528b6000526008895260406000208054600160401b811015610968576106db918d82018155613504565b94909461097e5788610727918160029851166001600160401b03198854161787555116859067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b8a840192511682549160ff60a01b9051151560a01b16916affffffffffffffffffffff60a81b161717905501905192835190811161096857879361076b8354613520565b601f811161090f575b508590601f831160011461087f579180604094927f56fee222d9c6f14f38b45b01418211a2fd26417646952b6007a189a599421c309694600092610874575b5050600019600383901b1c191690891b1790555b81519033825285820152a2836000526003815260406000209180610858575b6107ec57005b7fdc9fcacd2006c7678363b02fba5b8f6cd86c3e895f2d4cabdcb6558da525a2eb9260609201600560a81b60ff60a81b19825416179055601c604051918083528201527f4661696c656420636f6d706c69616e636520696e7370656374696f6e000000006040820152a2005b5060ff8383015460a81c1660088110156103ff576003146107e6565b015190508b806107b3565b889291601f1983169185600052886000209260005b8a8282106108f6575050917f56fee222d9c6f14f38b45b01418211a2fd26417646952b6007a189a599421c3097959391856040989694106108dd575b505050811b0190556107c7565b015160001960f88460031b161c191690558b80806108d0565b8484015186558e9a508d97909501949384019301610894565b9091928094955060005285600020601f840160051c81019187851061095e575b8a969594939291601f8b920160051c01915b82811061094f575050610774565b600081558b97508a9101610941565b909150819061092f565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052600060045260246000fd5b50600254861061064f565b50600080516020613e2683398151915260009081528084526040808220338352855290205460ff1661063d565b3461022c57602036600319011261022c576004356000526004602052610a5c6040600020610aa26109fc8261355a565b91610a94610a0c6001830161355a565b91610a86610a1c6002830161355a565b610a78610a2b6003850161355a565b91610a6a610a476005610a406004890161355a565b970161355a565b976040519b8c9b60c08d5260c08d01906134af565b908b820360208d01526134af565b9089820360408b01526134af565b9087820360608901526134af565b9085820360808701526134af565b9083820360a08501526134af565b0390f35b3461022c5760208060031936011261022c57600435907fb938b4e8be78c5b3d6090a6dcee4f5257472278c0aaffb0b01bee86005dc1fee60005260008152604060002033600052815260ff604060002054168015610c89575b610b0890613c0e565b81151580610c7e575b610b1a90613b3c565b60008281526003825260409020600101546001600160a01b0390610b419082161515613b88565b610b49613a9a565b82600052600382526040600020600581019081549160ff8360081c1615610c485760018201549260ff8460a81c169360088510156103ff57600094859485948594600493610b9990600314613c59565b61ff0019169055015460801c958691165af13d15610c43573d610bbb816133b2565b90610bc96040519283613391565b81526000843d92013e5b15610c0857907fa82cc801d3441a544199a29213af59c68395a29ea31e3130a7badf410f166b6791604051908152a260018055005b60405162461bcd60e51b8152600481018390526013602482015272109bdb99081c995b19585cd94819985a5b1959606a1b6044820152606490fd5b610bd3565b60405162461bcd60e51b815260048101869052600e60248201526d139bc8189bdb99081c1bdcdd195960921b6044820152606490fd5b506002548210610b11565b50600080516020613e2683398151915260009081528082526040808220338352835290205460ff16610aff565b3461022c57604036600319011261022c576004356001600160a01b0381169081900361022c57336000908152600080516020613e0683398151915260205260409020546024359190610d0a9060ff16613af0565b478211610d3d5760008080938193828215610d34575bf115610d2857005b6040513d6000823e3d90fd5b506108fc610d20565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b3461022c57600036600319011261022c5760206040517fd8994f6d76f930dc5ea8c60e38e6334a87bb8539cc3082ac6828681c33316e3d8152f35b3461022c57600036600319011261022c57602060405160008152f35b3461022c57602036600319011261022c57600435600681101561022c57610df8602091613600565b54604051908152f35b3461022c57604036600319011261022c57610e1a61345c565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461022c57610e5c36613414565b3360009081527fca440bb5b4f276d246650b92ae261b87f0f2224864f13e13edcfda2aaca53102602090815260409091205490919060ff168015610f62575b610ea490613c0e565b82151580610f57575b610eb690613b3c565b6000838152600383526040902060010154610edb906001600160a01b03161515613b88565b826000526003825260016040600020019182549260ff8460a81c169360088510156103ff57610f2d60037fdc9fcacd2006c7678363b02fba5b8f6cd86c3e895f2d4cabdcb6558da525a2eb9614613c59565b60ff60a81b1916600560a81b179055604051818152918291610f5291908301906134af565b0390a2005b506002548310610ead565b50600080516020613e2683398151915260009081528083526040808220338352845290205460ff16610e9b565b3461022c57600036600319011261022c576020604051600080516020613e268339815191528152f35b3461022c57600036600319011261022c5760206040517fb938b4e8be78c5b3d6090a6dcee4f5257472278c0aaffb0b01bee86005dc1fee8152f35b3461022c57600036600319011261022c57602047604051908152f35b60208060031936011261022c57600435806000526003825260018060a01b0390611073600192611049818560406000200154163314613bca565b82151580611264575b61105b90613b3c565b82600052600385528360406000200154161515613b88565b61107b613a9a565b80600052600383526040600020928284015460ff8160a81c1660088110156103ff5760036110a99114613c59565b600285016001600160401b039182825460801c166276a6ff19810184811161121457841642111561122a5762278d000183811161121457831642116111dd5760ff903360005260098552611104826040600020541615613a19565b60a01c1661111181613600565b54861c3410611198577f641f1db3da55b0df612710b4b1d9cceba57bd7a3a2b900d7265b08c8c7068a2e94959661117e84611157611150600595613619565b54426139ee565b855467ffffffffffffffff60801b1916911660801b67ffffffffffffffff60801b16178455565b0161ff001981541690555460801c16604051908152a28055005b60405162461bcd60e51b815260048101859052601860248201527f496e73756666696369656e742072656e6577616c2066656500000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052600f60248201526e131a58d95b9cd948195e1c1a5c9959608a1b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b8152600481018690526012602482015271546f6f206561726c7920746f2072656e657760701b6044820152606490fd5b506002548310611052565b3461022c57604036600319011261022c57611288613446565b6001600160a01b031660009081526005602052604090208054602435919082101561022c576020916112b99161366d565b90546040519160031b1c8152f35b3461022c57600036600319011261022c57600254600019810190811161121457602090604051908152f35b3461022c5760208060031936011261022c576001600160a01b03611314613446565b1660005260058152604060002090604051908181845491828152019360005281600020916000905b82821061135f57610aa28561135381890382613391565b60405191829182613632565b83548652948501946001938401939091019061133c565b3461022c5760208060031936011261022c5760043560089182821015908161022c57600093600193600254945b85811061148857506113b486613dee565b956113c26040519788613391565b8087526113d1601f1991613dee565b01368488013760009360015b8681106113f25760405180610aa28a82613632565b60008181526003865260409020600101546001600160a01b03811615159083908261146b575b505061142d575b61142890613a5b565b6113dd565b9461143781613a5b565b9588518210156114555780866114289360051b8b010152905061141f565b634e487b7160e01b600052603260045260246000fd5b60a81c60ff1691506103ff57848110156103ff578314828a611418565b60008181526003855260409020600101546001600160a01b0381161515908690826114d8575b50506114c3575b6114be90613a5b565b6113a3565b956114d06114be91613a5b565b9690506114b5565b60a81c60ff1691506103ff57838110156103ff57821485896114ae565b3461022c57602036600319011261022c576001600160a01b03611516613446565b166000526009602052602060ff604060002054166040519015158152f35b3461022c57602036600319011261022c57600435600681101561022c57610df8602091613619565b3461022c57604036600319011261022c576024356004356000526008602052604060002090815481101561022c5761159391613504565b508054610aa26115aa60026001850154940161355a565b60ff6040519485946001600160401b0390818116875260401c16602086015260018060a01b038116604086015260a01c161515606084015260a0608084015260a08301906134af565b3461022c57604036600319011261022c576001600160401b0360043581811161022c576116249036906004016134d4565b909160243590811161022c5761163e9036906004016134d4565b336000908152600080516020613e068339815191526020908152604090912054909492919061166f9060ff16613af0565b8084036117615760005b84811061168257005b61168d818686613c9a565b356002541180611733575b6116ab575b6116a690613a5b565b611679565b6116b6818385613c9a565b35906008918281101561022c576116e7906116d2838989613c9a565b35600052600389526001604060002001613a76565b6116f2818787613c9a565b35916116ff828587613c9a565b359081101561022c576116a692611719604051809361347f565b600080516020613e46833981519152893393a3905061169d565b5061173f818686613c9a565b3560009081526003875260409020600101546001600160a01b03161515611698565b60405162461bcd60e51b8152600481018690526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b6044820152606490fd5b3461022c57604036600319011261022c576117b861345c565b336001600160a01b038216036117d4576105729060043561397a565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b3461022c5760208060031936011261022c576004357fb938b4e8be78c5b3d6090a6dcee4f5257472278c0aaffb0b01bee86005dc1fee60005260008252604060002033600052825260ff60406000205416801561194c575b61189290613c0e565b80151580611941575b6118a490613b3c565b60008181526003835260409020600101546118c9906001600160a01b03161515613b88565b6000526003815260016040600020019081549060ff8260a81c1660088110156103ff57600503611905575060ff60a81b1916600360a81b179055005b6064906040519062461bcd60e51b825260048201526015602482015274131a58d95b9cd9481b9bdd081cdd5cdc195b991959605a1b6044820152fd5b50600254811061189b565b50600080516020613e2683398151915260009081528083526040808220338352845290205460ff16611889565b3461022c57602036600319011261022c57336000908152600080516020613e0683398151915260205260409020546119b39060ff16613af0565b60043560005260036020526001604060002001805460ff8160a81c1660088110156103ff5760038114908115611a40575b50156119fb5760ff60a81b1916600560a81b179055005b60405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f7420706175736520696e2063757272656e742073746174650000006044820152606490fd5b6005915014836119e4565b60e036600319011261022c576006600435101561022c576024356001600160401b03811161022c57611a819036906004016133cd565b6044356001600160401b03811161022c57611aa09036906004016133cd565b906064356001600160401b03811161022c57611ac09036906004016133cd565b906084356001600160401b03811161022c57611ae09036906004016133cd565b9060a435916001600160801b038316830361022c5760c4356001600160401b03811161022c57611b149036906004016133cd565b90611b1d613a9a565b336000526009602052611b3860ff6040600020541615613a19565b611b43600435613600565b5434106125ce5760025494611b5786613a5b565b6002556003600435149687156125c2575b60405197611b758961333f565b8789523360208a0152611b8d60043560408b01613a6a565b600160608a01526001600160401b03421660808a0152600060a08a0152600060c08a0152600060e08a015260006101008a01526001600160801b0387166101208a015260006101408a01521515610160890152600061018089015260405194611bf58661335b565b855260208501526040840152606083015260808201526040518060208101106001600160401b0360208301111761096857602081016040526000815260a082015282600052600360205260406000208451815560018060a01b03602086015116600182015490604087015160068110156103ff576001600160a81b03199092161760a09190911b60ff60a01b1617600182015560608501519060088210156103ff57611ca660059260018301613a76565b608086015160018201805467ffffffffffffffff60b01b191660b09290921b67ffffffffffffffff60b01b1691909117905560a086015160028201805467ffffffffffffffff19166001600160401b0392831617815560c0880151611d6092611d339116829067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b60e0880151815467ffffffffffffffff60801b191660809190911b67ffffffffffffffff60801b16179055565b6101008601516003820180546001600160a01b0319166001600160a01b039290921691909117905561012086015161014087015160801b6fffffffffffffffffffffffffffffffff19166001600160801b039190911617600482015501611dda6101608601511515829060ff801983541691151516179055565b610180850151151561ff0082549160081b169061ff00191617905582600052600460205260406000209080518051906001600160401b038211610968578190611e238554613520565b601f8111612572575b50602090601f8311600114612506576000926124fb575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b038211610968578190611e7d6001860154613520565b601f81116124a8575b50602090601f83116001146124365760009261242b575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610968578190611eda6002860154613520565b601f81116123d8575b50602090601f83116001146123665760009261235b575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b038211610968578190611f376003860154613520565b601f8111612308575b50602090601f83116001146122965760009261228b575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b03821161096857611f926004850154613520565b601f8111612244575b50602090601f83116001146121d15760a0939291600091836121c6575b50508160011b916000199060031b1c19161760048401555b01518051906001600160401b03821161096857611ff06005840154613520565b601f811161217f575b50602090601f831160011461210f576005929160009183612104575b50508160011b916000199060031b1c1916179101555b336000526005602052604060002092835490600160401b8210156109685761205e8260209660016101609501815561366d565b81549060031b9086821b91600019901b191617905501516120bc575b5060405161208a81600435613472565b817f1360b2b6c1c6ea582f8a3495ecb18c213439139bc6afd0f1d00bea8e285e57ba843393a360018055604051908152f35b6120d46001600160801b036120fe9216600435613caa565b82600052600384526004604060002001906001600160801b0382549181199060801b169116179055565b8261207a565b015190508780612015565b906005840160005260206000209160005b601f19851681106121675750918391600193600595601f1981161061214e575b505050811b0191015561202b565b015160001960f88460031b161c19169055878080612140565b91926020600181928685015181550194019201612120565b600584016000526020600020601f840160051c8101602085106121bf575b601f830160051c820181106121b3575050611ff9565b6000815560010161219d565b508061219d565b015190508880611fb8565b906004850160005260206000209160005b601f198516811061222c575091839160019360a09695601f19811610612213575b505050811b016004840155611fd0565b015160001960f88460031b161c19169055888080612203565b919260206001819286850151815501940192016121e2565b600485016000526020600020601f840160051c810160208510612284575b601f830160051c82018110612278575050611f9b565b60008155600101612262565b5080612262565b015190508780611f57565b9250600385016000526020600020906000935b601f19841685106122ed576001945083601f198116106122d4575b505050811b016003830155611f6f565b015160001960f88460031b161c191690558780806122c4565b818101518355602094850194600190930192909101906122a9565b909150600385016000526020600020601f840160051c810160208510612354575b90849392915b601f830160051c82018110612345575050611f40565b6000815585945060010161232f565b5080612329565b015190508780611efa565b9250600285016000526020600020906000935b601f19841685106123bd576001945083601f198116106123a4575b505050811b016002830155611f12565b015160001960f88460031b161c19169055878080612394565b81810151835560209485019460019093019290910190612379565b909150600285016000526020600020601f840160051c810160208510612424575b90849392915b601f830160051c82018110612415575050611ee3565b600081558594506001016123ff565b50806123f9565b015190508780611e9d565b9250600185016000526020600020906000935b601f198416851061248d576001945083601f19811610612474575b505050811b016001830155611eb5565b015160001960f88460031b161c19169055878080612464565b81810151835560209485019460019093019290910190612449565b909150600185016000526020600020601f840160051c8101602085106124f4575b90849392915b601f830160051c820181106124e5575050611e86565b600081558594506001016124cf565b50806124c9565b015190508780611e43565b9250846000526020600020906000935b601f1984168510612557576001945083601f1981161061253e575b505050811b018255611e58565b015160001960f88460031b161c19169055878080612531565b81810151835560209485019460019093019290910190612516565b909150846000526020600020601f840160051c8101602085106125bb575b90849392915b601f830160051c820181106125ac575050611e2c565b60008155859450600101612596565b5080612590565b60048035149750611b68565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206c6963656e73652066656500000000000000006044820152606490fd5b3461022c57604036600319011261022c5760043561262f61345c565b816000526000602052612649600160406000200154613694565b81600052600060205260406000209060018060a01b0316908160005260205260ff604060002054161561267857005b8160005260006020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b60208060031936011261022c5760043590816000526003815261272960018060a01b036126fe81600160406000200154163314613bca565b831515806128b1575b61271090613b3c565b8360005260038352600160406000200154161515613b88565b612731613a9a565b8160005260038152604060002060ff600182015460a81c1660088110156103ff5760030361287557600581019081549060ff82161561283d5760ff8260081c16612802576004015460801c34106127bd5761ff0019166101001790556040513481527f644d2aa06d4f63348089f9438ef6246ed82252dd0eb4b3104a0679250983c5749190a260018055005b60405162461bcd60e51b815260048101849052601860248201527f496e73756666696369656e7420626f6e6420616d6f756e7400000000000000006044820152606490fd5b60405162461bcd60e51b8152600481018590526013602482015272109bdb9908185b1c9958591e481c1bdcdd1959606a1b6044820152606490fd5b60405162461bcd60e51b815260048101859052601060248201526f139bc8189bdb99081c995c5d5a5c995960821b6044820152606490fd5b60405162461bcd60e51b8152600481018390526014602482015273131a58d95b9cd9481b9bdd08185c1c1c9bdd995960621b6044820152606490fd5b506002548410612707565b3461022c57606036600319011261022c57600435602435600881101561022c576001600160401b039160443583811161022c576128fd9036906004016133cd565b336000908152600080516020613e0683398151915260209081526040909120549194909161292d9060ff16613af0565b82151580612c55575b61293f90613b3c565b82600052600380835260018060a01b03906001612966838260406000200154161515613b88565b8560005281855260406000209760048652604060002091808a019360ff855460a81c1660088110156103ff57828114908115612c4a575b5015612bf9576129ad8a86613a76565b60028b01805467ffffffffffffffff191642891690811782559b820180546001600160a01b031916331790559a938a8203612a9c575050505092877fafea0bea83ac009c0e92de7d70f0aa58a1ad051d1fccb33f54b084b7e86ad56b938693612a4c899a9b97600080516020613e468339815191529a989067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b612a638461115761115060ff855460a01c16613619565b5416600052600a83526040600020612a7b8154613a5b565b90555460801c16604051908152a25b612a97604051809561347f565b3393a3005b93509350949350975060048714612aca575b50505050600080516020613e4683398151915291929350612a8a565b60050192875192831161096857612ae18454613520565b601f8111612bb0575b508497601f8411600114612b3d57839291600080516020613e468339815191529798998492600095612b32575b50501b92600019911b1c19161790555b839291858080612aae565b015193508a80612b17565b909291601f1983169885600052866000209260005b8b8110612b9b575084600080516020613e46833981519152999a9b10612b81575b50505050811b019055612b27565b01519060f884600019921b161c1916905587808080612b73565b81830151855593860193918801918801612b52565b8460005285600020601f850160051c810191878610612bef575b601f0160051c019082905b828110612be3575050612aea565b60008155018290612bd5565b9091508190612bca565b60405162461bcd60e51b815260048101899052602360248201527f4170706c69636174696f6e206e6f7420696e2072657669657761626c6520737460448201526261746560e81b6064820152608490fd5b60029150148c61299d565b506002548310612936565b3461022c57602036600319011261022c5760043560005260006020526020600160406000200154604051908152f35b3461022c57602036600319011261022c576004356000610180604051612cb48161333f565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152826101608201520152606060a0604051612d0f8161335b565b8281528260208201528260408201528280820152826080820152015280151580612f57575b612d3d90613b3c565b600081815260036020526040902060010154612d63906001600160a01b03161515613b88565b600052600360205261018060406000206004602052610aa2612d89604060002092613d1d565b91612df1600560405192612d9c8461335b565b612da58161355a565b8452612db36001820161355a565b6020850152612dc46002820161355a565b6040850152612dd56003820161355a565b6060850152612de66004820161355a565b60808501520161355a565b60a08201526040519383859451855260018060a01b036020820151166020860152612e2460408201516040870190613472565b612e366060820151606087019061347f565b6001600160401b038060808301511660808701528060a08301511660a08701528060c08301511660c087015260e08201511660e086015260018060a01b03610100820151166101008601526001600160801b03806101208301511661012087015261014082015116610140860152610160810151151561016086015201511515610180840152612edc6101c0806101a086015260c08351918601526102808501906134af565b60a0612f44612f2f612f1a612f056020870151956101bf1996878b8303016101e08c01526134af565b6040870151868a8303016102008b01526134af565b606086015185898303016102208a01526134af565b608085015184888303016102408901526134af565b92015190848303016102608501526134af565b506002548110612d34565b3461022c57602036600319011261022c576001600160a01b03612f83613446565b16600052600a6020526020604060002054604051908152f35b3461022c57612faa36613414565b336000908152600080516020613e068339815191526020526040902054612fd39060ff16613af0565b811515806132e1575b612fe590613b3c565b60008281526003602052604090206001015461300b906001600160a01b03161515613b88565b81600052600360205260406000206004602052604060002090600181015460ff8160a81c1660088110156103ff57600381149081156132d6575b50156132915760ff60a81b1916600360a91b1760018201558251916001600160401b03831161096857849261307d6005830154613520565b601f8111613237575b506020601f821160011461319f57916005827f6ee3b31d44997c648df5e90862e4a006388f62a5305fc479c0d13958d1926a06979593610f529795600091613194575b508160011b916000199060031b1c1916179101555b60018101546001600160a01b03166000908152600a60205260409020805480613182575b505060058101805460ff8160081c1680613178575b613134575b505050506040519182916020835260208301906134af565b7fefea404e9c23a12458cbca8f4820d343a60870306fc6aae6f96f88010cb96ccc9260209260049261ff0019169055015460801c604051908152a28385808061311c565b5060ff8116613117565b61318b90613a0c565b90558680613102565b90508601518a6130c9565b6005830160005260206000209060005b601f198416811061321c5750600183610f529795936005937f6ee3b31d44997c648df5e90862e4a006388f62a5305fc479c0d13958d1926a069a9896601f19811610613203575b5050811b019101556130de565b88015160001960f88460031b161c191690558a806131f6565b878201518355889650600190920191602091820191016131af565b9091929350600583016000526020600020601f830160051c81019160208410613287575b90601f8896959493920160051c01905b8181106132785750613086565b6000815587955060010161326b565b909150819061325b565b60405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207265766f6b6520696e2063757272656e7420737461746500006044820152606490fd5b600591501486613045565b506002548210612fdc565b3461022c57602036600319011261022c576004359063ffffffff60e01b821680920361022c57602091637965db0b60e01b811490811561332e575b5015158152f35b6301ffc9a760e01b14905083613327565b6101a081019081106001600160401b0382111761096857604052565b60c081019081106001600160401b0382111761096857604052565b60a081019081106001600160401b0382111761096857604052565b90601f801991011681019081106001600160401b0382111761096857604052565b6001600160401b03811161096857601f01601f191660200190565b81601f8201121561022c578035906133e4826133b2565b926133f26040519485613391565b8284526020838301011161022c57816000926020809301838601378301015290565b90604060031983011261022c5760043591602435906001600160401b03821161022c57613443916004016133cd565b90565b600435906001600160a01b038216820361022c57565b602435906001600160a01b038216820361022c57565b9060068210156103ff5752565b9060088210156103ff5752565b60005b83811061349f5750506000910152565b818101518382015260200161348f565b906020916134c88151809281855285808601910161348c565b601f01601f1916010190565b9181601f8401121561022c578235916001600160401b03831161022c576020808501948460051b01011161022c57565b8054821015611455576000526003602060002091020190600090565b90600182811c92168015613550575b602083101461353a57565b634e487b7160e01b600052602260045260246000fd5b91607f169161352f565b906040519182600082549261356e84613520565b9081845260019485811690816000146135dd575060011461359a575b505061359892500383613391565b565b9093915060005260209081600020936000915b8183106135c55750506135989350820101388061358a565b855488840185015294850194879450918301916135ad565b91505061359894506020925060ff191682840152151560051b820101388061358a565b60068110156103ff576000526006602052604060002090565b60068110156103ff576000526007602052604060002090565b6020908160408183019282815285518094520193019160005b828110613659575050505090565b83518552938101939281019260010161364b565b80548210156114555760005260206000200190600090565b60243590811515820361022c57565b600090808252602090828252604092838120338252835260ff8482205416156136bd5750505050565b339084519260608401916001600160401b0392858110848211176138ba578752602a855285850191873684378551156138a65760308353855194600195861015613966576078602188015360295b86811161391057506138ce57908751936080850190858210908211176138ba578852604284528684019460603687378451156138a6576030865384518110156138a65790607860218601536041915b80831161384c5750505061380a576138069386936137ea936137db6048946137b29a519a8b957f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008c880152518092603788019061348c565b8401917001034b99036b4b9b9b4b733903937b6329607d1b60378401525180938684019061348c565b01036028810187520185613391565b5192839262461bcd60e51b8452600484015260248301906134af565b0390fd5b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f811660108110156138925761388b91906f181899199a1a9b1b9c1cb0b131b232b360811b901a61388186896139fb565b5360041c93613a0c565b919061375a565b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b60648789519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f811660108110156139525761394d91906f181899199a1a9b1b9c1cb0b131b232b360811b901a613943848b6139fb565b5360041c91613a0c565b61370b565b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b83526032600452602483fd5b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166139aa57505050565b80835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b9190820180921161121457565b908151811015611455570160200190565b8015611214576000190190565b15613a2057565b60405162461bcd60e51b8152602060048201526013602482015272105c1c1b1a58d85b9d081a5cc818985b9b9959606a1b6044820152606490fd5b60001981146112145760010190565b60068210156103ff5752565b9060088110156103ff57815460ff60a81b191660a89190911b60ff60a81b16179055565b600260015414613aab576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15613af757565b60405162461bcd60e51b815260206004820152601d60248201527f5265717569726573204c4943454e53455f4d414e4147455220726f6c650000006044820152606490fd5b15613b4357565b60405162461bcd60e51b815260206004820152601a60248201527f4170706c69636174696f6e20646f6573206e6f742065786973740000000000006044820152606490fd5b15613b8f57565b60405162461bcd60e51b8152602060048201526013602482015272105c1c1b1a58d85d1a5bdb8819195b195d1959606a1b6044820152606490fd5b15613bd157565b60405162461bcd60e51b81526020600482015260156024820152742737ba1030b8383634b1b0ba34b7b71037bbb732b960591b6044820152606490fd5b15613c1557565b606460405162461bcd60e51b815260206004820152602060248201527f526571756972657320434f4d504c49414e43455f4f46464943455220726f6c656044820152fd5b15613c6057565b60405162461bcd60e51b81526020600482015260126024820152714c6963656e7365206e6f742061637469766560701b6044820152606490fd5b91908110156114555760051b0190565b60068110156103ff5760038103613ce65750662386f26fc1000090818102918183041490151715611214576103e86001600160801b0391041690565b600414613cf35750600090565b6611c37937e0800090818102918183041490151715611214576103e86001600160801b0391041690565b90604051613d2a8161333f565b809280548252600181015460018060a01b03918282166020850152613d5860ff8360a01c1660408601613a6a565b60ff8260a81c169060088210156103ff576101809360ff9360059360608801526001600160401b03809160b01c166080880152600283015481811660a0890152818160401c1660c089015260801c1660e087015260038201541661010086015260048101546001600160801b03811661012087015260801c6101408601520154818116151561016085015260081c161515910152565b6001600160401b0381116109685760051b6020019056fe97f80153d7b772297c89aa05f5f9bba21ff2f387cf9323e6c8789815fc638cc561ccfb66066ba6446eb193969811c8e1df99e1d5b9eae29748c1d5be84b4d1af232f4dd324bbe0c242177e6d58d6413878093337c3edfc5dbd758a63fd3cbb6ca264697066735822122008b5624fcb11bf5497d726a00fdefb980d11f86e1d40e8f81d4575f756dac29464736f6c63430008140033",
  "devdoc": {
    "details": "Comprehensive license management for mineral supply chain",
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addComplianceInspection(uint256,bool,string,uint64)": {
        "details": "Add compliance inspection record"
      },
      "banApplicant(address,bool)": {
        "details": "Ban applicant from future applications"
      },
      "batchUpdateStatus(uint256[],uint8[])": {
        "details": "Batch update application statuses"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "postEnvironmentalBond(uint256)": {
        "details": "Post environmental bond for approved license"
      },
      "reinstateLicense(uint256)": {
        "details": "Reinstate a suspended license"
      },
      "releaseEnvironmentalBond(uint256)": {
        "details": "Release environmental bond (for compliance closure)"
      },
      "renewLicense(uint256)": {
        "details": "Renew an expiring license"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "reviewApplication(uint256,uint8,string)": {
        "details": "Review and approve/reject application"
      },
      "revokeLicense(uint256,string)": {
        "details": "Revoke a license permanently"
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "submitApplication(uint8,string,string,string,string,uint128,string)": {
        "details": "Submit a new license application"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "suspendLicense(uint256,string)": {
        "details": "Suspend a license for compliance issues"
      },
      "updateLicenseFee(uint8,uint256)": {
        "details": "Update license fees"
      }
    },
    "title": "MineralLicenseManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Handles applications, approvals, renewals, and compliance tracking",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 399,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7636,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "_nextApplicationId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7641,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "applications",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LicenseApplication)7609_storage)"
      },
      {
        "astId": 7646,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "applicationData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(ApplicationData)7622_storage)"
      },
      {
        "astId": 7651,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "applicantApplications",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7656,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "licenseFees",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(LicenseType)7571,t_uint256)"
      },
      {
        "astId": 7661,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "licenseDurations",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(LicenseType)7571,t_uint256)"
      },
      {
        "astId": 7667,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "complianceRecords",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_struct(ComplianceRecord)7633_storage)dyn_storage)"
      },
      {
        "astId": 7671,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "bannedApplicants",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7675,
        "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
        "label": "activeLicensesCount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ComplianceRecord)7633_storage)dyn_storage": {
        "base": "t_struct(ComplianceRecord)7633_storage",
        "encoding": "dynamic_array",
        "label": "struct MineralLicenseManager.ComplianceRecord[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ApplicationStatus)7580": {
        "encoding": "inplace",
        "label": "enum MineralLicenseManager.ApplicationStatus",
        "numberOfBytes": "1"
      },
      "t_enum(LicenseType)7571": {
        "encoding": "inplace",
        "label": "enum MineralLicenseManager.LicenseType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_enum(LicenseType)7571,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(LicenseType)7571",
        "label": "mapping(enum MineralLicenseManager.LicenseType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(ComplianceRecord)7633_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MineralLicenseManager.ComplianceRecord[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ComplianceRecord)7633_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(ApplicationData)7622_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MineralLicenseManager.ApplicationData)",
        "numberOfBytes": "32",
        "value": "t_struct(ApplicationData)7622_storage"
      },
      "t_mapping(t_uint256,t_struct(LicenseApplication)7609_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MineralLicenseManager.LicenseApplication)",
        "numberOfBytes": "32",
        "value": "t_struct(LicenseApplication)7609_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ApplicationData)7622_storage": {
        "encoding": "inplace",
        "label": "struct MineralLicenseManager.ApplicationData",
        "members": [
          {
            "astId": 7611,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "companyDetailsIPFS",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7613,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "projectDetailsIPFS",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7615,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "environmentalImpactIPFS",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 7617,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "financialCapabilityIPFS",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 7619,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "geographicArea",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 7621,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "rejectionReason",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ComplianceRecord)7633_storage": {
        "encoding": "inplace",
        "label": "struct MineralLicenseManager.ComplianceRecord",
        "members": [
          {
            "astId": 7624,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "inspectionDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 7626,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "nextInspectionDue",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 7628,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "inspector",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7630,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "passed",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 7632,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "findingsIPFS",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LicenseApplication)7609_storage": {
        "encoding": "inplace",
        "label": "struct MineralLicenseManager.LicenseApplication",
        "members": [
          {
            "astId": 7582,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "applicationId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7584,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "applicant",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7587,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "licenseType",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(LicenseType)7571"
          },
          {
            "astId": 7590,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "status",
            "offset": 21,
            "slot": "1",
            "type": "t_enum(ApplicationStatus)7580"
          },
          {
            "astId": 7592,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "submissionDate",
            "offset": 22,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 7594,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "reviewDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 7596,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "approvalDate",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 7598,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "expiryDate",
            "offset": 16,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 7600,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "reviewingOfficer",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7602,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "annualProductionLimit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 7604,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "bondAmount",
            "offset": 16,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 7606,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "requiresEnvironmentalBond",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 7608,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "bondPosted",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/modules/MineralLicenseManager.sol:MineralLicenseManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}