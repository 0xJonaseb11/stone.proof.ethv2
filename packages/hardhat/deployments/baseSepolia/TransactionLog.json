{
  "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "AddressDoesNotHaveRequiredRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DisputeResolution__AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeEscalated_UnableToVote",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeNotEscalated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeStatusNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__DisputeStatusNotPendingOrEscalated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeDefendantAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeDetails",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeEvidence",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidResolutionDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DisputeResolution__NotEligibleToVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__VotingPeriodStillActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "ERC20TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "InsufficientPermissionsToPerformAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccountAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPaymentMethods",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "currentStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attemptedStatus",
          "type": "string"
        }
      ],
      "name": "InvalidTransportStateTransition",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralNotReadyToTrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralRegistry__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralLocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralPurityPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralStorageConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidReceivingPartyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyAudited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyInspected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyPurchased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralNotAudited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralNotInspected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralRegistry__MineralNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__IncorrectETHAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidETHPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidMineralPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidNumberOfPrices",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidTokenPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralAlreadySold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotFoundInWarehouse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotRefined",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__MismatchedArrays",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__TokenNotAccepted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__UnacceptedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "MineralWarehouse__UnacceptedTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__UnauthorizedSeller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NotAssignedTransporter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AccountAlreadyHasRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AccountDoesNotHaveRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralPurityPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralStorageConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidReceivingPartyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyAudited",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyInspected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyPurchased",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyRefined",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        }
      ],
      "name": "RolesManager__MineralPurityPercentageTooLowToRegister",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RolesManager__NotTheAssignedBuyer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "SupplychainValidator__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplychainValidator__InvalidMineralOwnershipChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplychainValidator__InvalidMineralTransactionHistory",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Tokenization__CallerNotMineralTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__InvalidTokenIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__TokenAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__TokenIsAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "TransactionLog__InvalidOperationIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionLog__InvalidOperationType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "TransactionLog__InvalidTransactionIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "TransportRequestAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuditorRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuditorRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectorRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectorRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auditedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralStatus",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralInspected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchasedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ApprovedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectionDate",
          "type": "uint256"
        }
      ],
      "name": "MineralReadyToTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "refineryReport",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "refiner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refinedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralRefined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "miner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registeredAt",
          "type": "uint256"
        }
      ],
      "name": "MineralRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "transporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivingParty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "destination",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transportedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralTransported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "operationType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OperationRecorded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RefinerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RefinerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roleAssignedAt",
          "type": "uint256"
        }
      ],
      "name": "RoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "revoker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roleRevokedAt",
          "type": "uint256"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "transactionType",
          "type": "string"
        }
      ],
      "name": "TransactionRecorded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransporterRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransporterRoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BUYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSPECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSPORTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "_auditMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignRefiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignTransporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "checkAuditAndInspectionStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRoleCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refinerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transporterCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auditorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inspectorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyerCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "getMineralHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fieldChanged",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "updatedBy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct RolesManager.MineralHistory[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getOperation",
      "outputs": [
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "operationType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperationsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRolesForAddress",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "roles",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getTransaction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "transactionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "mineralId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "transactionType",
              "type": "string"
            }
          ],
          "internalType": "struct TransactionLog.Transaction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "getTransactionsByMineral",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "transactionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "mineralId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "transactionType",
              "type": "string"
            }
          ],
          "internalType": "struct TransactionLog.Transaction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAuditorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasBuyerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasInspectorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasMinerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRefinerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasTransporterRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "inspectMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "isMineralRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "mineralDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mineralType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "storageConditions",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "registeredBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "currentStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "currentLocation",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "currentHandler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRefined",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mineralHistories",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fieldChanged",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "purchaseMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "operationType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "recordOperation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "transactionType",
          "type": "string"
        }
      ],
      "name": "recordTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "refineMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_mineralType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_origin",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_purityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_storageConditions",
          "type": "string"
        }
      ],
      "name": "registerMineral",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeRefiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeTransporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receivingParty",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_destination",
          "type": "string"
        }
      ],
      "name": "transferMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
  "receipt": {
    "to": null,
    "from": "0x0dfDb5bBaEeCE3871f826DF1C6Fe24a2772f5d38",
    "contractAddress": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
    "transactionIndex": 30,
    "gasUsed": "5104877",
    "logsBloom": "0x008000040010000000000000000240000000000000040000100000100000005040102000000000000000800000004000010000000044000000000000000000000000000000000000000000000200000000000000000000004000000000200000000000800a1000000000000000000800000000000050100000000000008000000000000400000000000000000000000000000000000000000000000000220000000000020800004000100000000010000100000100000000001000000000400000800000000000000000000000000000000040000000000100000000000020000042000000000000000000000000000000000000001300000000000000000000",
    "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b",
    "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 192,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x458ea7e03b3466b3cf9bc2d66ddea8b11fe9469982816f42666888e6c8c6e664",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359ee",
        "logIndex": 193,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e72",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 194,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf559",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359ee",
        "logIndex": 195,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 196,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb3",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359ee",
        "logIndex": 197,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 198,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e092",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359ee",
        "logIndex": 199,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90e",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 200,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0xf8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e97505",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359ee",
        "logIndex": 201,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4d",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 202,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be751",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359ee",
        "logIndex": 203,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 204,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 33029511,
        "transactionHash": "0x1c8d6f1f265d17d764f66868abadf91db29e5382e745d3fe476d1106d36a2263",
        "address": "0x152085d5181117f7565AfC9ec70e0E668b7216B3",
        "topics": [
          "0x964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a6",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359ee",
        "logIndex": 205,
        "blockHash": "0x24453029c19bd918f8271c8cd2b747f3103d16a67f4072d7fcf1376a40c1ee2b"
      }
    ],
    "blockNumber": 33029511,
    "cumulativeGasUsed": "13089672",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7c3d72a177373b46b126c9cb9d71da65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"AddressDoesNotHaveRequiredRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DisputeResolution__AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeEscalated_UnableToVote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeNotEscalated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeStatusNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__DisputeStatusNotPendingOrEscalated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeDefendantAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeDetails\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeEvidence\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidResolutionDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DisputeResolution__NotEligibleToVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__VotingPeriodStillActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InsufficientPermissionsToPerformAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccountAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentMethods\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attemptedStatus\",\"type\":\"string\"}],\"name\":\"InvalidTransportStateTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralNotReadyToTrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralRegistry__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralLocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralPurityPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralStorageConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidReceivingPartyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyAudited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyInspected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralNotAudited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralNotInspected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralRegistry__MineralNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__IncorrectETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidETHPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidMineralPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidNumberOfPrices\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidTokenPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralAlreadySold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotFoundInWarehouse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotRefined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__MismatchedArrays\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__TokenNotAccepted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__UnacceptedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"MineralWarehouse__UnacceptedTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__UnauthorizedSeller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotAssignedTransporter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AccountAlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AccountDoesNotHaveRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralPurityPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralStorageConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidReceivingPartyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyAudited\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyInspected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyRefined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"}],\"name\":\"RolesManager__MineralPurityPercentageTooLowToRegister\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RolesManager__NotTheAssignedBuyer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"SupplychainValidator__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplychainValidator__InvalidMineralOwnershipChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplychainValidator__InvalidMineralTransactionHistory\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Tokenization__CallerNotMineralTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__InvalidTokenIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__TokenIsAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TransactionLog__InvalidOperationIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionLog__InvalidOperationType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionLog__InvalidTransactionIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"TransportRequestAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuditorRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuditorRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectorRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectorRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auditedAt\",\"type\":\"uint256\"}],\"name\":\"MineralAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralStatus\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"}],\"name\":\"MineralInspected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"name\":\"MineralPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ApprovedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectionDate\",\"type\":\"uint256\"}],\"name\":\"MineralReadyToTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"refineryReport\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refiner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refinedAt\",\"type\":\"uint256\"}],\"name\":\"MineralRefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"}],\"name\":\"MineralRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingParty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transportedAt\",\"type\":\"uint256\"}],\"name\":\"MineralTransported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OperationRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefinerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefinerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleAssignedAt\",\"type\":\"uint256\"}],\"name\":\"RoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleRevokedAt\",\"type\":\"uint256\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"transactionType\",\"type\":\"string\"}],\"name\":\"TransactionRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransporterRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransporterRoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSPORTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"_auditMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignRefiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"checkAuditAndInspectionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRoleCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refinerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transporterCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auditorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inspectorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"getMineralHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RolesManager.MineralHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOperation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"operationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRolesForAddress\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"transactionType\",\"type\":\"string\"}],\"internalType\":\"struct TransactionLog.Transaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"getTransactionsByMineral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"transactionType\",\"type\":\"string\"}],\"internalType\":\"struct TransactionLog.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasBuyerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasMinerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRefinerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasTransporterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"inspectMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"isMineralRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mineralDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"storageConditions\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"currentLocation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentHandler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefined\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mineralHistories\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"purchaseMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"operationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"recordOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transactionType\",\"type\":\"string\"}],\"name\":\"recordTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"refineMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_origin\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_storageConditions\",\"type\":\"string\"}],\"name\":\"registerMineral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeRefiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receivingParty\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_destination\",\"type\":\"string\"}],\"name\":\"transferMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"_auditMineral(string,string)\":{\"details\":\"only the auditor can audit mineralDetails.Logs audit report on every successful audit.\",\"params\":{\"mineralId\":\"The ID of the mineral under audition.\",\"report\":\"The audit status report of the mineral under audition.\"}},\"checkAuditAndInspectionStatus(string)\":{\"details\":\"checks audit and inspection status\",\"params\":{\"mineralId\":\"The ID of the mineral to check for audit and inspection status Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\"}},\"getAllRoleCounts()\":{\"details\":\"Returns all role counts in a single call\",\"returns\":{\"auditorCount\":\"Number of auditors\",\"buyerCount\":\"Number of buyers\",\"inspectorCount\":\"Number of inspectors\",\"minerCount\":\"Number of miners\",\"refinerCount\":\"Number of refiners\",\"transporterCount\":\"Number of transporters\"}},\"getOperation(uint256)\":{\"details\":\"retrieves operations using operation index Returns An arrray containing operation.actor, operationType, mineralId and timestamp\"},\"getOperationsCount()\":{\"details\":\"get track of number of operations done\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have a specific role\",\"params\":{\"role\":\"The role to query member count for\"},\"returns\":{\"count\":\"The number of accounts with the role\"}},\"getRolesForAddress(address)\":{\"details\":\"Returns all roles assigned to a given address\",\"params\":{\"account\":\"The address to check roles for\"},\"returns\":{\"roles\":\"An array of role names the address has\"}},\"getTransaction(uint256)\":{\"details\":\"retrieves transactions using transactionID\",\"returns\":{\"_0\":\"transactions using specified transactionId\"}},\"getTransactionsByMineral(string)\":{\"details\":\"retrieve transactions using mineralIDs\",\"returns\":{\"_0\":\"results of transactions with specified mineralIDs\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasMinerRole(address)\":{\"details\":\"Roles helper functionschecks if an account has a specific role\",\"params\":{\"account\":\"The address of the account to checked with role association\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"inspectMineral(string,string)\":{\"details\":\"only the inspector can inspect mineralDetailsLogs audit report on every successful inspection\",\"params\":{\"mineralId\":\"The ID of the mineral under inspection\",\"report\":\"The inspection status report of the mineral under inspection\"}},\"isMineralRegistered(string)\":{\"details\":\"checks if a mineral with the given ID is registered\",\"params\":{\"mineralId\":\"the ID of the mineral to check\"},\"returns\":{\"_0\":\"A boolean indicating whether the mineral is registered or not\"}},\"purchaseMineral(string)\":{\"details\":\"Only the buyer can purchase mineralDetails\",\"params\":{\"mineralId\":\"The ID of the mineral under purchase\"}},\"recordOperation(address,string,string)\":{\"details\":\"records operation in the supply chain\"},\"recordTransaction(address,string,string)\":{\"details\":\"records a transaction\"},\"refineMineral(string,string)\":{\"details\":\"only the refiner can refiner a mineral\",\"params\":{\"mineralId\":\"The ID of the mineral under refinery\"}},\"registerMineral(string,string,uint256,string,uint256,string)\":{\"details\":\"Register a new mineral - only by miner.Every mineral is assigned a unique mineralId.\",\"params\":{\"_mineralType\":\"The type of a mineral.\",\"_name\":\"Mineral name.\",\"_origin\":\"Mineral Origin.\",\"_purityPercentage\":\"Mineral purity in percentage.\",\"_storageConditions\":\"Mineral Storage conditions.\",\"_weight\":\"Mineral weight in uint256.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferMineral(string,address,string,string)\":{\"details\":\"only the transporter can transport mineralDetails\",\"params\":{\"_destination\":\"The Destination area of the mineral(string)\",\"_origin\":\"The Original location of the mineral under transportation\",\"_receivingParty\":\"The address of the destination portal\",\"mineralId\":\"The ID of the mineral under transportation\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_auditMineral(string,string)\":{\"notice\":\"Emits MineralAudited event.\"},\"inspectMineral(string,string)\":{\"notice\":\"Emits MineralInspected event on successful inspection\"},\"purchaseMineral(string)\":{\"notice\":\"Emits MineralPurchased event on successful purchase\"},\"recordOperation(address,string,string)\":{\"notice\":\"Emits OperationRecorded even on successful record\"},\"recordTransaction(address,string,string)\":{\"notice\":\"Emits TransactionRecorded event on successful transaction recording\"},\"refineMineral(string,string)\":{\"notice\":\"Emits MineralRefined event on successfl refining process\"},\"registerMineral(string,string,uint256,string,uint256,string)\":{\"notice\":\"Emits MineralRegistered event on successful registration.\"},\"transferMineral(string,address,string,string)\":{\"notice\":\"Emits MineralTransported on successful transportation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/logs/TransactionLog.sol\":\"TransactionLog\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title RolesManager contract\\n * @author @0xJonaseb11\\n * It acts as the factory of all the roles in the whole supplychain\\n * It is where all the roles in the chain are assigned and granted. No any other contract can handle that\\n *\\n * It is a Modular contract\\n */\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\n\\ncontract RolesManager is AccessControl, Errors {\\n    /*/////////////////////////////////////////////////////\\n                           SUPPLYCHAIN ROLES\\n            /////////////////////////////////////////////////////*/\\n    bytes32 public constant MINER_ROLE = keccak256(\\\"MINER_ROLE\\\");\\n    bytes32 public constant REFINER_ROLE = keccak256(\\\"REFINER_ROLE\\\");\\n    bytes32 public constant TRANSPORTER_ROLE = keccak256(\\\"TRANSPORTER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTOR_ROLE\\\");\\n    bytes32 public constant BUYER_ROLE = keccak256(\\\"BUYER_ROLE\\\");\\n\\n    /*//////////////////////////////////////////////////////\\n                                 EVENTS\\n        //////////////////////////////////////////////////////*/\\n    event RoleAssigned(address indexed account, bytes32 indexed role, uint256 roleAssignedAt);\\n    event RoleRevoked(bytes32 role, address account, address revoker, uint256 roleRevokedAt);\\n\\n    event MineralRegistered(\\n        string mineralId,\\n        string mineralName,\\n        string mineralType,\\n        string origin,\\n        uint256 weight,\\n        uint256 purityPercentage,\\n        address indexed miner,\\n        uint256 registeredAt\\n    );\\n    event MineralRefined(string mineralId, string refineryReport, address indexed refiner, uint256 refinedAt);\\n    event MineralTransported(\\n        string mineralId,\\n        address indexed transporter,\\n        address receivingParty,\\n        string origin,\\n        string destination,\\n        uint256 transportedAt\\n    );\\n    event MineralInspected(string mineralId, string mineralStatus, address indexed inspector, uint256 inspectedAt);\\n    event MineralAudited(string mineralId, string status, address indexed auditor, uint256 auditedAt);\\n    event MineralPurchased(string mineralId, address indexed buyer, uint256 purchasedAt);\\n    event MineralReadyToTrade(string mineralId, address indexed ApprovedBy, string status, uint256 inspectionDate);\\n\\n    // For every assigned role\\n    event MinerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event RefinerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event TransporterRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event AuditorRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event InspectorRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event BuyerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event AdminRoleAssigned(address indexed assignee, uint256 timestamp);\\n    // For every revoked role\\n    event MinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event RefinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event TransporterRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event AuditorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event InspectorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event BuyerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event AdminRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n\\n    struct MineralDetails {\\n        string id;\\n        string name;\\n        string origin;\\n        string mineralType;\\n        uint256 weight;\\n        uint256 purityPercentage;\\n        string storageConditions;\\n        address registeredBy;\\n        string currentStatus;\\n        string currentLocation;\\n        address currentHandler;\\n        bool isPurchased;\\n        bool isRefined;\\n        bool isAudited;\\n        bool isInspected;\\n        uint256 timestamp;\\n    }\\n\\n    struct MineralHistory {\\n        string id;\\n        string fieldChanged;\\n        string newValue;\\n        address updatedBy;\\n        uint256 timestamp;\\n    }\\n\\n    uint256 private nonce = block.timestamp + block.number;\\n    mapping(string => MineralDetails) public mineralDetails;\\n    mapping(string => MineralHistory[]) public mineralHistories;\\n    mapping(bytes32 => uint256) public roleMemberCount;\\n\\n    // Set the deployer as the admin\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        roleMemberCount[DEFAULT_ADMIN_ROLE] = 1;\\n        emit AdminRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(MINER_ROLE, msg.sender);\\n        roleMemberCount[MINER_ROLE] = 1;\\n        emit MinerRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(AUDITOR_ROLE, msg.sender);\\n        roleMemberCount[AUDITOR_ROLE] = 1;\\n        emit AuditorRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(INSPECTOR_ROLE, msg.sender);\\n        roleMemberCount[INSPECTOR_ROLE] = 1;\\n        emit InspectorRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(BUYER_ROLE, msg.sender);\\n        roleMemberCount[BUYER_ROLE] = 1;\\n        emit BuyerRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(REFINER_ROLE, msg.sender);\\n        roleMemberCount[REFINER_ROLE] = 1;\\n        emit RefinerRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(TRANSPORTER_ROLE, msg.sender);\\n        roleMemberCount[TRANSPORTER_ROLE] = 1;\\n        emit TransporterRoleAssigned(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev checks if sender has specific role\\n     */\\n    modifier restrictedToRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) {\\n            revert InsufficientPermissionsToPerformAction(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyNonZeroAddress(address account) {\\n        if (account == address(0)) {\\n            revert InvalidAccountAddress();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyValidMineralId(string memory mineralId) {\\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\\n            revert InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ATTENTION HERE - CHECKING VALIDITY OF A MINERAL\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\        \\n    //////////////////////////////////////////////////////////////*/\\n    modifier onlyValidMineral(string memory mineralId) virtual {\\n        if (!isMineralRegistered(mineralId) || bytes(mineralId).length == 0) {\\n            revert InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        _;\\n    }\\n\\n    /*////////////////////////////////////////////////////\\n            =====================================================\\n            ///////// ROLE-BASED FUNCTIONALITY FUNCTIONS ////////\\n            ====================================================\\n            //////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ================================================================\\n                              MINING ENTERPRISE PORTAL\\n        =================================================================\\n       //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Register a new mineral - only by miner.\\n     * @dev Every mineral is assigned a unique mineralId.\\n     * @param _name Mineral name.\\n     * @param _mineralType The type of a mineral.\\n     * @param _weight Mineral weight in uint256.\\n     * @param _origin Mineral Origin.\\n     * @param _purityPercentage Mineral purity in percentage.\\n     * @param _storageConditions Mineral Storage conditions.\\n     * @notice Emits MineralRegistered event on successful registration.\\n     */\\n    function registerMineral(\\n        string memory _name,\\n        string memory _mineralType,\\n        uint256 _weight,\\n        string memory _origin,\\n        uint256 _purityPercentage,\\n        string memory _storageConditions\\n    ) external virtual restrictedToRole(MINER_ROLE) returns (string memory) {\\n        if (bytes(_name).length == 0) revert RolesManager__InvalidMineralName();\\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\\n\\n        if (bytes(_mineralType).length == 0) revert RolesManager__InvalidMineralType();\\n\\n        if (_weight == 0) revert RolesManager__InvalidMineralWeight();\\n\\n        if (_purityPercentage == 0 || _purityPercentage > 100) revert RolesManager__InvalidMineralPurityPercentage();\\n\\n        if (_purityPercentage <= 80) revert RolesManager__MineralPurityPercentageTooLowToRegister(_purityPercentage);\\n\\n        if (bytes(_storageConditions).length == 0) revert RolesManager__InvalidMineralStorageConditions();\\n\\n        string memory mineralId = _generateHashedMineralId(_mineralType);\\n\\n        mineralDetails[mineralId] = MineralDetails({\\n            id: mineralId,\\n            name: _name,\\n            origin: _origin,\\n            mineralType: _mineralType,\\n            weight: _weight,\\n            purityPercentage: _purityPercentage,\\n            storageConditions: _storageConditions,\\n            registeredBy: msg.sender,\\n            currentStatus: \\\"Raw\\\",\\n            currentLocation: \\\"Mining Center\\\",\\n            currentHandler: msg.sender,\\n            isPurchased: false,\\n            isRefined: false,\\n            isAudited: false,\\n            isInspected: false,\\n            timestamp: block.timestamp\\n        });\\n\\n        // record initial mineral history\\n        mineralHistories[mineralId].push(\\n            MineralHistory({\\n                id: mineralId,\\n                fieldChanged: \\\"Registered\\\",\\n                newValue: string(abi.encodePacked(\\\"Origin: \\\", _origin)),\\n                updatedBy: msg.sender,\\n                timestamp: block.timestamp\\n            })\\n        );\\n\\n        emit MineralRegistered(\\n            mineralId,\\n            _name,\\n            _mineralType,\\n            _origin,\\n            _weight,\\n            _purityPercentage,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        return mineralId;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                              PROCESSING ENTERPRISE\\n        ===============================================================                    \\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*///////////////////////////////////////////////\\n                              REFINER\\n        ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the refiner can refiner a mineral\\n     * @param mineralId The ID of the mineral under refinery\\n     * @notice Emits MineralRefined event on successfl refining process\\n     */\\n    function refineMineral(string memory mineralId, string memory report) public restrictedToRole(REFINER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isRefined == true) revert RolesManager__MineralAlreadyRefined(mineralId);\\n\\n        mineralDetails[mineralId].isRefined = true;\\n\\n        emit MineralRefined(mineralId, report, msg.sender, block.timestamp);\\n    }\\n\\n    /*////////////////////////////////////////////////\\n                              TRANSPORTER\\n          ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the transporter can transport mineralDetails\\n     * @param mineralId The ID of the mineral under transportation\\n     * @param _receivingParty The address of the destination portal\\n     * @param _origin The Original location of the mineral under transportation\\n     * @param _destination The Destination area of the mineral(string)\\n     * @notice Emits MineralTransported on successful transportation\\n     */\\n    function transferMineral(\\n        string memory mineralId,\\n        address _receivingParty,\\n        string memory _origin,\\n        string memory _destination\\n    ) public virtual restrictedToRole(TRANSPORTER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (_receivingParty == address(0)) revert RolesManager__InvalidReceivingPartyAddress();\\n\\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\\n\\n        if (bytes(_destination).length == 0) revert RolesManager__InvalidMineralDestination();\\n\\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\\n\\n        mineralDetails[mineralId].currentHandler = msg.sender;\\n\\n        emit MineralTransported(mineralId, msg.sender, _receivingParty, _origin, _destination, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                     SUPPLYCHAIN VALIDATION PORTAL\\n        ===============================================================\\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*///////////////////////////////////////////////\\n                               INSPECTOR\\n            ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the inspector can inspect mineralDetails\\n     * @param mineralId The ID of the mineral under inspection\\n     * @param report The inspection status report of the mineral under inspection\\n     * @notice Emits MineralInspected event on successful inspection\\n     * @dev Logs audit report on every successful inspection\\n     */\\n    function inspectMineral(string memory mineralId, string memory report) public restrictedToRole(INSPECTOR_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isInspected == true) revert RolesManager__MineralAlreadyInspected(mineralId);\\n\\n        mineralDetails[mineralId].isInspected = true;\\n\\n        emit MineralInspected(mineralId, report, msg.sender, block.timestamp);\\n\\n        /*//////////////////////////////////////////////////\\n                          HANDLE INSPECTION REPORTING\\n           ///////////////////////////////////////////////////*/\\n    }\\n\\n    /*/////////////////////////////////////////////\\n                               AUDITOR\\n            ////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the auditor can audit mineralDetails.\\n     * @dev Logs audit report on every successful audit.\\n     * @param mineralId The ID of the mineral under audition.\\n     * @param report The audit status report of the mineral under audition.\\n     * @notice Emits MineralAudited event.\\n     */\\n    function _auditMineral(\\n        string memory mineralId,\\n        string memory report\\n    ) public /*virtual*/ restrictedToRole(AUDITOR_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isAudited == true) revert RolesManager__MineralAlreadyAudited(mineralId);\\n\\n        mineralDetails[mineralId].isAudited = true;\\n\\n        emit MineralAudited(mineralId, report, msg.sender, block.timestamp);\\n\\n        /*//////////////////////////////////////////////////\\n                          HANDLE AUDIT REPORTING\\n           ///////////////////////////////////////////////////*/\\n    }\\n\\n    /**\\n     * @dev Only the buyer can purchase mineralDetails\\n     * @param mineralId The ID of the mineral under purchase\\n     * @notice Emits MineralPurchased event on successful purchase\\n     */\\n    function purchaseMineral(string memory mineralId) public restrictedToRole(BUYER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\\n\\n        (bool isAudited, bool isInspected) = checkAuditAndInspectionStatus(mineralId);\\n\\n        if (!(isAudited && isInspected)) revert RolesManager__MineralNotMarketReady(mineralId);\\n\\n        // require(mineralDetails[mineralId].currentHandler == msg.sender, \\\"You are not the assigned buyer for this mineral!!\\\");\\n\\n        mineralDetails[mineralId].isPurchased = true;\\n        mineralDetails[mineralId].currentHandler = msg.sender;\\n\\n        emit MineralPurchased(mineralId, msg.sender, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     ROLESMANAGER HELPER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ADMIN FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ////////////////////////////////////////////////\\n    /////// ROLEMANAGEMENT FUNCTIONS ////////////////\\n    ////////////////////////////////////////////////\\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n\\n    /*////////////////////////////////////////////////////\\n                  ROLE MANAGEMENT FUNCTIONS\\n    ////////////////////////////////////////////////////*/\\n\\n    function assignMiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasMinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(MINER_ROLE, account);\\n        roleMemberCount[MINER_ROLE]++;\\n        emit MinerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignRefiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasRefinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(REFINER_ROLE, account);\\n        roleMemberCount[REFINER_ROLE]++;\\n        emit RefinerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignTransporter(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasTransporterRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(TRANSPORTER_ROLE, account);\\n        roleMemberCount[TRANSPORTER_ROLE]++;\\n        emit TransporterRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignAuditor(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasAuditorRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(AUDITOR_ROLE, account);\\n        roleMemberCount[AUDITOR_ROLE]++;\\n        emit AuditorRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignInspector(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasInspectorRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(INSPECTOR_ROLE, account);\\n        roleMemberCount[INSPECTOR_ROLE]++;\\n        emit InspectorRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignBuyer(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasBuyerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(BUYER_ROLE, account);\\n        roleMemberCount[BUYER_ROLE]++;\\n        emit BuyerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n\\n    function revokeMiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasMinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(MINER_ROLE, account);\\n        if (roleMemberCount[MINER_ROLE] > 0) {\\n            roleMemberCount[MINER_ROLE]--;\\n        }\\n        emit MinerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeRefiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRefinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(REFINER_ROLE, account);\\n\\n        if (roleMemberCount[REFINER_ROLE] > 0) {\\n            roleMemberCount[REFINER_ROLE]--;\\n        }\\n        emit RefinerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeTransporter(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasTransporterRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(TRANSPORTER_ROLE, account);\\n        if (roleMemberCount[TRANSPORTER_ROLE] > 0) {\\n            roleMemberCount[TRANSPORTER_ROLE]--;\\n        }\\n        emit TransporterRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeInspector(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasInspectorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(INSPECTOR_ROLE, account);\\n        if (roleMemberCount[INSPECTOR_ROLE] > 0) {\\n            roleMemberCount[INSPECTOR_ROLE]--;\\n        }\\n        emit InspectorRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeAuditor(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasAuditorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(AUDITOR_ROLE, account);\\n        if (roleMemberCount[AUDITOR_ROLE] > 0) {\\n            roleMemberCount[AUDITOR_ROLE]--;\\n        }\\n        emit AuditorRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeBuyer(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasBuyerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(BUYER_ROLE, account);\\n        if (roleMemberCount[BUYER_ROLE] > 0) {\\n            roleMemberCount[BUYER_ROLE]--;\\n        }\\n        emit BuyerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    /*/////////////////////////////////////////////////////\\n                  NEW ROLE COUNT FUNCTIONS\\n    /////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the number of accounts that have a specific role\\n     * @param role The role to query member count for\\n     * @return count The number of accounts with the role\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256 count) {\\n        if (!isValidRole(role)) revert RolesManager__InvalidRole();\\n        return roleMemberCount[role];\\n    }\\n\\n    /**\\n     * @dev Returns all role counts in a single call\\n     * @return minerCount Number of miners\\n     * @return refinerCount Number of refiners\\n     * @return transporterCount Number of transporters\\n     * @return auditorCount Number of auditors\\n     * @return inspectorCount Number of inspectors\\n     * @return buyerCount Number of buyers\\n     */\\n    function getAllRoleCounts()\\n        public\\n        view\\n        returns (\\n            uint256 minerCount,\\n            uint256 refinerCount,\\n            uint256 transporterCount,\\n            uint256 auditorCount,\\n            uint256 inspectorCount,\\n            uint256 buyerCount\\n        )\\n    {\\n        return (\\n            roleMemberCount[MINER_ROLE],\\n            roleMemberCount[REFINER_ROLE],\\n            roleMemberCount[TRANSPORTER_ROLE],\\n            roleMemberCount[AUDITOR_ROLE],\\n            roleMemberCount[INSPECTOR_ROLE],\\n            roleMemberCount[BUYER_ROLE]\\n        );\\n    }\\n\\n    // ... (keep all your existing functions below this point) ...\\n    // Only modification needed is to ensure the _setupRole function also increments counters:\\n    function _setupRole(bytes32 role, address account) internal override {\\n        _grantRole(role, account);\\n\\n        roleMemberCount[role]++;\\n    }\\n\\n    /**\\n     * @dev Revokes role from an account - onlydmin\\n     * @param account The address of the account to be revoked role by the admin\\n     * @notice Emits event of the revoked role\\n     */\\n\\n    /*/////////////////////////////////////////////////////\\n   ====================================================\\n            HELPER FUNCTIONS SECTION\\n   ====================================================\\n   /////////////////////////////////////////////////////*/\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE OWNERSHIP CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Returns all roles assigned to a given address\\n     * @param account The address to check roles for\\n     * @return roles An array of role names the address has\\n     */\\n    function getRolesForAddress(\\n        address account\\n    ) public view onlyNonZeroAddress(account) returns (string[] memory roles) {\\n        // Count how many roles the address has\\n        uint256 roleCount = 0;\\n\\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) roleCount++;\\n        if (hasRole(MINER_ROLE, account)) roleCount++;\\n        if (hasRole(REFINER_ROLE, account)) roleCount++;\\n        if (hasRole(TRANSPORTER_ROLE, account)) roleCount++;\\n        if (hasRole(AUDITOR_ROLE, account)) roleCount++;\\n        if (hasRole(INSPECTOR_ROLE, account)) roleCount++;\\n        if (hasRole(BUYER_ROLE, account)) roleCount++;\\n\\n        // Initialize array with the counted size\\n        roles = new string[](roleCount);\\n        uint256 index = 0;\\n\\n        // Populate the array with role names\\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) {\\n            roles[index] = \\\"ADMIN\\\";\\n            index++;\\n        }\\n        if (hasRole(MINER_ROLE, account)) {\\n            roles[index] = \\\"MINER\\\";\\n            index++;\\n        }\\n        if (hasRole(REFINER_ROLE, account)) {\\n            roles[index] = \\\"REFINER\\\";\\n            index++;\\n        }\\n        if (hasRole(TRANSPORTER_ROLE, account)) {\\n            roles[index] = \\\"TRANSPORTER\\\";\\n            index++;\\n        }\\n        if (hasRole(AUDITOR_ROLE, account)) {\\n            roles[index] = \\\"AUDITOR\\\";\\n            index++;\\n        }\\n        if (hasRole(INSPECTOR_ROLE, account)) {\\n            roles[index] = \\\"INSPECTOR\\\";\\n            index++;\\n        }\\n        if (hasRole(BUYER_ROLE, account)) {\\n            roles[index] = \\\"BUYER\\\";\\n            index++;\\n        }\\n\\n        return roles;\\n    }\\n\\n    // function _setupRole(bytes32 role, address account) internal virtual {\\n    //     __grantRole(role, account);\\n    // }\\n\\n    /**\\n     ** @dev Roles helper functions\\n     * @dev checks if an account has a specific role\\n     * @param account The address of the account to checked with role association\\n     */\\n    function hasMinerRole(address account) public view returns (bool) {\\n        return hasRole(MINER_ROLE, account);\\n    }\\n    function hasRefinerRole(address account) public view returns (bool) {\\n        return hasRole(REFINER_ROLE, account);\\n    }\\n    function hasTransporterRole(address account) public view returns (bool) {\\n        return hasRole(TRANSPORTER_ROLE, account);\\n    }\\n    function hasInspectorRole(address account) public view returns (bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n    function hasAuditorRole(address account) public view returns (bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n    function hasBuyerRole(address account) public view returns (bool) {\\n        return hasRole(BUYER_ROLE, account);\\n    }\\n    function hasAdminRole(address account) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    // Helper function to validate the role\\n    function isValidRole(bytes32 role) private pure returns (bool) {\\n        return\\n            role == MINER_ROLE ||\\n            role == REFINER_ROLE ||\\n            role == TRANSPORTER_ROLE ||\\n            role == AUDITOR_ROLE ||\\n            role == INSPECTOR_ROLE ||\\n            role == BUYER_ROLE;\\n    }\\n\\n    /**\\n    * @dev checks audit and inspection status\\n    * @param mineralId The ID of the mineral to check for audit and inspection status\\n\\n    * Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\\n    */\\n    function checkAuditAndInspectionStatus(\\n        string memory mineralId\\n    ) public virtual restrictedToRole(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert RolesManager__InvalidMineralIdOrNotFound();\\n        }\\n\\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\\n            emit MineralReadyToTrade(mineralId, msg.sender, \\\"TradingReady\\\", block.timestamp);\\n        } else {\\n            revert RolesManager__MineralNotMarketReady(mineralId);\\n        }\\n\\n        isAudited = mineralDetails[mineralId].isAudited;\\n        isInspected = mineralDetails[mineralId].isInspected;\\n\\n        return (isAudited, isInspected);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            GETTERS - For Traceability\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getMineralHistory(string memory mineralId) public view virtual returns (MineralHistory[] memory) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert RolesManager__InvalidMineralIdOrNotFound();\\n        }\\n\\n        return mineralHistories[mineralId];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n    ===============================================================\\n         MINERAL REGISTRATION HELPER FUNCTIONS SECTION\\n    ===============================================================\\n    ////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev checks if a mineral with the given ID is registered\\n     * @param mineralId the ID of the mineral to check\\n     * @return A boolean indicating whether the mineral is registered or not\\n     */\\n    function isMineralRegistered(string memory mineralId) public virtual returns (bool) {\\n        if (bytes(mineralId).length == 0) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\\n            revert MineralRegistry__MineralNotRegistered(mineralId);\\n        }\\n\\n        return true;\\n    }\\n\\n    //////////////////////////////////////////////////////\\n    //////// GENERATE HASHED MINERALID FOR UNIQUENESS/////\\n    //////////////////////////////////////////////////////\\n    function _generateHashedMineralId(string memory mineralType) internal returns (string memory) {\\n        bytes32 fullHash = keccak256(abi.encodePacked(mineralType, msg.sender, block.timestamp, nonce++));\\n\\n        // Convert first 4 bytes (8 hex characters) into hex string with \\\"0x\\\"\\n        bytes memory shortHex = new bytes(10); // 2 for \\\"0x\\\", 8 for hex chars\\n        shortHex[0] = \\\"0\\\";\\n        shortHex[1] = \\\"x\\\";\\n        for (uint i = 0; i < 4; i++) {\\n            shortHex[2 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] >> 4));\\n            shortHex[3 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] & 0x0f));\\n        }\\n\\n        return string(abi.encodePacked(mineralType, \\\"-\\\", string(shortHex)));\\n    }\\n\\n    // helper: convert nibble to hex char (0-9, a-f)\\n    function _nibbleToHexChar(uint8 nibble) internal pure returns (bytes1) {\\n        return nibble < 10 ? bytes1(nibble + 0x30) : bytes1(nibble + 0x61 - 10);\\n    }\\n\\n    ///////////////////////////////////////////////\\n    //////// getting all registered minerals /////\\n    // //////////////////////////////////////////////\\n    // function getAllRegisteredMineral() public view returns(MineralDetails[] memory mineralDetails) {\\n    //     return mineralDetails;\\n\\n    // }\\n}\\n\",\"keccak256\":\"0x987f06a5daf816abdb2f33f8ff50dcf18b6f1f6e557580abd2745b9af333f490\",\"license\":\"MIT\"},\"contracts/logs/TransactionLog.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title TransactionLog\\n * @author @0xJonaseb11\\n * It keeps track of all the operations, transactions perfomed in the whole supply chain\\n * Helps to keep track of actities in the chain to enforce traceability\\n */\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\n\\ncontract TransactionLog is Errors, RolesManager {\\n    RolesManager private rolesManager;\\n\\n    // events to enforce transparency n traceability\\n    event TransactionRecorded(\\n        uint256 indexed transactionId,\\n        address indexed sender,\\n        address indexed receiver,\\n        string mineralId,\\n        uint256 timestamp,\\n        string transactionType\\n    );\\n    event OperationRecorded(address indexed actor, string operationType, string mineralId, uint256 timestamp);\\n\\n    struct Transaction {\\n        uint256 transactionId;\\n        address sender;\\n        address receiver;\\n        string mineralId;\\n        uint256 timestamp;\\n        string transactionType;\\n    }\\n\\n    /**\\n     * @dev operations to help in supplychainValidation contract\\n     */\\n    struct Operation {\\n        address actor;\\n        string operationType;\\n        string mineralId;\\n        uint256 timestamp;\\n    }\\n\\n    Operation[] private operations;\\n\\n    mapping(uint256 => Transaction) private transactions;\\n    uint256 private nextTransactionId = 1;\\n\\n    modifier onlyAuthorizedRoles() {\\n        if (\\n            !hasRole(MINER_ROLE, msg.sender) ||\\n            !hasRole(TRANSPORTER_ROLE, msg.sender) ||\\n            !hasRole(AUDITOR_ROLE, msg.sender) ||\\n            !hasRole(INSPECTOR_ROLE, msg.sender) ||\\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender)\\n        ) revert InsufficientPermissionsToPerformAction(msg.sender);\\n        _;\\n    }\\n\\n    // setters\\n\\n    /**\\n     * @dev records operation in the supply chain\\n     * @notice Emits OperationRecorded even on successful record\\n     */\\n    function recordOperation(\\n        address actor,\\n        string memory operationType,\\n        string memory mineralId\\n    ) external onlyAuthorizedRoles onlyNonZeroAddress(actor) onlyValidMineralId(mineralId) {\\n        if (bytes(operationType).length == 0) revert TransactionLog__InvalidOperationType();\\n\\n        Operation memory newOperation = Operation({\\n            actor: actor,\\n            operationType: operationType,\\n            mineralId: mineralId,\\n            timestamp: block.timestamp\\n        });\\n        operations.push(newOperation);\\n\\n        emit OperationRecorded(actor, operationType, mineralId, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev records a transaction\\n     * @notice Emits TransactionRecorded event on successful transaction recording\\n     */\\n\\n    function recordTransaction(\\n        address receiver,\\n        string memory mineralId,\\n        string memory transactionType\\n    ) public onlyAuthorizedRoles onlyValidMineralId(mineralId) onlyNonZeroAddress(receiver) {\\n        if (bytes(transactionType).length == 0) revert TransactionLog__InvalidOperationType();\\n\\n        uint256 transactionId = nextTransactionId++;\\n        transactions[transactionId] = Transaction({\\n            transactionId: transactionId,\\n            sender: msg.sender,\\n            receiver: receiver,\\n            mineralId: mineralId,\\n            timestamp: block.timestamp,\\n            transactionType: transactionType\\n        });\\n\\n        emit TransactionRecorded(transactionId, msg.sender, receiver, mineralId, block.timestamp, transactionType);\\n    }\\n\\n    // getters\\n\\n    /**\\n     * @dev retrieves operations using operation index\\n     * Returns An arrray containing operation.actor, operationType, mineralId and timestamp\\n     */\\n    function getOperation(\\n        uint256 index\\n    ) external view returns (address actor, string memory operationType, string memory mineralId, uint256 timestamp) {\\n        if (index == 0 || index > operations.length) revert TransactionLog__InvalidOperationIndex(index);\\n\\n        Operation memory operation = operations[index]; // \\u2705 Now safe to access\\n\\n        return (operation.actor, operation.operationType, operation.mineralId, block.timestamp);\\n    }\\n    /**\\n     * @dev get track of number of operations done\\n     */\\n    function getOperationsCount() external view returns (uint256) {\\n        return operations.length;\\n    }\\n\\n    /**\\n     * @dev retrieves transactions using transactionID\\n     * @return transactions using specified transactionId\\n     */\\n    function getTransaction(uint256 transactionId) public view returns (Transaction memory) {\\n        if (transactions[transactionId].transactionId == transactionId || transactionId == 0)\\n            revert TransactionLog__InvalidTransactionIdOrNotFound(transactionId);\\n\\n        return transactions[transactionId];\\n    }\\n\\n    /**\\n     * @dev retrieve transactions using mineralIDs\\n     * @return results of transactions with specified mineralIDs\\n     */\\n    function getTransactionsByMineral(\\n        string memory mineralId\\n    ) public view onlyValidMineralId(mineralId) returns (Transaction[] memory) {\\n        uint256 count = 0;\\n\\n        for (uint256 i = 1; i < nextTransactionId; i++) {\\n            if (keccak256(bytes(transactions[i].mineralId)) == keccak256(bytes(mineralId))) {\\n                count++;\\n            }\\n        }\\n\\n        Transaction[] memory results = new Transaction[](count);\\n        uint256 index = 0;\\n        for (uint256 i = 1; i < nextTransactionId; i++) {\\n            if (keccak256(bytes(transactions[i].mineralId)) == keccak256(bytes(mineralId))) {\\n                results[index] = transactions[i];\\n                index++;\\n            }\\n        }\\n\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x4b25c021ac073573581f79f5d6db24095e958b3c90a6d474ac28896f18b791c0\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract Errors {\\n    /*//////////////////////////////////////////////////////////////\\n                        MINERALREGISTRY__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error MineralRegistry__MineralNotRegistered(string mineralId);\\n    error MineralRegistry__MineralAlreadyPurchased();\\n    error MineralRegistry__MineralAlreadyAudited();\\n    error MineralRegistry__MineralAlreadyInspected();\\n    error MineralRegistry__MineralNotAudited();\\n    error MineralRegistry__MineralNotInspected();\\n\\n    error MineralRegistry__InvalidMineralDetails();\\n    error MineralRegistry__InvalidMineralIdOrNotFound(string mineralId);\\n    error MineralRegistry__InvalidMineralStatus();\\n    error MineralRegistry__InvalidMineralName();\\n    error MineralRegistry__InvalidMineralOrigin();\\n    error MineralRegistry__InvalidMineralType();\\n    error MineralRegistry__InvalidMineralWeight();\\n    error MineralRegistry__InvalidMineralPurityPercentage();\\n    error MineralRegistry__InvalidMineralStorageConditions();\\n    error MineralRegistry__InvalidMineralLocation();\\n    error MineralRegistry__InvalidReceivingPartyAddress();\\n    error MineralRegistry__InvalidMineralDestination();\\n\\n    error MineralNotReadyToTrade(string mineralId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ROLESMANAGER__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n    error RolesManager__MineralAlreadyRefined(string mineralId);\\n    error RolesManager__MineralAlreadyPurchased(string mineralId);\\n    error RolesManager__MineralAlreadyInspected(string mineralId);\\n    error RolesManager__MineralAlreadyAudited(string mineralId);\\n    error RolesManager__NotTheAssignedBuyer(address caller);\\n\\n    error RolesManager__InvalidMineralName();\\n    error RolesManager__InvalidMineralOrigin();\\n    error RolesManager__InvalidMineralDestination();\\n\\n    error RolesManager__MineralNotMarketReady(string mineralId);\\n\\n    error RolesManager__InvalidMineralIdOrNotFound();\\n    error RolesManager__InvalidMineralType();\\n    error RolesManager__InvalidReceivingPartyAddress();\\n    error RolesManager__InvalidMineralStorageConditions();\\n    error RolesManager__InvalidMineralPurityPercentage();\\n    error RolesManager__MineralPurityPercentageTooLowToRegister(uint256 purityPercentage);\\n    error RolesManager__InvalidMineralWeight();\\n\\n    error RolesManager__InvalidAddress();\\n    error RolesManager__InvalidRole();\\n\\n    // Roles Assignment and revocation\\n    error RolesManager__AccountAlreadyHasRole();\\n    error RolesManager__AccountDoesNotHaveRole();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            DISPUTERESOLUTION__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n    error DisputeResolution__InvalidMineralIdOrNotFound();\\n    error DisputeResolution__InvalidDisputeDefendantAddress();\\n    error DisputeResolution__InvalidDisputeDetails();\\n    error DisputeResolution__InvalidDisputeEvidence();\\n    error DisputeResolution__InvalidDisputeIdOrNotFound();\\n    error DisputeResolution__InvalidResolutionDetails();\\n    error DisputeResolution__DisputeStatusNotPendingOrEscalated();\\n    error DisputeResolution__DisputeStatusNotPending(uint256 disputeId);\\n    error DisputeResolution__NotEligibleToVote(address caller);\\n    error DisputeResolution__AlreadyVoted(address caller);\\n    error DisputeResolution__DisputeEscalated_UnableToVote(uint256 disputeId);\\n    error DisputeResolution__VotingPeriodStillActive();\\n    error DisputeResolution__DisputeNotEscalated(uint256 disputeId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MINERALWAREHOUSE__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error MineralWarehouse__InvalidTokenAddress(address tokenAddress);\\n    error MineralWarehouse__MineralNotRefined(string mineralId);\\n    error MineralWarehouse__InvalidNumberOfPrices();\\n    error MineralWarehouse__UnacceptedToken(address tokenAddress);\\n    error MineralWarehouse__UnacceptedTokens(address[] tokenAddresses);\\n    error MineralWarehouse__MineralNotMarketReady(string mineralId);\\n    error MineralWarehouse__InvalidMineralPrice();\\n    error MineralWarehouse__MineralAlreadySold(string mineralId);\\n    error MineralWarehouse__UnauthorizedSeller(address seller);\\n    error MineralNotMarketReady(string mineralId);\\n    error MineralWarehouse__IncorrectETHAmount();\\n    error MineralWarehouse__ETHTransferFailed();\\n    error MineralWarehouse__InvalidTokenPrice();\\n\\n    error MineralWarehouse__MismatchedArrays();\\n    error MineralWarehouse__InvalidETHPrice();\\n    error MineralWarehouse__TokenNotAccepted(address tokenAddress);\\n\\n    error MineralWarehouse__MineralNotFoundInWarehouse(string mineralId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            TOKENISATION__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error Tokenization__TokenAlreadyExists(uint256 tokenId);\\n    error Tokenization__TokenIsAlreadyMinted(uint256 tokenId);\\n    error Tokenization__InvalidTokenIdOrNotFound(uint256 tokenId);\\n    error Tokenization__CallerNotMineralTokenOwner(uint256 tokenId, address caller);\\n    error Tokenization__InvalidTokenId(uint256 tokenId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            TRANSACTIONlOG__CUSTOM ERRORS\\n       //////////////////////////////////////////////////////////////*/\\n    error TransactionLog__InvalidOperationType();\\n    error TransactionLog__InvalidOperationIndex(uint256 index);\\n    error TransactionLog__InvalidTransactionIdOrNotFound(uint256 transactionId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        SUPPLYCHAINVALIDATOR__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error SupplychainValidator__InvalidMineralIdOrNotFound(string mineralId);\\n    error SupplychainValidator__InvalidMineralTransactionHistory();\\n    error SupplychainValidator__InvalidMineralOwnershipChain();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             GLOBAL ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n    error InvalidAccountAddress();\\n    error ERC20TokenTransferFailed(address token, uint256 tokenAmount);\\n    error InvalidPaymentMethods();\\n    error InvalidMineralIdOrNotFound(string mineralId);\\n    error InsufficientPermissionsToPerformAction(address caller);\\n\\n    /////////////////////////////////////\\n    // LOGISTICS MANAGER ERRORS /////////\\n    /////////////////////////////////////\\n    error TransportRequestAlreadyExists(string mineralId);\\n    error AddressDoesNotHaveRequiredRole(address caller, bytes32 role);\\n    error NotAssignedTransporter(string mineralId, address caller);\\n    error InvalidTransportStateTransition(string currentStatus, string attemptedStatus);\\n}\\n\",\"keccak256\":\"0x9b1b8d0828a0d7960988398eef2b8605af3485151b661a3bc695eb4362b00e38\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604090808252346200058c5743420190814211620005765760019182556000808052602091818352848220338352835260ff808684205416156200053f575b828052600491828552868420908154916000199283811462000419578801905584805283865286888620554281527f458ea7e03b3466b3cf9bc2d66ddea8b11fe9469982816f42666888e6c8c6e664863392a27fa952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7280855284865287852033865286528288862054161562000508575b80855283865287852080548381146200041957880190558452828552858785205586514281527f593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf559863392a27f59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5808552848652878520338652865282888620541615620004d1575b80855283865287852080548381146200041957880190558452828552858785205586514281527f4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb3863392a27f273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c08085528486528785203386528652828886205416156200049a575b80855283865287852080548381146200041957880190558452828552858785205586514281527f49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e092863392a27ff8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90e80855284865287852033865286528288862054161562000463575b80855283865287852080548381146200041957880190558452828552858785205586514281527ff8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e97505863392a27fa977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4d8085528486528785203386528652828886205416156200042c575b80855283865287852080548381146200041957880190558452828552858785205586514281527f4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be751863392a27fddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3918285528486528785203386528652878520541615620003e2575b818452828552868420908154908114620003cf578601905582528252839020829055825142815233917f964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a691a26008555161540b9081620005928239f35b634e487b7160e01b855260118452602485fd5b81845283855286842033855285528684208660ff198254161790553333836000805160206200599d8339815191528780a462000372565b634e487b7160e01b875260118652602487fd5b80855284865287852033865286528785208760ff198254161790553333826000805160206200599d8339815191528880a4620002eb565b80855284865287852033865286528785208760ff198254161790553333826000805160206200599d8339815191528880a462000264565b80855284865287852033865286528785208760ff198254161790553333826000805160206200599d8339815191528880a4620001dd565b80855284865287852033865286528785208760ff198254161790553333826000805160206200599d8339815191528880a462000156565b80855284865287852033865286528785208760ff198254161790553333826000805160206200599d8339815191528880a4620000cf565b82805282845285832033845284528583208560ff198254161790553333846000805160206200599d8339815191528180a462000040565b634e487b7160e01b600052601160045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146147b1575080630958fc2d146147085780630dacad2e1461465f578063126ee3381461432a578063202e392414614235578063248a9ca3146142065780632f2ff15d14614153578063309514df146140df57806333ea3dc814613ffa5780633499c3a214613faa57806335ba620714613ea457806336568abe14613e125780633a7adea514612c1f578063480d1dd314612b765780634ca85d34146126f95780634e2a3109146126005780634eabbe77146125d75780635aee1b15146123b45780636377741d1461230b5780636394f6e6146122e25780636e1d616e146122b957806370e22e421461226957806375a2b0d41461209557806379451cd71461206c5780637a01a1da146120435780637ae9c16014611fcf5780637cde2b9914611ec45780637f3c990814611c49578063826fe0f514611a2457806383c4865c1461155a5780638850845f1461150a57806391d14854146114bd57806399691194146113bf5780639b188dd61461134b578063a217fddf1461132f578063a917601b14611286578063abaa536f14611236578063ac851dfd14611164578063b6ba1ca714611138578063b9c5b83314611013578063beae461514610fb1578063c395fcb314610f61578063ca15c87314610e77578063cc82b09014610d60578063d547741f14610d1f578063dd1033f814610d01578063de7ce39114610c9f578063df422bf214610778578063e3a3c5221461074f578063e438fdf8146106db578063f17f3523146104d3578063f5716a85146103ae5763fc1032eb1461026657600080fd5b346103a9576102743661495b565b61027c614ca4565b61028582614be6565b156103975761032d7f93e936184fad9f80c7000aa987f91be0cd621bacde11839fdc7139f3d9c2407b9160008051602061537683398151915280600052602090600082526102da600160406000200154614e87565b600081815280835260408082206001600160a01b0390981680835297845290205460ff1661034a575b600052600481526040600020805480610338575b5050604051928392604084526040840190614936565b9042908301520390a2005b6103419061500b565b90553880610317565b80600052600082526040600020866000528252604060002060ff1981541690553386827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b600080a4610303565b604051632ac1560560e21b8152600490fd5b600080fd5b346103a9576103bc3661495b565b6103c4614ca4565b6103cd82614c11565b156103975761032d7f4614600adaea632b1e4c381ad24471dab7b587dca104c8dd4da76bc64f19716f916000805160206153968339815191528060005260209060008252610422600160406000200154614e87565b600081815280835260408082206001600160a01b0390981680835297845290205460ff16610486575b600052600481526040600020805480610474575050604051928392604084526040840190614936565b61047d9061500b565b90558580610317565b80600052600082526040600020866000528252604060002060ff1981541690553386827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b600080a461044b565b346103a95760803660031901126103a9576001600160401b036004358181116103a9576105049036906004016148bd565b9061050d61481a565b906044358181116103a9576105269036906004016148bd565b906064359081116103a95761053f9036906004016148bd565b906000805160206152b683398151915260005260209260008452604060002033600052845260ff60406000205416156106c3576001600160a01b031680156106b15781511561069f5782511561068d57604051600160ff600a8851938881818c01966105ac81838a614913565b81016002815203019020015460a01c161515146106675793610658939261064a92600a610607847f55b00b3c29344a545244b18d70b135e423405427088bd5425f13d690b82310b4998b604051938492839251928391614913565b8101600281520301902001336001600160601b0360a01b8254161790556106396040519860a08a5260a08a0190614936565b928801528682036040880152614936565b908482036060860152614936565b914260808201528033930390a2005b604051632072bb0160e11b815260048101869052806106896024820189614936565b0390fd5b604051635dbef47560e01b8152600490fd5b6040516326813e6f60e01b8152600490fd5b60405163bea3fd2f60e01b8152600490fd5b604051630568555f60e41b8152336004820152602490fd5b346103a9576106e93661495b565b6106f1614ca4565b6106fa82614c79565b156103975761032d7f352e14c53d161e2481e65145b53265d1608f979a93a06df66d4c99b2a84ddc63916000805160206152d68339815191528060005260209060008252610422600160406000200154614e87565b346103a95760003660031901126103a95760206040516000805160206152d68339815191528152f35b346103a9576020806003193601126103a9576001600160a01b0361079a614804565b168015610c8d576000906000805260008352604060002081600052835260ff8060406000205416610c84575b60008051602061535683398151915291826000526000855260406000208160005285528160406000205416610c74575b600080516020615396833981519152806000526000865260406000208260005286528260406000205416610c64575b6000805160206152b6833981519152806000526000875260406000208360005287528360406000205416610c54575b600080516020615376833981519152806000526000885260406000208460005288528460406000205416610c44575b6000805160206152d683398151915291826000526000895260406000208560005289528560406000205416610c34575b600080516020615336833981519152938460005260008a526040600020866000528a528660406000205416610c24575b6108ec8961514e565b986108fa6040519a8b61489c565b808a52610909601f199161514e565b018a8a60005b838110610c1357505050506000976000805260008b526040600020876000528b528760406000205416610bd8575b60005260008a526040600020866000528a528660406000205416610b9b575b6000526000895260406000208560005289528560406000205416610b5c575b6000526000885260406000208460005288528460406000205416610b19575b6000526000875260406000208360005287528360406000205416610ada575b6000526000865260406000208260005286528260406000205416610a99575b60005260008552604060002090600052845260406000205416610a56575b506040519082820192808352815180945260408301938160408260051b8601019301916000955b828710610a2a5785850386f35b909192938280610a46600193603f198a82030186528851614936565b9601920196019592919092610a1d565b610a9290604051610a6681614881565b6005815264212aaca2a960d91b85820152610a818285615172565b52610a8c8184615172565b5061513f565b50826109f6565b92610ad490604051610aaa81614881565b600981526824a729a822a1aa27a960b91b88820152610ac98288615172565b52610a8c8187615172565b926109d8565b93610b1390604051610aeb81614881565b600781526620aaa224aa27a960c91b89820152610b088289615172565b52610a8c8188615172565b936109b9565b94610b5690604051610b2a81614881565b600b81526a2a2920a729a827a92a22a960a91b8a820152610b4b828a615172565b52610a8c8189615172565b9461099a565b95610b9590604051610b6d81614881565b60078152662922a324a722a960c91b8b820152610b8a828b615172565b52610a8c818a615172565b9561097b565b96610bd290604051610bac81614881565b600581526426a4a722a960d91b8c820152610bc7828c615172565b52610a8c818b615172565b9661095c565b9750604051610be681614881565b600581526420a226a4a760d91b8b820152610c008a615165565b52610c0a89615165565b5060019761093d565b606083828194010152018b9061090f565b97610c2e9061513f565b976108e3565b96610c3e9061513f565b966108b3565b95610c4e9061513f565b95610883565b94610c5e9061513f565b94610854565b93610c6e9061513f565b93610825565b92610c7e9061513f565b926107f6565b600192506107c6565b60405163200db56f60e11b8152600490fd5b346103a95760203660031901126103a957610cb8614804565b6001600160a01b031660009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602090815260409182902054915160ff9092161515825290f35b346103a95760003660031901126103a9576020600654604051908152f35b346103a95760403660031901126103a957610d5e600435610d3e61481a565b90806000526000602052610d59600160406000200154614e87565b614f86565b005b346103a9576020806003193601126103a957610d7a614804565b6001600160a01b03811691908215610c8d57610d9d90610d98614ca4565b614c79565b610e65577f49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e092906000805160206152d68339815191528060005260008252604060002084600052825260ff6040600020541615610e15575b600052600481526040600020610e0a815461513f565b9055604051428152a2005b806000526000825260406000208460005282526040600020600160ff198254161790553384827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4610df4565b6040516314726de560e21b8152600490fd5b346103a95760203660031901126103a95760043560008051602061535683398151915281148015610f4a575b8015610f33575b8015610f1c575b8015610f05575b8015610eee575b15610edc5760005260046020526020604060002054604051908152f35b604051636b9c461160e01b8152600490fd5b506000805160206153368339815191528114610ebf565b506000805160206152d68339815191528114610eb8565b506000805160206153768339815191528114610eb1565b506000805160206152b68339815191528114610eaa565b506000805160206153968339815191528114610ea3565b346103a95760203660031901126103a957610f7a614804565b6001600160a01b031660009081526000805160206153b6833981519152602090815260409182902054915160ff9092161515825290f35b346103a95760203660031901126103a957610fca614804565b6001600160a01b031660009081527ff3fa603c74bfe2a4719960e47343678c3dc690d2b27a2295acc6fc430833aaf9602090815260409182902054915160ff9092161515825290f35b346103a95760003660031901126103a957600460209081527f973ccc145476ef147b966a44694f8b2d26bac5a3d44a844fec6be696fe5fea70547f02ff85b9f193a3a7824cbaf5a79db262c0bac955152adf2752c6413d76b2d3c7547f0e08e55c6329ca2d4f38429c472032b4e97537c869a64c376bb7e702721eb8c3547fa792fa383e6bd9c6b4465bbfd8031f4b47377210fa121067c03906e9afac6246547f9d423956391424a558206d539d4c7b96f2596f9d71b6fe92efe1f071a870ba94546000805160206153368339815191526000527f5455ba4b8a75b33fa0f1f7affd9817680912f06b7b194bcf9ac01183c4930020546040805196875296860194909452948401919091526060830152608082019290925260a081019190915260c090f35b346103a95760203660031901126103a95760043560005260046020526020604060002054604051908152f35b346103a9576020806003193601126103a9576004356001600160401b0381116103a9576111959036906004016148bd565b805115611213576040516111cf6111d68351928581818701956111b9818389614913565b8101600281520301902060405192838092614a4f565b038261489c565b8381519101209082519020036111f0575060405160018152f35b906106896040519283926311bb0bc960e31b845260048401526024830190614936565b9061068960405192839263f855236d60e01b845260048401526024830190614936565b346103a95760203660031901126103a95761124f614804565b6001600160a01b03166000908152600080516020615276833981519152602090815260409182902054915160ff9092161515825290f35b346103a9576020806003193601126103a9576112a0614804565b6001600160a01b03811691908215610c8d576112c3906112be614ca4565b614c4e565b610e65577f964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a6906000805160206152b68339815191528060005260008252604060002084600052825260ff6040600020541615610e1557600052600481526040600020610e0a815461513f565b346103a95760003660031901126103a957602060405160008152f35b346103a9576113593661495b565b611361614ca4565b61136a82614ba9565b156103975761032d7f69e94e373f69f3f945457a07b335722310788af9cd459a33df6f72cc9e964043916000805160206153368339815191528060005260209060008252610422600160406000200154614e87565b346103a9576113cd36614b3b565b336000908152600080516020615296833981519152602090815260409091205491929160ff16156106c357604051600160ff600a85519385818189019661141581838a614913565b81016002815203019020015460b81c1615151461149a5791600a611469611495937f3a9eebd240f4c9f631531ebc672c4c040de483b868ccebe8a3a1fdad70cde0d995604051809381928751928391614913565b8101600281520301902001600160b81b60ff60b81b198254161790556040519182913395429184615111565b0390a2005b50610689604051928392636f5f944160e11b845260048401526024830190614936565b346103a95760403660031901126103a9576114d661481a565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346103a95760203660031901126103a957611523614804565b6001600160a01b03166000908152600080516020615296833981519152602090815260409182902054915160ff9092161515825290f35b346103a95761156836614ae5565b3360009081526000805160206152f6833981519152602052604090205490919060ff161580156119fd575b80156119d6575b80156119af575b8015611988575b6106c3576040516111cf6115ca835192602081818701956111b9818389614913565b60208151910120908251902003611963576001600160a01b039083821615610c8d5782511561195157600854916116008361513f565b60085560405161160f8161484b565b8381526020810133815260408201838816815260608301908582524260808501528760a0850152866000526007602052604060002092845184558560018501915116906001600160601b0360a01b9182825416179055856002850192511690825416179055518051906001600160401b038211611876576116936003840154614a15565b601f811161190a575b50602090601f831160011461189757918060a0949260059460009261188c575b50508160011b916000199060031b1c19161760038201555b60808401516004820155019101518051906001600160401b038211611876576116fd8354614a15565b601f811161182e575b50602090601f831160011461179c57928261178c9361177496937f667d00e0ddf8a4e20e7e21bdde9a71660b36c0d7e1645005cbcac348a11f43cc9896600092611791575b50508160011b916000199060031b1c19161790555b604051938493606085526060850190614936565b97426020850152838903604085015216963396614936565b0390a4005b015190508b8061174b565b90601f198316918460005260206000209260005b81811061181657509361177496937f667d00e0ddf8a4e20e7e21bdde9a71660b36c0d7e1645005cbcac348a11f43cc9896936001938361178c98106117fd575b505050811b019055611760565b015160001960f88460031b161c191690558b80806117f0565b929360206001819287860151815501950193016117b0565b836000526020600020601f840160051c8101916020851061186c575b601f0160051c01905b8181106118605750611706565b60008155600101611853565b909150819061184a565b634e487b7160e01b600052604160045260246000fd5b015190508b806116bc565b90601f198316916003850160005260206000209260005b8181106118f2575092600192859260059660a09896106118d9575b505050811b0160038201556116d4565b015160001960f88460031b161c191690558b80806118c9565b929360206001819287860151815501950193016118ae565b600384016000526020600020601f840160051c81016020851061194a575b601f830160051c8201811061193e57505061169c565b60008155600101611928565b5080611928565b60405163667bdb3960e01b8152600490fd5b604051631a599d5b60e01b815260206004820152908190610689906024830190614936565b503360009081526000805160206153b6833981519152602052604090205460ff16156115a8565b50336000908152600080516020615296833981519152602052604090205460ff16156115a1565b50336000908152600080516020615276833981519152602052604090205460ff161561159a565b50336000908152600080516020615316833981519152602052604090205460ff1615611593565b346103a9576020806003193601126103a9576004356001600160401b0381116103a957611a559036906004016148bd565b604051908051906111cf611a8c85830193611a71818787614913565b85019486816002978881520301902060405192838092614a4f565b8481519101208151908184201490811591611c40575b50611c2e57828491611abc60405194859251928391614913565b83019282816003958681520301902090815490611ad88261514e565b94611ae6604051968761489c565b82865284860191829460005285600020916000935b858510611bac57604080518981528a51818b01819052600092600582901b83018101918b918d9085015b828710611b325785850386f35b909192938280600192603f19898203018552875190611b81611b6f611b5f845160a0808652850190614936565b8585015184820387860152614936565b60408401518382036040850152614936565b916060868060a01b038183015116908301526080809101519101529601920196019592919092611b25565b60058860019260409b9a9b51611bc181614866565b604051611bd2816111cf818c614a4f565b8152604051611be7816111cf81898d01614a4f565b83820152604051611bfe816111cf818b8d01614a4f565b6040820152848060a01b038689015416606082015260048801546080820152815201940194019392979697611afb565b6040516329d7b10b60e11b8152600490fd5b90501585611aa2565b346103a9576020806003193601126103a9576004356001600160401b0381116103a957611c7a9036906004016148bd565b6040519080516111cf611c9585840192611a71818786614913565b8481519101208251822003611ea057600092600192600854935b848110611e4b5750611cc08561514e565b94611cce604051968761489c565b808652611cdd601f199161514e565b018660005b828110611e355750505060009160015b858110611d5757604080518981528851818b01819052600092600582901b83018101918b8d01918d9085015b828710611d2b5785850386f35b909192938280611d47600193603f198a8203018652885161499d565b9601920196019592919092611d1e565b806000528760078082526003906111cf611d7d8360406000200160405192838092614a4f565b8381519101208651892014611d9e575b505050611d999061513f565b611cf2565b916005611e1b859893611e2a95611d999760005284526111cf611dfc60406000209260405196611dcd8861484b565b8454885260018060a01b039081600187015416908901528b850154166040880152604051928380928601614a4f565b6060850152600481015460808501526111cf6040518094819301614a4f565b60a0820152610b8a828b615172565b939050878980611d8d565b611e3d615241565b82828a010152018790611ce2565b80600052600787526111cf611e6d600360406000200160405192838092614a4f565b8781519101208251852014611e8b575b611e869061513f565b611caf565b94611e98611e869161513f565b959050611e7d565b5082610689604051928392631a599d5b60e01b845260048401526024830190614936565b346103a957611ed236614b3b565b3360009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602090815260409091205491929160ff16156106c357604051600160ff600a855193858181890196611f2c81838a614913565b81016002815203019020015460a81c16151514611fac5791600a611f80611495937fa214f45af6d86b0d5ff7bb48f888cf4205e4a383da35fcbebfdbd9bd8e6d5a7c95604051809381928751928391614913565b8101600281520301902001600160a81b60ff60a81b198254161790556040519182913395429184615111565b5061068960405192839263701203b760e01b845260048401526024830190614936565b346103a957611fdd3661495b565b611fe5614ca4565b611fee82614c4e565b156103975761032d7f71577b91708c73ee54b43c6709958ff42e4bcc084910648ce7c3d16928b51d52916000805160206152b68339815191528060005260209060008252610422600160406000200154614e87565b346103a95760003660031901126103a95760206040516000805160206153368339815191528152f35b346103a95760003660031901126103a95760206040516000805160206153968339815191528152f35b346103a9576020806003193601126103a9576004356001600160401b0381116103a9576120c69036906004016148bd565b906000805260008152604060002033600052815260ff60406000205416156106c3576040516111cf6121058451928481818801956111b9818389614913565b8281519101208351908183201490811591612260575b50611c2e5760ff600a60405184818751612136818389614913565b81016002815203019020015460b01c1680612234575b15612211579060ff600a6121f283604096958751606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e22612192606083018a614936565b916b54726164696e67526561647960a01b85828503948582850152600c81520152428b8201528a33930190a28484895184818b516121d1818389614913565b81016002815203019020015460b01c16968851938492839251928391614913565b81016002815203019020015460b81c1683519215158352151590820152f35b506106896040519283926348cddbdb60e11b845260048401526024830190614936565b5060ff600a6040518481875161224b818389614913565b81016002815203019020015460b81c1661214c565b9050158461211b565b346103a95760203660031901126103a957612282614804565b6001600160a01b03166000908152600080516020615316833981519152602090815260409182902054915160ff9092161515825290f35b346103a95760003660031901126103a95760206040516000805160206153768339815191528152f35b346103a95760003660031901126103a95760206040516000805160206153568339815191528152f35b346103a9576020806003193601126103a957612325614804565b6001600160a01b03811691908215610c8d5761234890612343614ca4565b614c11565b610e65577f4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be751906000805160206153968339815191528060005260008252604060002084600052825260ff6040600020541615610e1557600052600481526040600020610e0a815461513f565b346103a95760203660031901126103a9576004356001600160401b0381116103a9576123e49036906004016148bd565b60405181818093516020819301916123fb92614913565b810160028152036020019020604051806124158184614a4f565b03612420908261489c565b60405191826124328160018401614a4f565b0361243d908461489c565b6040518061244e8160028501614a4f565b03612459908261489c565b604051918261246b8160038401614a4f565b03612476908461489c565b600481015460058201546040519491856124938160068701614a4f565b0361249e908761489c565b60078401546040516001600160a01b03979093918816929091846124c58160088a01614a4f565b036124d0908661489c565b60405195866124e28160098b01614a4f565b036124ed908861489c565b600a88015497600b0154986040519c8d9c8d610200908181520161251091614936565b8d810360208f015261252191614936565b8c810360408e015261253291614936565b8b810360608d015261254391614936565b9160808b015260a08a015288810360c08a015261255f91614936565b9060e088015286810361010088015261257791614936565b85810361012087015261258991614936565b9281166101408501528060a01c60ff1615156101608501528060a81c60ff1615156101808501528060b01c60ff1615156101a085015260b81c60ff1615156101c08401526101e08301520390f35b346103a95760003660031901126103a95760206040516000805160206152b68339815191528152f35b346103a95761260e36614b3b565b336000908152600080516020615276833981519152602090815260409091205491929160ff16156106c357604051600160ff600a85519385818189019661265681838a614913565b81016002815203019020015460b01c161515146126d65791600a6126aa611495937fa9de1934279a83f8cfaaecf6a7002ac10aeaea244c8c763f3752f3fc4c3e631d95604051809381928751928391614913565b8101600281520301902001600160b01b60ff60b01b198254161790556040519182913395429184615111565b5061068960405192839263c817400d60e01b845260048401526024830190614936565b346103a95761270736614ae5565b3360009081526000805160206152f683398151915260205260409020549192909160ff16158015612b4f575b8015612b28575b8015612b01575b8015612ada575b6106c3576001600160a01b039080821615610c8d576040516111cf61277b855192602081818901956111b9818389614913565b60208151910120908451902003612ab85783511561195157604051936127a085614830565b828216855260208501818152846040870152426060870152600654600160401b811015611876578060016127d79201600655615207565b919091612aa257865182546001600160a01b031916908616178255518051906001600160401b0382116118765781906128136001850154614a15565b601f8111612a4f575b50602090601f83116001146129e2576000926129d7575b50508160011b916000199060031b1c19161760018201555b60408601519586516001600160401b0381116118765761286e6002840154614a15565b601f811161298c575b506020601f82116001146128f457611495949392826003936060937f5976419bf023a4ba12e577104a97a5d64339aa8d4c781c4e3b82653b052d67119b9c6000926128e9575b50508160011b9160001990861b1c19161760028501555b01519101556040519384931695429184615111565b015190508c806128bd565b601f198216986002850160005260206000209960005b8181106129745750837f5976419bf023a4ba12e577104a97a5d64339aa8d4c781c4e3b82653b052d67119a9b606094611495999897946003976001951061295c575b505050811b0160028501556128d4565b015160001983881b60f8161c191690558c808061294c565b838301518c556001909b019a6020938401930161290a565b600284016000526020600020601f830160051c810191602084106129cd575b601f0160051c01905b8181106129c15750612877565b600081556001016129b4565b90915081906129ab565b015190508880612833565b600185016000908152602081209350601f198516905b818110612a375750908460019594939210612a1e575b505050811b01600182015561284b565b015160001960f88460031b161c19169055888080612a0e565b929360206001819287860151815501950193016129f8565b909150600184016000526020600020601f840160051c810160208510612a9b575b90849392915b601f830160051c82018110612a8c57505061281c565b60008155859450600101612a76565b5080612a70565b634e487b7160e01b600052600060045260246000fd5b604051631a599d5b60e01b815260206004820152806106896024820186614936565b503360009081526000805160206153b6833981519152602052604090205460ff1615612748565b50336000908152600080516020615296833981519152602052604090205460ff1615612741565b50336000908152600080516020615276833981519152602052604090205460ff161561273a565b50336000908152600080516020615316833981519152602052604090205460ff1615612733565b346103a9576020806003193601126103a957612b90614804565b6001600160a01b03811691908215610c8d57612bb390612bae614ca4565b614be6565b610e65577f4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb3906000805160206153768339815191528060005260008252604060002084600052825260ff6040600020541615610e1557600052600481526040600020610e0a815461513f565b346103a95760c03660031901126103a9576004356001600160401b0381116103a957612c4f9036906004016148bd565b6024356001600160401b0381116103a957612c6e9036906004016148bd565b906064356001600160401b0381116103a957612c8e9036906004016148bd565b9060a4356001600160401b0381116103a957612cae9036906004016148bd565b3360009081526000805160206152f6833981519152602052604090205490929060ff16156106c357815115613e005780511561069f57835115613dee5760443515613ddc57608435158015613dd0575b613dbe5760506084351115613da457825115613d9257600154612d208161513f565b600155604051612d6860748260208101946020612d438b88815193849201614913565b8201903360601b6020830152426034830152605482015203605481018452018261489c565b5190209260405193612d7985614881565b600a855260203681870137845115613d7c5760306020860153845160011015613d7c576078602186015360005b60048110613ce9575050612dfb602160405180968851612dcd816020850160208d01614913565b8201602d60f81b6020820152612dec8251809360208785019101614913565b0103600181018752018561489c565b60405190816102008101106001600160401b0361020084011117611876576102008201604052848252836020830152826040830152856060830152604435608083015260843560a083015260c08201523360e0820152604051612e5d81614881565b600381526252617760e81b6020820152610100820152604051612e7f81614881565b600d81526c26b4b734b7339021b2b73a32b960991b6020820152610120820152336101408201526000610160820152600061018082015260006101a082015260006101c0820152426101e08201526040516020818651612ee28183858b01614913565b810160028152030190209080518051906001600160401b038211611876578190612f0c8554614a15565b601f8111613c99575b50602090601f8311600114613c2d57600092613c22575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b038211611876578190612f666001860154614a15565b601f8111613bcf575b50602090601f8311600114613b5d57600092613b52575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211611876578190612fc36002860154614a15565b601f8111613aff575b50602090601f8311600114613a8d57600092613a82575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b0382116118765781906130206003860154614a15565b601f8111613a2f575b50602090601f83116001146139bd576000926139b2575b50508160011b916000199060031b1c19161760038301555b6080810151600483015560a0810151600583015560c08101518051906001600160401b0382116118765781906130916006860154614a15565b601f811161395f575b50602090601f83116001146138ed576000926138e2575b50508160011b916000199060031b1c19161760068301555b60e08101516007830180546001600160a01b0319166001600160a01b03929092169190911790556101008101518051906001600160401b0382116118765781906131166008860154614a15565b601f811161388f575b50602090601f831160011461381d57600092613812575b50508160011b916000199060031b1c19161760088301555b6101208101518051906001600160401b038211611876576131726009850154614a15565b601f81116137cb575b50602090601f8311600114613755579180600b94926101e09460009261374a575b50508160011b916000199060031b1c19161760098501555b600a840160018060a01b036101408301511681549060ff60a01b610160850151151560a01b1660ff60a81b610180860151151560a81b169060ff60b01b6101a0870151151560b01b169260ff60b81b6101c0880151151560b81b16946001600160401b0360c01b16171717171790550151910155604051602081855161323d8183858a01614913565b81016003815203019020936040519467027b934b3b4b71d160c51b602087015261328560288785516132758184840160208a01614913565b810103600881018952018761489c565b6040519561329287614866565b8587526040516132a181614881565b600a815269149959da5cdd195c995960b21b6020820152602088015260408701523360608701524260808701528054600160401b811015611876576132eb916001820181556149f9565b612aa25785518051906001600160401b03821161187657819061330e8454614a15565b601f81116136fa575b50602090601f831160011461368e57600092613683575b50508160011b916000199060031b1c19161781555b60208601518051906001600160401b0382116118765781906133686001850154614a15565b601f8111613630575b50602090601f83116001146135be576000926135b3575b50508160011b916000199060031b1c19161760018201555b60408601519586516001600160401b038111611876576133c36002840154614a15565b601f811161356c575b506020601f82116001146134cb57926004608061064a948461348b98957f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939a986134bc9e6000926134c0575b50508160011b916000199060031b1c19161760028501555b6003840160018060a01b036060830151166001600160601b0360a01b825416179055015191015561347d6040519660e0885261346f60e089018a614936565b9088820360208a0152614936565b908682036040880152614936565b91604435608082015260843560a08201524260c08201528033930390a2604051918291602083526020830190614936565b0390f35b015190508e80613418565b6002840160005260206000209860005b601f19841681106135545750608061064a946001856134bc9d7f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939b999660049661348b9c99601f1981161061353b575b505050811b016002850155613430565b015160001960f88460031b161c191690558e808061352b565b828201518b556001909a0199602092830192016134db565b600284016000526020600020601f830160051c8101602084106135ac575b601f830160051c820181106135a05750506133cc565b6000815560010161358a565b508061358a565b015190508880613388565b9250600184016000526020600020906000935b601f1984168510613615576001945083601f198116106135fc575b505050811b0160018201556133a0565b015160001960f88460031b161c191690558880806135ec565b818101518355602094850194600190930192909101906135d1565b909150600184016000526020600020601f840160051c81016020851061367c575b90849392915b601f830160051c8201811061366d575050613371565b60008155859450600101613657565b5080613651565b01519050888061332e565b9250836000526020600020906000935b601f19841685106136df576001945083601f198116106136c6575b505050811b018155613343565b015160001960f88460031b161c191690558880806136b9565b8181015183556020948501946001909301929091019061369e565b909150836000526020600020601f840160051c810160208510613743575b90849392915b601f830160051c82018110613734575050613317565b6000815585945060010161371e565b5080613718565b015190508a8061319c565b906009850160005260206000209160005b601f19851681106137b3575092600b94926001926101e09583601f1981161061379a575b505050811b0160098501556131b4565b015160001960f88460031b161c191690558a808061378a565b91926020600181928685015181550194019201613766565b600985016000526020600020601f840160051c81016020851061380b575b601f830160051c820181106137ff57505061317b565b600081556001016137e9565b50806137e9565b015190508880613136565b9250600885016000526020600020906000935b601f1984168510613874576001945083601f1981161061385b575b505050811b01600883015561314e565b015160001960f88460031b161c1916905588808061384b565b81810151835560209485019460019093019290910190613830565b909150600885016000526020600020601f840160051c8101602085106138db575b90849392915b601f830160051c820181106138cc57505061311f565b600081558594506001016138b6565b50806138b0565b0151905088806130b1565b9250600685016000526020600020906000935b601f1984168510613944576001945083601f1981161061392b575b505050811b0160068301556130c9565b015160001960f88460031b161c1916905588808061391b565b81810151835560209485019460019093019290910190613900565b909150600685016000526020600020601f840160051c8101602085106139ab575b90849392915b601f830160051c8201811061399c57505061309a565b60008155859450600101613986565b5080613980565b015190508880613040565b9250600385016000526020600020906000935b601f1984168510613a14576001945083601f198116106139fb575b505050811b016003830155613058565b015160001960f88460031b161c191690558880806139eb565b818101518355602094850194600190930192909101906139d0565b909150600385016000526020600020601f840160051c810160208510613a7b575b90849392915b601f830160051c82018110613a6c575050613029565b60008155859450600101613a56565b5080613a50565b015190508880612fe3565b9250600285016000526020600020906000935b601f1984168510613ae4576001945083601f19811610613acb575b505050811b016002830155612ffb565b015160001960f88460031b161c19169055888080613abb565b81810151835560209485019460019093019290910190613aa0565b909150600285016000526020600020601f840160051c810160208510613b4b575b90849392915b601f830160051c82018110613b3c575050612fcc565b60008155859450600101613b26565b5080613b20565b015190508880612f86565b9250600185016000526020600020906000935b601f1984168510613bb4576001945083601f19811610613b9b575b505050811b016001830155612f9e565b015160001960f88460031b161c19169055888080613b8b565b81810151835560209485019460019093019290910190613b70565b909150600185016000526020600020601f840160051c810160208510613c1b575b90849392915b601f830160051c82018110613c0c575050612f6f565b60008155859450600101613bf6565b5080613bf0565b015190508880612f2c565b9250846000526020600020906000935b601f1984168510613c7e576001945083601f19811610613c65575b505050811b018255612f41565b015160001960f88460031b161c19169055888080613c58565b81810151835560209485019460019093019290910190613c3d565b909150846000526020600020601f840160051c810160208510613ce2575b90849392915b601f830160051c82018110613cd3575050612f15565b60008155859450600101613cbd565b5080613cb7565b6020811015613d7c5781811a90600f613d06818460041c16615186565b908260011b936002848604811485151715613d6657858101809111613d6657613d36613d3d9460001a918c614ffa565b5316615186565b916003908101809111613d6657613d5b613d619360001a9189614ffa565b5361513f565b612da6565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60405163bfccc8e960e01b8152600490fd5b60405163d05db01960e01b81526084356004820152602490fd5b604051633abe7db760e21b8152600490fd5b50606460843511612cfe565b60405163fd83f8d960e01b8152600490fd5b60405163a765e58f60e01b8152600490fd5b604051630ac6e45360e31b8152600490fd5b346103a95760403660031901126103a957613e2b61481a565b336001600160a01b03821603613e4757610d5e90600435614f86565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b346103a95760403660031901126103a9576004356001600160401b0381116103a957613ed49036906004016148bd565b613ef06020602435928160405193828580945193849201614913565b8101600381520301902080548210156103a957613f7f91613f10916149f9565b5060405190613f2a82613f238184614a4f565b038361489c565b604051613f3e816111cf8160018601614a4f565b613f9b604051613f55816111cf8160028801614a4f565b613f8d600460018060a01b036003870154169501549360405197889760a0895260a0890190614936565b908782036020890152614936565b908582036040870152614936565b91606084015260808301520390f35b346103a95760203660031901126103a957613fc3614804565b6001600160a01b031660009081526000805160206152f6833981519152602090815260409182902054915160ff9092161515825290f35b346103a9576020806003193601126103a957600435614017615241565b508060005260078252806040600020541480156140d7575b6140bf576000526007815260406000209060056140a6604051936140528561484b565b8054855260018060a01b0380600183015416858701526002820154166040860152604051614087816111cf8160038601614a4f565b6060860152600481015460808601526111cf6040518094819301614a4f565b60a08301526134bc60405192828493845283019061499d565b602490604051906379b7e1e760e11b82526004820152fd5b50801561402f565b346103a9576140ed3661495b565b6140f5614ca4565b6140fe82614b7e565b156103975761032d7f125f88db22967983b401f70f6804d47f43cb545fcb725d0b335fe7d43d9b4a4a916000805160206153568339815191528060005260209060008252610422600160406000200154614e87565b346103a95760403660031901126103a95760043561416f61481a565b816000526000602052614189600160406000200154614e87565b81600052600060205260406000209060018060a01b0316908160005260205260ff60406000205416156141b857005b8160005260006020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b346103a95760203660031901126103a95760043560005260006020526020600160406000200154604051908152f35b346103a95760203660031901126103a9576004358015801561431f575b6143075761425f90615207565b5060405161426c81614830565b81546001600160a01b039081168252604051916142fd919061429c846142958160018901614a4f565b038561489c565b602081019384526003604051956142c1876142ba8160028501614a4f565b038861489c565b8660408401520154606082015251169151926142ef6040519485948552608060208601526080850190614936565b908382036040850152614936565b4260608301520390f35b60249060405190635afa5bc760e11b82526004820152fd5b506006548111614252565b346103a9576020806003193601126103a9576004356001600160401b0381116103a95761435b9036906004016148bd565b9060008051602061533683398151915260005260008152604060002033600052815260ff918260406000205416156106c357604051815193838301946143a2818488614913565b8201906001816002938481528588600a97889303019020015460a01c1615151461463d57600080526000855260406000203360005285528060406000205416156106c3576111cf6144156040518781806144008c8b51928391614913565b81018781520301902060405192838092614a4f565b8581519101208451908188201490811591614634575b50611c2e5780836040518781806144468c8b51928391614913565b810187815203019020015460b01c1680614609575b156145e757604051606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e226144956060830187614936565b916b54726164696e67526561647960a01b88828503948582850152600c81520152426040820152604033930190a280836040518781806144d98c8b51928391614913565b810187815203019020015460b01c1690836040518781806144fe8c8b51928391614913565b810187815203019020015460b81c16816145df575b50156145bd57837ffed1001c142a7ab386454a2f7d78b013ba7ff40595d10c128f2fb6463ccd7b7a9495614581928460405184818951614554818389614913565b81018581520301902001805460ff60a01b1916600160a01b17905560405186519094859382908590614913565b8201908152030190200180546001600160a01b0319163317905560408051818152916145af91830190614936565b9242908201528033930390a2005b6040516348cddbdb60e11b815260048101859052806106896024820186614936565b905086614513565b6040516348cddbdb60e11b815260048101869052806106896024820187614936565b5080836040518781806146208c8b51928391614913565b810187815203019020015460b81c1661445b565b9050158761442b565b604051632072bb0160e11b815260048101869052806106896024820187614936565b346103a9576020806003193601126103a957614679614804565b6001600160a01b03811691908215610c8d5761469c90614697614ca4565b614ba9565b610e65577ff8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e97505906000805160206153368339815191528060005260008252604060002084600052825260ff6040600020541615610e1557600052600481526040600020610e0a815461513f565b346103a9576020806003193601126103a957614722614804565b6001600160a01b03811691908215610c8d5761474590614740614ca4565b614b7e565b610e65577f593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf559906000805160206153568339815191528060005260008252604060002084600052825260ff6040600020541615610e1557600052600481526040600020610e0a815461513f565b346103a95760203660031901126103a9576004359063ffffffff60e01b82168092036103a957602091637965db0b60e01b81149081156147f3575b5015158152f35b6301ffc9a760e01b149050836147ec565b600435906001600160a01b03821682036103a957565b602435906001600160a01b03821682036103a957565b608081019081106001600160401b0382111761187657604052565b60c081019081106001600160401b0382111761187657604052565b60a081019081106001600160401b0382111761187657604052565b604081019081106001600160401b0382111761187657604052565b90601f801991011681019081106001600160401b0382111761187657604052565b81601f820112156103a9578035906001600160401b03821161187657604051926148f1601f8401601f19166020018561489c565b828452602083830101116103a957816000926020809301838601378301015290565b60005b8381106149265750506000910152565b8181015183820152602001614916565b9060209161494f81518092818552858086019101614913565b601f01601f1916010190565b9060406003198301126103a9576004356001600160a01b03811681036103a95791602435906001600160401b0382116103a95761499a916004016148bd565b90565b61499a918151815260018060a01b03806020840151166020830152604083015116604082015260a06149de606084015160c0606085015260c0840190614936565b926080810151608084015201519060a0818403910152614936565b8054821015613d7c576000526005602060002091020190600090565b90600182811c92168015614a45575b6020831014614a2f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691614a24565b9060009291805491614a6083614a15565b918282526001938481169081600014614ac25750600114614a82575b50505050565b90919394506000526020928360002092846000945b838610614aae575050505001019038808080614a7c565b805485870183015294019385908201614a97565b9294505050602093945060ff191683830152151560051b01019038808080614a7c565b60606003198201126103a9576004356001600160a01b03811681036103a957916001600160401b036024358181116103a95783614b24916004016148bd565b926044359182116103a95761499a916004016148bd565b9060406003198301126103a9576001600160401b036004358181116103a95783614b67916004016148bd565b926024359182116103a95761499a916004016148bd565b6001600160a01b031660009081526000805160206152f6833981519152602052604090205460ff1690565b6001600160a01b031660009081527ff3fa603c74bfe2a4719960e47343678c3dc690d2b27a2295acc6fc430833aaf9602052604090205460ff1690565b6001600160a01b03166000908152600080516020615276833981519152602052604090205460ff1690565b6001600160a01b031660009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602052604090205460ff1690565b6001600160a01b03166000908152600080516020615316833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020615296833981519152602052604090205460ff1690565b3360009081526000805160206153b6833981519152602090815260408083205490929060ff1615614cd457505050565b614cdd33615018565b9080845190614ceb82614830565b60428252848201926060368537825115614e7357603084538251600190811015614e5f5790607860218501536041915b808311614e0557505050614dc3576048610689938693614da793614d98985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152614d6f815180928c603789019101614913565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190614913565b0103602881018752018561489c565b5192839262461bcd60e51b845260048401526024830190614936565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015614e4b57614e4491906f181899199a1a9b1b9c1cb0b131b232b360811b901a614e3a8688614ffa565b5360041c9361500b565b9190614d1b565b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b81526032600452602490fd5b600090808252602090828252604092838120338252835260ff848220541615614eb05750505050565b614eb933615018565b91845190614ec682614830565b60428252848201926060368537825115614e7357603084538251600190811015614e5f5790607860218501536041915b808311614f4a57505050614dc3576048610689938693614da793614d98985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152614d6f815180928c603789019101614913565b909192600f81166010811015614e4b57614f7f91906f181899199a1a9b1b9c1cb0b131b232b360811b901a614e3a8688614ffa565b9190614ef6565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416614fb657505050565b80835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b908151811015613d7c570160200190565b8015613d66576000190190565b60405190606082018281106001600160401b0382111761187657604052602a8252602082016040368237825115613d7c57603090538151600190811015613d7c57607860218401536029905b8082116150b85750506150745790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81169060108210156150fc576150f6916f181899199a1a9b1b9c1cb0b131b232b360811b901a6150ec8587614ffa565b5360041c9261500b565b90615064565b60246000634e487b7160e01b81526032600452fd5b93929161513a9061512c604093606088526060880190614936565b908682036020880152614936565b930152565b6000198114613d665760010190565b6001600160401b0381116118765760051b60200190565b805115613d7c5760200190565b8051821015613d7c5760209160051b010190565b60009060ff16600a8110156151b257603091500160ff8111613d665760f81b6001600160f81b03191690565b60610160ff81116151f35760ff6009199116019060ff82116151df575060f81b6001600160f81b03191690565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b82526011600452602482fd5b600654811015613d7c57600660005260021b7ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b6040519061524e8261484b565b606060a083600081526000602082015260006040820152828082015260006080820152015256fe0d2d6a5d08cb5d871289c0a3ca855d9da72909a111c24cce2d5c2b34a20daa54acfff8a39fb957d9d1c8e3ef9f08385e3fcf7bb23ab7ba0ad0f8df93dbde6a68ddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0bb3fcc25fbffa12ea463b3505377899a4d5ddb4858b9c7bd36764686d9425b36bce5fd3347e0dc338dcc0e895534dd4af2740eec95f56cd4ca4b4b2ada357ca0f8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90ea952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5a977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4dad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5a2646970667358221220fbf72e2999965ee7ef77cf3a37bad833f10bca5942fc5a0461b6140336da7ca964736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146147b1575080630958fc2d146147085780630dacad2e1461465f578063126ee3381461432a578063202e392414614235578063248a9ca3146142065780632f2ff15d14614153578063309514df146140df57806333ea3dc814613ffa5780633499c3a214613faa57806335ba620714613ea457806336568abe14613e125780633a7adea514612c1f578063480d1dd314612b765780634ca85d34146126f95780634e2a3109146126005780634eabbe77146125d75780635aee1b15146123b45780636377741d1461230b5780636394f6e6146122e25780636e1d616e146122b957806370e22e421461226957806375a2b0d41461209557806379451cd71461206c5780637a01a1da146120435780637ae9c16014611fcf5780637cde2b9914611ec45780637f3c990814611c49578063826fe0f514611a2457806383c4865c1461155a5780638850845f1461150a57806391d14854146114bd57806399691194146113bf5780639b188dd61461134b578063a217fddf1461132f578063a917601b14611286578063abaa536f14611236578063ac851dfd14611164578063b6ba1ca714611138578063b9c5b83314611013578063beae461514610fb1578063c395fcb314610f61578063ca15c87314610e77578063cc82b09014610d60578063d547741f14610d1f578063dd1033f814610d01578063de7ce39114610c9f578063df422bf214610778578063e3a3c5221461074f578063e438fdf8146106db578063f17f3523146104d3578063f5716a85146103ae5763fc1032eb1461026657600080fd5b346103a9576102743661495b565b61027c614ca4565b61028582614be6565b156103975761032d7f93e936184fad9f80c7000aa987f91be0cd621bacde11839fdc7139f3d9c2407b9160008051602061537683398151915280600052602090600082526102da600160406000200154614e87565b600081815280835260408082206001600160a01b0390981680835297845290205460ff1661034a575b600052600481526040600020805480610338575b5050604051928392604084526040840190614936565b9042908301520390a2005b6103419061500b565b90553880610317565b80600052600082526040600020866000528252604060002060ff1981541690553386827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b600080a4610303565b604051632ac1560560e21b8152600490fd5b600080fd5b346103a9576103bc3661495b565b6103c4614ca4565b6103cd82614c11565b156103975761032d7f4614600adaea632b1e4c381ad24471dab7b587dca104c8dd4da76bc64f19716f916000805160206153968339815191528060005260209060008252610422600160406000200154614e87565b600081815280835260408082206001600160a01b0390981680835297845290205460ff16610486575b600052600481526040600020805480610474575050604051928392604084526040840190614936565b61047d9061500b565b90558580610317565b80600052600082526040600020866000528252604060002060ff1981541690553386827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b600080a461044b565b346103a95760803660031901126103a9576001600160401b036004358181116103a9576105049036906004016148bd565b9061050d61481a565b906044358181116103a9576105269036906004016148bd565b906064359081116103a95761053f9036906004016148bd565b906000805160206152b683398151915260005260209260008452604060002033600052845260ff60406000205416156106c3576001600160a01b031680156106b15781511561069f5782511561068d57604051600160ff600a8851938881818c01966105ac81838a614913565b81016002815203019020015460a01c161515146106675793610658939261064a92600a610607847f55b00b3c29344a545244b18d70b135e423405427088bd5425f13d690b82310b4998b604051938492839251928391614913565b8101600281520301902001336001600160601b0360a01b8254161790556106396040519860a08a5260a08a0190614936565b928801528682036040880152614936565b908482036060860152614936565b914260808201528033930390a2005b604051632072bb0160e11b815260048101869052806106896024820189614936565b0390fd5b604051635dbef47560e01b8152600490fd5b6040516326813e6f60e01b8152600490fd5b60405163bea3fd2f60e01b8152600490fd5b604051630568555f60e41b8152336004820152602490fd5b346103a9576106e93661495b565b6106f1614ca4565b6106fa82614c79565b156103975761032d7f352e14c53d161e2481e65145b53265d1608f979a93a06df66d4c99b2a84ddc63916000805160206152d68339815191528060005260209060008252610422600160406000200154614e87565b346103a95760003660031901126103a95760206040516000805160206152d68339815191528152f35b346103a9576020806003193601126103a9576001600160a01b0361079a614804565b168015610c8d576000906000805260008352604060002081600052835260ff8060406000205416610c84575b60008051602061535683398151915291826000526000855260406000208160005285528160406000205416610c74575b600080516020615396833981519152806000526000865260406000208260005286528260406000205416610c64575b6000805160206152b6833981519152806000526000875260406000208360005287528360406000205416610c54575b600080516020615376833981519152806000526000885260406000208460005288528460406000205416610c44575b6000805160206152d683398151915291826000526000895260406000208560005289528560406000205416610c34575b600080516020615336833981519152938460005260008a526040600020866000528a528660406000205416610c24575b6108ec8961514e565b986108fa6040519a8b61489c565b808a52610909601f199161514e565b018a8a60005b838110610c1357505050506000976000805260008b526040600020876000528b528760406000205416610bd8575b60005260008a526040600020866000528a528660406000205416610b9b575b6000526000895260406000208560005289528560406000205416610b5c575b6000526000885260406000208460005288528460406000205416610b19575b6000526000875260406000208360005287528360406000205416610ada575b6000526000865260406000208260005286528260406000205416610a99575b60005260008552604060002090600052845260406000205416610a56575b506040519082820192808352815180945260408301938160408260051b8601019301916000955b828710610a2a5785850386f35b909192938280610a46600193603f198a82030186528851614936565b9601920196019592919092610a1d565b610a9290604051610a6681614881565b6005815264212aaca2a960d91b85820152610a818285615172565b52610a8c8184615172565b5061513f565b50826109f6565b92610ad490604051610aaa81614881565b600981526824a729a822a1aa27a960b91b88820152610ac98288615172565b52610a8c8187615172565b926109d8565b93610b1390604051610aeb81614881565b600781526620aaa224aa27a960c91b89820152610b088289615172565b52610a8c8188615172565b936109b9565b94610b5690604051610b2a81614881565b600b81526a2a2920a729a827a92a22a960a91b8a820152610b4b828a615172565b52610a8c8189615172565b9461099a565b95610b9590604051610b6d81614881565b60078152662922a324a722a960c91b8b820152610b8a828b615172565b52610a8c818a615172565b9561097b565b96610bd290604051610bac81614881565b600581526426a4a722a960d91b8c820152610bc7828c615172565b52610a8c818b615172565b9661095c565b9750604051610be681614881565b600581526420a226a4a760d91b8b820152610c008a615165565b52610c0a89615165565b5060019761093d565b606083828194010152018b9061090f565b97610c2e9061513f565b976108e3565b96610c3e9061513f565b966108b3565b95610c4e9061513f565b95610883565b94610c5e9061513f565b94610854565b93610c6e9061513f565b93610825565b92610c7e9061513f565b926107f6565b600192506107c6565b60405163200db56f60e11b8152600490fd5b346103a95760203660031901126103a957610cb8614804565b6001600160a01b031660009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602090815260409182902054915160ff9092161515825290f35b346103a95760003660031901126103a9576020600654604051908152f35b346103a95760403660031901126103a957610d5e600435610d3e61481a565b90806000526000602052610d59600160406000200154614e87565b614f86565b005b346103a9576020806003193601126103a957610d7a614804565b6001600160a01b03811691908215610c8d57610d9d90610d98614ca4565b614c79565b610e65577f49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e092906000805160206152d68339815191528060005260008252604060002084600052825260ff6040600020541615610e15575b600052600481526040600020610e0a815461513f565b9055604051428152a2005b806000526000825260406000208460005282526040600020600160ff198254161790553384827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4610df4565b6040516314726de560e21b8152600490fd5b346103a95760203660031901126103a95760043560008051602061535683398151915281148015610f4a575b8015610f33575b8015610f1c575b8015610f05575b8015610eee575b15610edc5760005260046020526020604060002054604051908152f35b604051636b9c461160e01b8152600490fd5b506000805160206153368339815191528114610ebf565b506000805160206152d68339815191528114610eb8565b506000805160206153768339815191528114610eb1565b506000805160206152b68339815191528114610eaa565b506000805160206153968339815191528114610ea3565b346103a95760203660031901126103a957610f7a614804565b6001600160a01b031660009081526000805160206153b6833981519152602090815260409182902054915160ff9092161515825290f35b346103a95760203660031901126103a957610fca614804565b6001600160a01b031660009081527ff3fa603c74bfe2a4719960e47343678c3dc690d2b27a2295acc6fc430833aaf9602090815260409182902054915160ff9092161515825290f35b346103a95760003660031901126103a957600460209081527f973ccc145476ef147b966a44694f8b2d26bac5a3d44a844fec6be696fe5fea70547f02ff85b9f193a3a7824cbaf5a79db262c0bac955152adf2752c6413d76b2d3c7547f0e08e55c6329ca2d4f38429c472032b4e97537c869a64c376bb7e702721eb8c3547fa792fa383e6bd9c6b4465bbfd8031f4b47377210fa121067c03906e9afac6246547f9d423956391424a558206d539d4c7b96f2596f9d71b6fe92efe1f071a870ba94546000805160206153368339815191526000527f5455ba4b8a75b33fa0f1f7affd9817680912f06b7b194bcf9ac01183c4930020546040805196875296860194909452948401919091526060830152608082019290925260a081019190915260c090f35b346103a95760203660031901126103a95760043560005260046020526020604060002054604051908152f35b346103a9576020806003193601126103a9576004356001600160401b0381116103a9576111959036906004016148bd565b805115611213576040516111cf6111d68351928581818701956111b9818389614913565b8101600281520301902060405192838092614a4f565b038261489c565b8381519101209082519020036111f0575060405160018152f35b906106896040519283926311bb0bc960e31b845260048401526024830190614936565b9061068960405192839263f855236d60e01b845260048401526024830190614936565b346103a95760203660031901126103a95761124f614804565b6001600160a01b03166000908152600080516020615276833981519152602090815260409182902054915160ff9092161515825290f35b346103a9576020806003193601126103a9576112a0614804565b6001600160a01b03811691908215610c8d576112c3906112be614ca4565b614c4e565b610e65577f964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a6906000805160206152b68339815191528060005260008252604060002084600052825260ff6040600020541615610e1557600052600481526040600020610e0a815461513f565b346103a95760003660031901126103a957602060405160008152f35b346103a9576113593661495b565b611361614ca4565b61136a82614ba9565b156103975761032d7f69e94e373f69f3f945457a07b335722310788af9cd459a33df6f72cc9e964043916000805160206153368339815191528060005260209060008252610422600160406000200154614e87565b346103a9576113cd36614b3b565b336000908152600080516020615296833981519152602090815260409091205491929160ff16156106c357604051600160ff600a85519385818189019661141581838a614913565b81016002815203019020015460b81c1615151461149a5791600a611469611495937f3a9eebd240f4c9f631531ebc672c4c040de483b868ccebe8a3a1fdad70cde0d995604051809381928751928391614913565b8101600281520301902001600160b81b60ff60b81b198254161790556040519182913395429184615111565b0390a2005b50610689604051928392636f5f944160e11b845260048401526024830190614936565b346103a95760403660031901126103a9576114d661481a565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346103a95760203660031901126103a957611523614804565b6001600160a01b03166000908152600080516020615296833981519152602090815260409182902054915160ff9092161515825290f35b346103a95761156836614ae5565b3360009081526000805160206152f6833981519152602052604090205490919060ff161580156119fd575b80156119d6575b80156119af575b8015611988575b6106c3576040516111cf6115ca835192602081818701956111b9818389614913565b60208151910120908251902003611963576001600160a01b039083821615610c8d5782511561195157600854916116008361513f565b60085560405161160f8161484b565b8381526020810133815260408201838816815260608301908582524260808501528760a0850152866000526007602052604060002092845184558560018501915116906001600160601b0360a01b9182825416179055856002850192511690825416179055518051906001600160401b038211611876576116936003840154614a15565b601f811161190a575b50602090601f831160011461189757918060a0949260059460009261188c575b50508160011b916000199060031b1c19161760038201555b60808401516004820155019101518051906001600160401b038211611876576116fd8354614a15565b601f811161182e575b50602090601f831160011461179c57928261178c9361177496937f667d00e0ddf8a4e20e7e21bdde9a71660b36c0d7e1645005cbcac348a11f43cc9896600092611791575b50508160011b916000199060031b1c19161790555b604051938493606085526060850190614936565b97426020850152838903604085015216963396614936565b0390a4005b015190508b8061174b565b90601f198316918460005260206000209260005b81811061181657509361177496937f667d00e0ddf8a4e20e7e21bdde9a71660b36c0d7e1645005cbcac348a11f43cc9896936001938361178c98106117fd575b505050811b019055611760565b015160001960f88460031b161c191690558b80806117f0565b929360206001819287860151815501950193016117b0565b836000526020600020601f840160051c8101916020851061186c575b601f0160051c01905b8181106118605750611706565b60008155600101611853565b909150819061184a565b634e487b7160e01b600052604160045260246000fd5b015190508b806116bc565b90601f198316916003850160005260206000209260005b8181106118f2575092600192859260059660a09896106118d9575b505050811b0160038201556116d4565b015160001960f88460031b161c191690558b80806118c9565b929360206001819287860151815501950193016118ae565b600384016000526020600020601f840160051c81016020851061194a575b601f830160051c8201811061193e57505061169c565b60008155600101611928565b5080611928565b60405163667bdb3960e01b8152600490fd5b604051631a599d5b60e01b815260206004820152908190610689906024830190614936565b503360009081526000805160206153b6833981519152602052604090205460ff16156115a8565b50336000908152600080516020615296833981519152602052604090205460ff16156115a1565b50336000908152600080516020615276833981519152602052604090205460ff161561159a565b50336000908152600080516020615316833981519152602052604090205460ff1615611593565b346103a9576020806003193601126103a9576004356001600160401b0381116103a957611a559036906004016148bd565b604051908051906111cf611a8c85830193611a71818787614913565b85019486816002978881520301902060405192838092614a4f565b8481519101208151908184201490811591611c40575b50611c2e57828491611abc60405194859251928391614913565b83019282816003958681520301902090815490611ad88261514e565b94611ae6604051968761489c565b82865284860191829460005285600020916000935b858510611bac57604080518981528a51818b01819052600092600582901b83018101918b918d9085015b828710611b325785850386f35b909192938280600192603f19898203018552875190611b81611b6f611b5f845160a0808652850190614936565b8585015184820387860152614936565b60408401518382036040850152614936565b916060868060a01b038183015116908301526080809101519101529601920196019592919092611b25565b60058860019260409b9a9b51611bc181614866565b604051611bd2816111cf818c614a4f565b8152604051611be7816111cf81898d01614a4f565b83820152604051611bfe816111cf818b8d01614a4f565b6040820152848060a01b038689015416606082015260048801546080820152815201940194019392979697611afb565b6040516329d7b10b60e11b8152600490fd5b90501585611aa2565b346103a9576020806003193601126103a9576004356001600160401b0381116103a957611c7a9036906004016148bd565b6040519080516111cf611c9585840192611a71818786614913565b8481519101208251822003611ea057600092600192600854935b848110611e4b5750611cc08561514e565b94611cce604051968761489c565b808652611cdd601f199161514e565b018660005b828110611e355750505060009160015b858110611d5757604080518981528851818b01819052600092600582901b83018101918b8d01918d9085015b828710611d2b5785850386f35b909192938280611d47600193603f198a8203018652885161499d565b9601920196019592919092611d1e565b806000528760078082526003906111cf611d7d8360406000200160405192838092614a4f565b8381519101208651892014611d9e575b505050611d999061513f565b611cf2565b916005611e1b859893611e2a95611d999760005284526111cf611dfc60406000209260405196611dcd8861484b565b8454885260018060a01b039081600187015416908901528b850154166040880152604051928380928601614a4f565b6060850152600481015460808501526111cf6040518094819301614a4f565b60a0820152610b8a828b615172565b939050878980611d8d565b611e3d615241565b82828a010152018790611ce2565b80600052600787526111cf611e6d600360406000200160405192838092614a4f565b8781519101208251852014611e8b575b611e869061513f565b611caf565b94611e98611e869161513f565b959050611e7d565b5082610689604051928392631a599d5b60e01b845260048401526024830190614936565b346103a957611ed236614b3b565b3360009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602090815260409091205491929160ff16156106c357604051600160ff600a855193858181890196611f2c81838a614913565b81016002815203019020015460a81c16151514611fac5791600a611f80611495937fa214f45af6d86b0d5ff7bb48f888cf4205e4a383da35fcbebfdbd9bd8e6d5a7c95604051809381928751928391614913565b8101600281520301902001600160a81b60ff60a81b198254161790556040519182913395429184615111565b5061068960405192839263701203b760e01b845260048401526024830190614936565b346103a957611fdd3661495b565b611fe5614ca4565b611fee82614c4e565b156103975761032d7f71577b91708c73ee54b43c6709958ff42e4bcc084910648ce7c3d16928b51d52916000805160206152b68339815191528060005260209060008252610422600160406000200154614e87565b346103a95760003660031901126103a95760206040516000805160206153368339815191528152f35b346103a95760003660031901126103a95760206040516000805160206153968339815191528152f35b346103a9576020806003193601126103a9576004356001600160401b0381116103a9576120c69036906004016148bd565b906000805260008152604060002033600052815260ff60406000205416156106c3576040516111cf6121058451928481818801956111b9818389614913565b8281519101208351908183201490811591612260575b50611c2e5760ff600a60405184818751612136818389614913565b81016002815203019020015460b01c1680612234575b15612211579060ff600a6121f283604096958751606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e22612192606083018a614936565b916b54726164696e67526561647960a01b85828503948582850152600c81520152428b8201528a33930190a28484895184818b516121d1818389614913565b81016002815203019020015460b01c16968851938492839251928391614913565b81016002815203019020015460b81c1683519215158352151590820152f35b506106896040519283926348cddbdb60e11b845260048401526024830190614936565b5060ff600a6040518481875161224b818389614913565b81016002815203019020015460b81c1661214c565b9050158461211b565b346103a95760203660031901126103a957612282614804565b6001600160a01b03166000908152600080516020615316833981519152602090815260409182902054915160ff9092161515825290f35b346103a95760003660031901126103a95760206040516000805160206153768339815191528152f35b346103a95760003660031901126103a95760206040516000805160206153568339815191528152f35b346103a9576020806003193601126103a957612325614804565b6001600160a01b03811691908215610c8d5761234890612343614ca4565b614c11565b610e65577f4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be751906000805160206153968339815191528060005260008252604060002084600052825260ff6040600020541615610e1557600052600481526040600020610e0a815461513f565b346103a95760203660031901126103a9576004356001600160401b0381116103a9576123e49036906004016148bd565b60405181818093516020819301916123fb92614913565b810160028152036020019020604051806124158184614a4f565b03612420908261489c565b60405191826124328160018401614a4f565b0361243d908461489c565b6040518061244e8160028501614a4f565b03612459908261489c565b604051918261246b8160038401614a4f565b03612476908461489c565b600481015460058201546040519491856124938160068701614a4f565b0361249e908761489c565b60078401546040516001600160a01b03979093918816929091846124c58160088a01614a4f565b036124d0908661489c565b60405195866124e28160098b01614a4f565b036124ed908861489c565b600a88015497600b0154986040519c8d9c8d610200908181520161251091614936565b8d810360208f015261252191614936565b8c810360408e015261253291614936565b8b810360608d015261254391614936565b9160808b015260a08a015288810360c08a015261255f91614936565b9060e088015286810361010088015261257791614936565b85810361012087015261258991614936565b9281166101408501528060a01c60ff1615156101608501528060a81c60ff1615156101808501528060b01c60ff1615156101a085015260b81c60ff1615156101c08401526101e08301520390f35b346103a95760003660031901126103a95760206040516000805160206152b68339815191528152f35b346103a95761260e36614b3b565b336000908152600080516020615276833981519152602090815260409091205491929160ff16156106c357604051600160ff600a85519385818189019661265681838a614913565b81016002815203019020015460b01c161515146126d65791600a6126aa611495937fa9de1934279a83f8cfaaecf6a7002ac10aeaea244c8c763f3752f3fc4c3e631d95604051809381928751928391614913565b8101600281520301902001600160b01b60ff60b01b198254161790556040519182913395429184615111565b5061068960405192839263c817400d60e01b845260048401526024830190614936565b346103a95761270736614ae5565b3360009081526000805160206152f683398151915260205260409020549192909160ff16158015612b4f575b8015612b28575b8015612b01575b8015612ada575b6106c3576001600160a01b039080821615610c8d576040516111cf61277b855192602081818901956111b9818389614913565b60208151910120908451902003612ab85783511561195157604051936127a085614830565b828216855260208501818152846040870152426060870152600654600160401b811015611876578060016127d79201600655615207565b919091612aa257865182546001600160a01b031916908616178255518051906001600160401b0382116118765781906128136001850154614a15565b601f8111612a4f575b50602090601f83116001146129e2576000926129d7575b50508160011b916000199060031b1c19161760018201555b60408601519586516001600160401b0381116118765761286e6002840154614a15565b601f811161298c575b506020601f82116001146128f457611495949392826003936060937f5976419bf023a4ba12e577104a97a5d64339aa8d4c781c4e3b82653b052d67119b9c6000926128e9575b50508160011b9160001990861b1c19161760028501555b01519101556040519384931695429184615111565b015190508c806128bd565b601f198216986002850160005260206000209960005b8181106129745750837f5976419bf023a4ba12e577104a97a5d64339aa8d4c781c4e3b82653b052d67119a9b606094611495999897946003976001951061295c575b505050811b0160028501556128d4565b015160001983881b60f8161c191690558c808061294c565b838301518c556001909b019a6020938401930161290a565b600284016000526020600020601f830160051c810191602084106129cd575b601f0160051c01905b8181106129c15750612877565b600081556001016129b4565b90915081906129ab565b015190508880612833565b600185016000908152602081209350601f198516905b818110612a375750908460019594939210612a1e575b505050811b01600182015561284b565b015160001960f88460031b161c19169055888080612a0e565b929360206001819287860151815501950193016129f8565b909150600184016000526020600020601f840160051c810160208510612a9b575b90849392915b601f830160051c82018110612a8c57505061281c565b60008155859450600101612a76565b5080612a70565b634e487b7160e01b600052600060045260246000fd5b604051631a599d5b60e01b815260206004820152806106896024820186614936565b503360009081526000805160206153b6833981519152602052604090205460ff1615612748565b50336000908152600080516020615296833981519152602052604090205460ff1615612741565b50336000908152600080516020615276833981519152602052604090205460ff161561273a565b50336000908152600080516020615316833981519152602052604090205460ff1615612733565b346103a9576020806003193601126103a957612b90614804565b6001600160a01b03811691908215610c8d57612bb390612bae614ca4565b614be6565b610e65577f4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb3906000805160206153768339815191528060005260008252604060002084600052825260ff6040600020541615610e1557600052600481526040600020610e0a815461513f565b346103a95760c03660031901126103a9576004356001600160401b0381116103a957612c4f9036906004016148bd565b6024356001600160401b0381116103a957612c6e9036906004016148bd565b906064356001600160401b0381116103a957612c8e9036906004016148bd565b9060a4356001600160401b0381116103a957612cae9036906004016148bd565b3360009081526000805160206152f6833981519152602052604090205490929060ff16156106c357815115613e005780511561069f57835115613dee5760443515613ddc57608435158015613dd0575b613dbe5760506084351115613da457825115613d9257600154612d208161513f565b600155604051612d6860748260208101946020612d438b88815193849201614913565b8201903360601b6020830152426034830152605482015203605481018452018261489c565b5190209260405193612d7985614881565b600a855260203681870137845115613d7c5760306020860153845160011015613d7c576078602186015360005b60048110613ce9575050612dfb602160405180968851612dcd816020850160208d01614913565b8201602d60f81b6020820152612dec8251809360208785019101614913565b0103600181018752018561489c565b60405190816102008101106001600160401b0361020084011117611876576102008201604052848252836020830152826040830152856060830152604435608083015260843560a083015260c08201523360e0820152604051612e5d81614881565b600381526252617760e81b6020820152610100820152604051612e7f81614881565b600d81526c26b4b734b7339021b2b73a32b960991b6020820152610120820152336101408201526000610160820152600061018082015260006101a082015260006101c0820152426101e08201526040516020818651612ee28183858b01614913565b810160028152030190209080518051906001600160401b038211611876578190612f0c8554614a15565b601f8111613c99575b50602090601f8311600114613c2d57600092613c22575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b038211611876578190612f666001860154614a15565b601f8111613bcf575b50602090601f8311600114613b5d57600092613b52575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211611876578190612fc36002860154614a15565b601f8111613aff575b50602090601f8311600114613a8d57600092613a82575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b0382116118765781906130206003860154614a15565b601f8111613a2f575b50602090601f83116001146139bd576000926139b2575b50508160011b916000199060031b1c19161760038301555b6080810151600483015560a0810151600583015560c08101518051906001600160401b0382116118765781906130916006860154614a15565b601f811161395f575b50602090601f83116001146138ed576000926138e2575b50508160011b916000199060031b1c19161760068301555b60e08101516007830180546001600160a01b0319166001600160a01b03929092169190911790556101008101518051906001600160401b0382116118765781906131166008860154614a15565b601f811161388f575b50602090601f831160011461381d57600092613812575b50508160011b916000199060031b1c19161760088301555b6101208101518051906001600160401b038211611876576131726009850154614a15565b601f81116137cb575b50602090601f8311600114613755579180600b94926101e09460009261374a575b50508160011b916000199060031b1c19161760098501555b600a840160018060a01b036101408301511681549060ff60a01b610160850151151560a01b1660ff60a81b610180860151151560a81b169060ff60b01b6101a0870151151560b01b169260ff60b81b6101c0880151151560b81b16946001600160401b0360c01b16171717171790550151910155604051602081855161323d8183858a01614913565b81016003815203019020936040519467027b934b3b4b71d160c51b602087015261328560288785516132758184840160208a01614913565b810103600881018952018761489c565b6040519561329287614866565b8587526040516132a181614881565b600a815269149959da5cdd195c995960b21b6020820152602088015260408701523360608701524260808701528054600160401b811015611876576132eb916001820181556149f9565b612aa25785518051906001600160401b03821161187657819061330e8454614a15565b601f81116136fa575b50602090601f831160011461368e57600092613683575b50508160011b916000199060031b1c19161781555b60208601518051906001600160401b0382116118765781906133686001850154614a15565b601f8111613630575b50602090601f83116001146135be576000926135b3575b50508160011b916000199060031b1c19161760018201555b60408601519586516001600160401b038111611876576133c36002840154614a15565b601f811161356c575b506020601f82116001146134cb57926004608061064a948461348b98957f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939a986134bc9e6000926134c0575b50508160011b916000199060031b1c19161760028501555b6003840160018060a01b036060830151166001600160601b0360a01b825416179055015191015561347d6040519660e0885261346f60e089018a614936565b9088820360208a0152614936565b908682036040880152614936565b91604435608082015260843560a08201524260c08201528033930390a2604051918291602083526020830190614936565b0390f35b015190508e80613418565b6002840160005260206000209860005b601f19841681106135545750608061064a946001856134bc9d7f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939b999660049661348b9c99601f1981161061353b575b505050811b016002850155613430565b015160001960f88460031b161c191690558e808061352b565b828201518b556001909a0199602092830192016134db565b600284016000526020600020601f830160051c8101602084106135ac575b601f830160051c820181106135a05750506133cc565b6000815560010161358a565b508061358a565b015190508880613388565b9250600184016000526020600020906000935b601f1984168510613615576001945083601f198116106135fc575b505050811b0160018201556133a0565b015160001960f88460031b161c191690558880806135ec565b818101518355602094850194600190930192909101906135d1565b909150600184016000526020600020601f840160051c81016020851061367c575b90849392915b601f830160051c8201811061366d575050613371565b60008155859450600101613657565b5080613651565b01519050888061332e565b9250836000526020600020906000935b601f19841685106136df576001945083601f198116106136c6575b505050811b018155613343565b015160001960f88460031b161c191690558880806136b9565b8181015183556020948501946001909301929091019061369e565b909150836000526020600020601f840160051c810160208510613743575b90849392915b601f830160051c82018110613734575050613317565b6000815585945060010161371e565b5080613718565b015190508a8061319c565b906009850160005260206000209160005b601f19851681106137b3575092600b94926001926101e09583601f1981161061379a575b505050811b0160098501556131b4565b015160001960f88460031b161c191690558a808061378a565b91926020600181928685015181550194019201613766565b600985016000526020600020601f840160051c81016020851061380b575b601f830160051c820181106137ff57505061317b565b600081556001016137e9565b50806137e9565b015190508880613136565b9250600885016000526020600020906000935b601f1984168510613874576001945083601f1981161061385b575b505050811b01600883015561314e565b015160001960f88460031b161c1916905588808061384b565b81810151835560209485019460019093019290910190613830565b909150600885016000526020600020601f840160051c8101602085106138db575b90849392915b601f830160051c820181106138cc57505061311f565b600081558594506001016138b6565b50806138b0565b0151905088806130b1565b9250600685016000526020600020906000935b601f1984168510613944576001945083601f1981161061392b575b505050811b0160068301556130c9565b015160001960f88460031b161c1916905588808061391b565b81810151835560209485019460019093019290910190613900565b909150600685016000526020600020601f840160051c8101602085106139ab575b90849392915b601f830160051c8201811061399c57505061309a565b60008155859450600101613986565b5080613980565b015190508880613040565b9250600385016000526020600020906000935b601f1984168510613a14576001945083601f198116106139fb575b505050811b016003830155613058565b015160001960f88460031b161c191690558880806139eb565b818101518355602094850194600190930192909101906139d0565b909150600385016000526020600020601f840160051c810160208510613a7b575b90849392915b601f830160051c82018110613a6c575050613029565b60008155859450600101613a56565b5080613a50565b015190508880612fe3565b9250600285016000526020600020906000935b601f1984168510613ae4576001945083601f19811610613acb575b505050811b016002830155612ffb565b015160001960f88460031b161c19169055888080613abb565b81810151835560209485019460019093019290910190613aa0565b909150600285016000526020600020601f840160051c810160208510613b4b575b90849392915b601f830160051c82018110613b3c575050612fcc565b60008155859450600101613b26565b5080613b20565b015190508880612f86565b9250600185016000526020600020906000935b601f1984168510613bb4576001945083601f19811610613b9b575b505050811b016001830155612f9e565b015160001960f88460031b161c19169055888080613b8b565b81810151835560209485019460019093019290910190613b70565b909150600185016000526020600020601f840160051c810160208510613c1b575b90849392915b601f830160051c82018110613c0c575050612f6f565b60008155859450600101613bf6565b5080613bf0565b015190508880612f2c565b9250846000526020600020906000935b601f1984168510613c7e576001945083601f19811610613c65575b505050811b018255612f41565b015160001960f88460031b161c19169055888080613c58565b81810151835560209485019460019093019290910190613c3d565b909150846000526020600020601f840160051c810160208510613ce2575b90849392915b601f830160051c82018110613cd3575050612f15565b60008155859450600101613cbd565b5080613cb7565b6020811015613d7c5781811a90600f613d06818460041c16615186565b908260011b936002848604811485151715613d6657858101809111613d6657613d36613d3d9460001a918c614ffa565b5316615186565b916003908101809111613d6657613d5b613d619360001a9189614ffa565b5361513f565b612da6565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60405163bfccc8e960e01b8152600490fd5b60405163d05db01960e01b81526084356004820152602490fd5b604051633abe7db760e21b8152600490fd5b50606460843511612cfe565b60405163fd83f8d960e01b8152600490fd5b60405163a765e58f60e01b8152600490fd5b604051630ac6e45360e31b8152600490fd5b346103a95760403660031901126103a957613e2b61481a565b336001600160a01b03821603613e4757610d5e90600435614f86565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b346103a95760403660031901126103a9576004356001600160401b0381116103a957613ed49036906004016148bd565b613ef06020602435928160405193828580945193849201614913565b8101600381520301902080548210156103a957613f7f91613f10916149f9565b5060405190613f2a82613f238184614a4f565b038361489c565b604051613f3e816111cf8160018601614a4f565b613f9b604051613f55816111cf8160028801614a4f565b613f8d600460018060a01b036003870154169501549360405197889760a0895260a0890190614936565b908782036020890152614936565b908582036040870152614936565b91606084015260808301520390f35b346103a95760203660031901126103a957613fc3614804565b6001600160a01b031660009081526000805160206152f6833981519152602090815260409182902054915160ff9092161515825290f35b346103a9576020806003193601126103a957600435614017615241565b508060005260078252806040600020541480156140d7575b6140bf576000526007815260406000209060056140a6604051936140528561484b565b8054855260018060a01b0380600183015416858701526002820154166040860152604051614087816111cf8160038601614a4f565b6060860152600481015460808601526111cf6040518094819301614a4f565b60a08301526134bc60405192828493845283019061499d565b602490604051906379b7e1e760e11b82526004820152fd5b50801561402f565b346103a9576140ed3661495b565b6140f5614ca4565b6140fe82614b7e565b156103975761032d7f125f88db22967983b401f70f6804d47f43cb545fcb725d0b335fe7d43d9b4a4a916000805160206153568339815191528060005260209060008252610422600160406000200154614e87565b346103a95760403660031901126103a95760043561416f61481a565b816000526000602052614189600160406000200154614e87565b81600052600060205260406000209060018060a01b0316908160005260205260ff60406000205416156141b857005b8160005260006020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b346103a95760203660031901126103a95760043560005260006020526020600160406000200154604051908152f35b346103a95760203660031901126103a9576004358015801561431f575b6143075761425f90615207565b5060405161426c81614830565b81546001600160a01b039081168252604051916142fd919061429c846142958160018901614a4f565b038561489c565b602081019384526003604051956142c1876142ba8160028501614a4f565b038861489c565b8660408401520154606082015251169151926142ef6040519485948552608060208601526080850190614936565b908382036040850152614936565b4260608301520390f35b60249060405190635afa5bc760e11b82526004820152fd5b506006548111614252565b346103a9576020806003193601126103a9576004356001600160401b0381116103a95761435b9036906004016148bd565b9060008051602061533683398151915260005260008152604060002033600052815260ff918260406000205416156106c357604051815193838301946143a2818488614913565b8201906001816002938481528588600a97889303019020015460a01c1615151461463d57600080526000855260406000203360005285528060406000205416156106c3576111cf6144156040518781806144008c8b51928391614913565b81018781520301902060405192838092614a4f565b8581519101208451908188201490811591614634575b50611c2e5780836040518781806144468c8b51928391614913565b810187815203019020015460b01c1680614609575b156145e757604051606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e226144956060830187614936565b916b54726164696e67526561647960a01b88828503948582850152600c81520152426040820152604033930190a280836040518781806144d98c8b51928391614913565b810187815203019020015460b01c1690836040518781806144fe8c8b51928391614913565b810187815203019020015460b81c16816145df575b50156145bd57837ffed1001c142a7ab386454a2f7d78b013ba7ff40595d10c128f2fb6463ccd7b7a9495614581928460405184818951614554818389614913565b81018581520301902001805460ff60a01b1916600160a01b17905560405186519094859382908590614913565b8201908152030190200180546001600160a01b0319163317905560408051818152916145af91830190614936565b9242908201528033930390a2005b6040516348cddbdb60e11b815260048101859052806106896024820186614936565b905086614513565b6040516348cddbdb60e11b815260048101869052806106896024820187614936565b5080836040518781806146208c8b51928391614913565b810187815203019020015460b81c1661445b565b9050158761442b565b604051632072bb0160e11b815260048101869052806106896024820187614936565b346103a9576020806003193601126103a957614679614804565b6001600160a01b03811691908215610c8d5761469c90614697614ca4565b614ba9565b610e65577ff8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e97505906000805160206153368339815191528060005260008252604060002084600052825260ff6040600020541615610e1557600052600481526040600020610e0a815461513f565b346103a9576020806003193601126103a957614722614804565b6001600160a01b03811691908215610c8d5761474590614740614ca4565b614b7e565b610e65577f593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf559906000805160206153568339815191528060005260008252604060002084600052825260ff6040600020541615610e1557600052600481526040600020610e0a815461513f565b346103a95760203660031901126103a9576004359063ffffffff60e01b82168092036103a957602091637965db0b60e01b81149081156147f3575b5015158152f35b6301ffc9a760e01b149050836147ec565b600435906001600160a01b03821682036103a957565b602435906001600160a01b03821682036103a957565b608081019081106001600160401b0382111761187657604052565b60c081019081106001600160401b0382111761187657604052565b60a081019081106001600160401b0382111761187657604052565b604081019081106001600160401b0382111761187657604052565b90601f801991011681019081106001600160401b0382111761187657604052565b81601f820112156103a9578035906001600160401b03821161187657604051926148f1601f8401601f19166020018561489c565b828452602083830101116103a957816000926020809301838601378301015290565b60005b8381106149265750506000910152565b8181015183820152602001614916565b9060209161494f81518092818552858086019101614913565b601f01601f1916010190565b9060406003198301126103a9576004356001600160a01b03811681036103a95791602435906001600160401b0382116103a95761499a916004016148bd565b90565b61499a918151815260018060a01b03806020840151166020830152604083015116604082015260a06149de606084015160c0606085015260c0840190614936565b926080810151608084015201519060a0818403910152614936565b8054821015613d7c576000526005602060002091020190600090565b90600182811c92168015614a45575b6020831014614a2f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691614a24565b9060009291805491614a6083614a15565b918282526001938481169081600014614ac25750600114614a82575b50505050565b90919394506000526020928360002092846000945b838610614aae575050505001019038808080614a7c565b805485870183015294019385908201614a97565b9294505050602093945060ff191683830152151560051b01019038808080614a7c565b60606003198201126103a9576004356001600160a01b03811681036103a957916001600160401b036024358181116103a95783614b24916004016148bd565b926044359182116103a95761499a916004016148bd565b9060406003198301126103a9576001600160401b036004358181116103a95783614b67916004016148bd565b926024359182116103a95761499a916004016148bd565b6001600160a01b031660009081526000805160206152f6833981519152602052604090205460ff1690565b6001600160a01b031660009081527ff3fa603c74bfe2a4719960e47343678c3dc690d2b27a2295acc6fc430833aaf9602052604090205460ff1690565b6001600160a01b03166000908152600080516020615276833981519152602052604090205460ff1690565b6001600160a01b031660009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602052604090205460ff1690565b6001600160a01b03166000908152600080516020615316833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020615296833981519152602052604090205460ff1690565b3360009081526000805160206153b6833981519152602090815260408083205490929060ff1615614cd457505050565b614cdd33615018565b9080845190614ceb82614830565b60428252848201926060368537825115614e7357603084538251600190811015614e5f5790607860218501536041915b808311614e0557505050614dc3576048610689938693614da793614d98985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152614d6f815180928c603789019101614913565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190614913565b0103602881018752018561489c565b5192839262461bcd60e51b845260048401526024830190614936565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015614e4b57614e4491906f181899199a1a9b1b9c1cb0b131b232b360811b901a614e3a8688614ffa565b5360041c9361500b565b9190614d1b565b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b81526032600452602490fd5b600090808252602090828252604092838120338252835260ff848220541615614eb05750505050565b614eb933615018565b91845190614ec682614830565b60428252848201926060368537825115614e7357603084538251600190811015614e5f5790607860218501536041915b808311614f4a57505050614dc3576048610689938693614da793614d98985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152614d6f815180928c603789019101614913565b909192600f81166010811015614e4b57614f7f91906f181899199a1a9b1b9c1cb0b131b232b360811b901a614e3a8688614ffa565b9190614ef6565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416614fb657505050565b80835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b908151811015613d7c570160200190565b8015613d66576000190190565b60405190606082018281106001600160401b0382111761187657604052602a8252602082016040368237825115613d7c57603090538151600190811015613d7c57607860218401536029905b8082116150b85750506150745790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81169060108210156150fc576150f6916f181899199a1a9b1b9c1cb0b131b232b360811b901a6150ec8587614ffa565b5360041c9261500b565b90615064565b60246000634e487b7160e01b81526032600452fd5b93929161513a9061512c604093606088526060880190614936565b908682036020880152614936565b930152565b6000198114613d665760010190565b6001600160401b0381116118765760051b60200190565b805115613d7c5760200190565b8051821015613d7c5760209160051b010190565b60009060ff16600a8110156151b257603091500160ff8111613d665760f81b6001600160f81b03191690565b60610160ff81116151f35760ff6009199116019060ff82116151df575060f81b6001600160f81b03191690565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b82526011600452602482fd5b600654811015613d7c57600660005260021b7ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b6040519061524e8261484b565b606060a083600081526000602082015260006040820152828082015260006080820152015256fe0d2d6a5d08cb5d871289c0a3ca855d9da72909a111c24cce2d5c2b34a20daa54acfff8a39fb957d9d1c8e3ef9f08385e3fcf7bb23ab7ba0ad0f8df93dbde6a68ddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0bb3fcc25fbffa12ea463b3505377899a4d5ddb4858b9c7bd36764686d9425b36bce5fd3347e0dc338dcc0e895534dd4af2740eec95f56cd4ca4b4b2ada357ca0f8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90ea952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5a977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4dad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5a2646970667358221220fbf72e2999965ee7ef77cf3a37bad833f10bca5942fc5a0461b6140336da7ca964736f6c63430008140033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "_auditMineral(string,string)": {
        "details": "only the auditor can audit mineralDetails.Logs audit report on every successful audit.",
        "params": {
          "mineralId": "The ID of the mineral under audition.",
          "report": "The audit status report of the mineral under audition."
        }
      },
      "checkAuditAndInspectionStatus(string)": {
        "details": "checks audit and inspection status",
        "params": {
          "mineralId": "The ID of the mineral to check for audit and inspection status Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId"
        }
      },
      "getAllRoleCounts()": {
        "details": "Returns all role counts in a single call",
        "returns": {
          "auditorCount": "Number of auditors",
          "buyerCount": "Number of buyers",
          "inspectorCount": "Number of inspectors",
          "minerCount": "Number of miners",
          "refinerCount": "Number of refiners",
          "transporterCount": "Number of transporters"
        }
      },
      "getOperation(uint256)": {
        "details": "retrieves operations using operation index Returns An arrray containing operation.actor, operationType, mineralId and timestamp"
      },
      "getOperationsCount()": {
        "details": "get track of number of operations done"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have a specific role",
        "params": {
          "role": "The role to query member count for"
        },
        "returns": {
          "count": "The number of accounts with the role"
        }
      },
      "getRolesForAddress(address)": {
        "details": "Returns all roles assigned to a given address",
        "params": {
          "account": "The address to check roles for"
        },
        "returns": {
          "roles": "An array of role names the address has"
        }
      },
      "getTransaction(uint256)": {
        "details": "retrieves transactions using transactionID",
        "returns": {
          "_0": "transactions using specified transactionId"
        }
      },
      "getTransactionsByMineral(string)": {
        "details": "retrieve transactions using mineralIDs",
        "returns": {
          "_0": "results of transactions with specified mineralIDs"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasMinerRole(address)": {
        "details": "Roles helper functionschecks if an account has a specific role",
        "params": {
          "account": "The address of the account to checked with role association"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "inspectMineral(string,string)": {
        "details": "only the inspector can inspect mineralDetailsLogs audit report on every successful inspection",
        "params": {
          "mineralId": "The ID of the mineral under inspection",
          "report": "The inspection status report of the mineral under inspection"
        }
      },
      "isMineralRegistered(string)": {
        "details": "checks if a mineral with the given ID is registered",
        "params": {
          "mineralId": "the ID of the mineral to check"
        },
        "returns": {
          "_0": "A boolean indicating whether the mineral is registered or not"
        }
      },
      "purchaseMineral(string)": {
        "details": "Only the buyer can purchase mineralDetails",
        "params": {
          "mineralId": "The ID of the mineral under purchase"
        }
      },
      "recordOperation(address,string,string)": {
        "details": "records operation in the supply chain"
      },
      "recordTransaction(address,string,string)": {
        "details": "records a transaction"
      },
      "refineMineral(string,string)": {
        "details": "only the refiner can refiner a mineral",
        "params": {
          "mineralId": "The ID of the mineral under refinery"
        }
      },
      "registerMineral(string,string,uint256,string,uint256,string)": {
        "details": "Register a new mineral - only by miner.Every mineral is assigned a unique mineralId.",
        "params": {
          "_mineralType": "The type of a mineral.",
          "_name": "Mineral name.",
          "_origin": "Mineral Origin.",
          "_purityPercentage": "Mineral purity in percentage.",
          "_storageConditions": "Mineral Storage conditions.",
          "_weight": "Mineral weight in uint256."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferMineral(string,address,string,string)": {
        "details": "only the transporter can transport mineralDetails",
        "params": {
          "_destination": "The Destination area of the mineral(string)",
          "_origin": "The Original location of the mineral under transportation",
          "_receivingParty": "The address of the destination portal",
          "mineralId": "The ID of the mineral under transportation"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_auditMineral(string,string)": {
        "notice": "Emits MineralAudited event."
      },
      "inspectMineral(string,string)": {
        "notice": "Emits MineralInspected event on successful inspection"
      },
      "purchaseMineral(string)": {
        "notice": "Emits MineralPurchased event on successful purchase"
      },
      "recordOperation(address,string,string)": {
        "notice": "Emits OperationRecorded even on successful record"
      },
      "recordTransaction(address,string,string)": {
        "notice": "Emits TransactionRecorded event on successful transaction recording"
      },
      "refineMineral(string,string)": {
        "notice": "Emits MineralRefined event on successfl refining process"
      },
      "registerMineral(string,string,uint256,string,uint256,string)": {
        "notice": "Emits MineralRegistered event on successful registration."
      },
      "transferMineral(string,address,string,string)": {
        "notice": "Emits MineralTransported on successful transportation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3677,
        "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
        "label": "nonce",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3682,
        "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
        "label": "mineralDetails",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(MineralDetails)3659_storage)"
      },
      {
        "astId": 3688,
        "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
        "label": "mineralHistories",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(MineralHistory)3670_storage)dyn_storage)"
      },
      {
        "astId": 3692,
        "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
        "label": "roleMemberCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 6668,
        "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
        "label": "rolesManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(RolesManager)5505"
      },
      {
        "astId": 6719,
        "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
        "label": "operations",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Operation)6715_storage)dyn_storage"
      },
      {
        "astId": 6724,
        "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
        "label": "transactions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Transaction)6705_storage)"
      },
      {
        "astId": 6727,
        "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
        "label": "nextTransactionId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MineralHistory)3670_storage)dyn_storage": {
        "base": "t_struct(MineralHistory)3670_storage",
        "encoding": "dynamic_array",
        "label": "struct RolesManager.MineralHistory[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Operation)6715_storage)dyn_storage": {
        "base": "t_struct(Operation)6715_storage",
        "encoding": "dynamic_array",
        "label": "struct TransactionLog.Operation[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(RolesManager)5505": {
        "encoding": "inplace",
        "label": "contract RolesManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(MineralHistory)3670_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RolesManager.MineralHistory[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(MineralHistory)3670_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MineralDetails)3659_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RolesManager.MineralDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(MineralDetails)3659_storage"
      },
      "t_mapping(t_uint256,t_struct(Transaction)6705_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TransactionLog.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)6705_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MineralDetails)3659_storage": {
        "encoding": "inplace",
        "label": "struct RolesManager.MineralDetails",
        "members": [
          {
            "astId": 3628,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3630,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3632,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "origin",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3634,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "mineralType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3636,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "weight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3638,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "purityPercentage",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3640,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "storageConditions",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3642,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "registeredBy",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3644,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "currentStatus",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 3646,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "currentLocation",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 3648,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "currentHandler",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 3650,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "isPurchased",
            "offset": 20,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3652,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "isRefined",
            "offset": 21,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3654,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "isAudited",
            "offset": 22,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3656,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "isInspected",
            "offset": 23,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3658,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "timestamp",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(MineralHistory)3670_storage": {
        "encoding": "inplace",
        "label": "struct RolesManager.MineralHistory",
        "members": [
          {
            "astId": 3661,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3663,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "fieldChanged",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3665,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "newValue",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3667,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "updatedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3669,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Operation)6715_storage": {
        "encoding": "inplace",
        "label": "struct TransactionLog.Operation",
        "members": [
          {
            "astId": 6708,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "actor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6710,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "operationType",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6712,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "mineralId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 6714,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transaction)6705_storage": {
        "encoding": "inplace",
        "label": "struct TransactionLog.Transaction",
        "members": [
          {
            "astId": 6694,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "transactionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6696,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "sender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6698,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "receiver",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6700,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "mineralId",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 6702,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6704,
            "contract": "contracts/logs/TransactionLog.sol:TransactionLog",
            "label": "transactionType",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}