{
  "address": "0x5c1A05644246d38D3fe8b687c07Daf47982B32c5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "AddressDoesNotHaveRequiredRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DisputeResolution__AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeEscalated_UnableToVote",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeNotEscalated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeStatusNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__DisputeStatusNotPendingOrEscalated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeDefendantAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeDetails",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeEvidence",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidResolutionDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DisputeResolution__NotEligibleToVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__VotingPeriodStillActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "ERC20TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "InsufficientPermissionsToPerformAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccountAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPaymentMethods",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "currentStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attemptedStatus",
          "type": "string"
        }
      ],
      "name": "InvalidTransportStateTransition",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralNotReadyToTrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralRegistry__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralLocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralPurityPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralStorageConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidReceivingPartyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyAudited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyInspected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyPurchased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralNotAudited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralNotInspected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralRegistry__MineralNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__IncorrectETHAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidETHPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidMineralPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidNumberOfPrices",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidTokenPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralAlreadySold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotFoundInWarehouse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotRefined",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__MismatchedArrays",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__TokenNotAccepted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__UnacceptedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "MineralWarehouse__UnacceptedTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__UnauthorizedSeller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NotAssignedTransporter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AccountAlreadyHasRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AccountDoesNotHaveRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralPurityPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralStorageConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidReceivingPartyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyAudited",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyInspected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyPurchased",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyRefined",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        }
      ],
      "name": "RolesManager__MineralPurityPercentageTooLowToRegister",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RolesManager__NotTheAssignedBuyer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "SupplychainValidator__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplychainValidator__InvalidMineralOwnershipChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplychainValidator__InvalidMineralTransactionHistory",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Tokenization__CallerNotMineralTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__InvalidTokenIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__TokenAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__TokenIsAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "TransactionLog__InvalidOperationIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionLog__InvalidOperationType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "TransactionLog__InvalidTransactionIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "TransportRequestAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuditorRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuditorRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "closedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "complainant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "defendant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "details",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closedUnresolvedAt",
          "type": "uint256"
        }
      ],
      "name": "DisputeClosedUnresolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DisputeEscalated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "complainant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "defendant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "details",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raisedAt",
          "type": "uint256"
        }
      ],
      "name": "DisputeRaised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DisputeRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "resolutionDetails",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectorRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectorRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auditedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralStatus",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralInspected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchasedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ApprovedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectionDate",
          "type": "uint256"
        }
      ],
      "name": "MineralReadyToTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "refineryReport",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "refiner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refinedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralRefined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "miner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registeredAt",
          "type": "uint256"
        }
      ],
      "name": "MineralRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "transporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivingParty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "destination",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transportedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralTransported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RefinerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RefinerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roleAssignedAt",
          "type": "uint256"
        }
      ],
      "name": "RoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "revoker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roleRevokedAt",
          "type": "uint256"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransporterRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransporterRoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BUYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSPECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSPORTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "_auditMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignRefiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignTransporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "checkAndEscalateDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "checkAuditAndInspectionStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "complainant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defendant",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "evidence",
          "type": "string"
        },
        {
          "internalType": "enum DisputeResolution.DisputeStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "resolvedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "approveVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rejectVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingDeadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRoleCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refinerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transporterCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auditorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inspectorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyerCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "getMineralHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fieldChanged",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "updatedBy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct RolesManager.MineralHistory[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRolesForAddress",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "roles",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAuditorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasBuyerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasInspectorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasMinerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRefinerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasTransporterRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "inspectMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "isMineralRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "mineralDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mineralType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "storageConditions",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "registeredBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "currentStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "currentLocation",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "currentHandler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRefined",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mineralHistories",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fieldChanged",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "purchaseMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "defendant",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "evidence",
          "type": "string"
        }
      ],
      "name": "raiseDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "refineMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_mineralType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_origin",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_purityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_storageConditions",
          "type": "string"
        }
      ],
      "name": "registerMineral",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "resolutionDetails",
          "type": "string"
        }
      ],
      "name": "resolveDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "resolutionDetails",
          "type": "string"
        }
      ],
      "name": "resolveEscalatedDisputes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeRefiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeTransporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receivingParty",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_destination",
          "type": "string"
        }
      ],
      "name": "transferMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approve",
          "type": "bool"
        }
      ],
      "name": "voteOnDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x28d1c128dfef3815fee3ce58ffba7664de693b68f4c51d20369e84d55531f013",
  "receipt": {
    "to": null,
    "from": "0x0dfDb5bBaEeCE3871f826DF1C6Fe24a2772f5d38",
    "contractAddress": "0x5c1A05644246d38D3fe8b687c07Daf47982B32c5",
    "transactionIndex": 31,
    "gasUsed": "4593107",
    "logsBloom": "0x000000040000000000000000000040000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000002000000000000000000000000000000a0000000000000000000800000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000100000000000020000040000000000000000000000000000000000000000200000000000000000000",
    "blockHash": "0xc12d3cb8cf4f80aed6a43c4750784adaee4fba63fd15f49046678d1711262179",
    "transactionHash": "0x28d1c128dfef3815fee3ce58ffba7664de693b68f4c51d20369e84d55531f013",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 25808982,
        "transactionHash": "0x28d1c128dfef3815fee3ce58ffba7664de693b68f4c51d20369e84d55531f013",
        "address": "0x5c1A05644246d38D3fe8b687c07Daf47982B32c5",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 212,
        "blockHash": "0xc12d3cb8cf4f80aed6a43c4750784adaee4fba63fd15f49046678d1711262179"
      },
      {
        "transactionIndex": 31,
        "blockNumber": 25808982,
        "transactionHash": "0x28d1c128dfef3815fee3ce58ffba7664de693b68f4c51d20369e84d55531f013",
        "address": "0x5c1A05644246d38D3fe8b687c07Daf47982B32c5",
        "topics": [
          "0x458ea7e03b3466b3cf9bc2d66ddea8b11fe9469982816f42666888e6c8c6e664",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000006826ff8c",
        "logIndex": 213,
        "blockHash": "0xc12d3cb8cf4f80aed6a43c4750784adaee4fba63fd15f49046678d1711262179"
      }
    ],
    "blockNumber": 25808982,
    "cumulativeGasUsed": "11050871",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "2f677c6ce168e0016b015b60d61b529e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"AddressDoesNotHaveRequiredRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DisputeResolution__AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeEscalated_UnableToVote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeNotEscalated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeStatusNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__DisputeStatusNotPendingOrEscalated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeDefendantAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeDetails\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeEvidence\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidResolutionDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DisputeResolution__NotEligibleToVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__VotingPeriodStillActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InsufficientPermissionsToPerformAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccountAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentMethods\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attemptedStatus\",\"type\":\"string\"}],\"name\":\"InvalidTransportStateTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralNotReadyToTrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralRegistry__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralLocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralPurityPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralStorageConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidReceivingPartyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyAudited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyInspected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralNotAudited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralNotInspected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralRegistry__MineralNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__IncorrectETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidETHPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidMineralPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidNumberOfPrices\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidTokenPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralAlreadySold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotFoundInWarehouse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotRefined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__MismatchedArrays\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__TokenNotAccepted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__UnacceptedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"MineralWarehouse__UnacceptedTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__UnauthorizedSeller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotAssignedTransporter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AccountAlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AccountDoesNotHaveRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralPurityPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralStorageConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidReceivingPartyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyAudited\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyInspected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyRefined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"}],\"name\":\"RolesManager__MineralPurityPercentageTooLowToRegister\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RolesManager__NotTheAssignedBuyer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"SupplychainValidator__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplychainValidator__InvalidMineralOwnershipChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplychainValidator__InvalidMineralTransactionHistory\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Tokenization__CallerNotMineralTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__InvalidTokenIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__TokenIsAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TransactionLog__InvalidOperationIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionLog__InvalidOperationType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionLog__InvalidTransactionIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"TransportRequestAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuditorRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuditorRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"closedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"complainant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"defendant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closedUnresolvedAt\",\"type\":\"uint256\"}],\"name\":\"DisputeClosedUnresolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisputeEscalated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"complainant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"defendant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raisedAt\",\"type\":\"uint256\"}],\"name\":\"DisputeRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisputeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"resolutionDetails\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectorRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectorRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auditedAt\",\"type\":\"uint256\"}],\"name\":\"MineralAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralStatus\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"}],\"name\":\"MineralInspected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"name\":\"MineralPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ApprovedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectionDate\",\"type\":\"uint256\"}],\"name\":\"MineralReadyToTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"refineryReport\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refiner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refinedAt\",\"type\":\"uint256\"}],\"name\":\"MineralRefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"}],\"name\":\"MineralRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingParty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transportedAt\",\"type\":\"uint256\"}],\"name\":\"MineralTransported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefinerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefinerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleAssignedAt\",\"type\":\"uint256\"}],\"name\":\"RoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleRevokedAt\",\"type\":\"uint256\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransporterRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransporterRoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSPORTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"_auditMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignRefiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"checkAndEscalateDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"checkAuditAndInspectionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"complainant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defendant\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidence\",\"type\":\"string\"},{\"internalType\":\"enum DisputeResolution.DisputeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolvedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approveVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rejectVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRoleCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refinerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transporterCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auditorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inspectorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"getMineralHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RolesManager.MineralHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRolesForAddress\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasBuyerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasMinerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRefinerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasTransporterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"inspectMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"isMineralRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mineralDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"storageConditions\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"currentLocation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentHandler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefined\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mineralHistories\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"purchaseMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"defendant\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidence\",\"type\":\"string\"}],\"name\":\"raiseDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"refineMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_origin\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_storageConditions\",\"type\":\"string\"}],\"name\":\"registerMineral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"resolutionDetails\",\"type\":\"string\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"resolutionDetails\",\"type\":\"string\"}],\"name\":\"resolveEscalatedDisputes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeRefiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receivingParty\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_destination\",\"type\":\"string\"}],\"name\":\"transferMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"voteOnDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"_auditMineral(string,string)\":{\"details\":\"only the auditor can audit mineralDetails.Logs audit report on every successful audit.\",\"params\":{\"mineralId\":\"The ID of the mineral under audition.\",\"report\":\"The audit status report of the mineral under audition.\"}},\"checkAndEscalateDispute(uint256)\":{\"details\":\"Anyone with role can call this to manually trigger escalation for expired disputesEscalates a dispute to the super admin for final admin\"},\"checkAuditAndInspectionStatus(string)\":{\"details\":\"checks audit and inspection status\",\"params\":{\"mineralId\":\"The ID of the mineral to check for audit and inspection status Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\"}},\"constructor\":{\"details\":\"Events to enforce traceability\"},\"getAllRoleCounts()\":{\"details\":\"Returns all role counts in a single call\",\"returns\":{\"auditorCount\":\"Number of auditors\",\"buyerCount\":\"Number of buyers\",\"inspectorCount\":\"Number of inspectors\",\"minerCount\":\"Number of miners\",\"refinerCount\":\"Number of refiners\",\"transporterCount\":\"Number of transporters\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have a specific role\",\"params\":{\"role\":\"The role to query member count for\"},\"returns\":{\"count\":\"The number of accounts with the role\"}},\"getRolesForAddress(address)\":{\"details\":\"Returns all roles assigned to a given address\",\"params\":{\"account\":\"The address to check roles for\"},\"returns\":{\"roles\":\"An array of role names the address has\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasMinerRole(address)\":{\"details\":\"Roles helper functionschecks if an account has a specific role\",\"params\":{\"account\":\"The address of the account to checked with role association\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"inspectMineral(string,string)\":{\"details\":\"only the inspector can inspect mineralDetailsLogs audit report on every successful inspection\",\"params\":{\"mineralId\":\"The ID of the mineral under inspection\",\"report\":\"The inspection status report of the mineral under inspection\"}},\"isMineralRegistered(string)\":{\"details\":\"checks if a mineral with the given ID is registered\",\"params\":{\"mineralId\":\"the ID of the mineral to check\"},\"returns\":{\"_0\":\"A boolean indicating whether the mineral is registered or not\"}},\"purchaseMineral(string)\":{\"details\":\"Only the buyer can purchase mineralDetails\",\"params\":{\"mineralId\":\"The ID of the mineral under purchase\"}},\"raiseDispute(string,address,string,string)\":{\"details\":\"Registers a dispute\",\"params\":{\"defendant\":\"The address of the party being accused\",\"details\":\"The details of the dispute\",\"evidence\":\"Evidence supporting the dispute\",\"mineralId\":\"The ID of the mineral in question\"}},\"refineMineral(string,string)\":{\"details\":\"only the refiner can refiner a mineral\",\"params\":{\"mineralId\":\"The ID of the mineral under refinery\"}},\"registerMineral(string,string,uint256,string,uint256,string)\":{\"details\":\"Register a new mineral - only by miner.Every mineral is assigned a unique mineralId.\",\"params\":{\"_mineralType\":\"The type of a mineral.\",\"_name\":\"Mineral name.\",\"_origin\":\"Mineral Origin.\",\"_purityPercentage\":\"Mineral purity in percentage.\",\"_storageConditions\":\"Mineral Storage conditions.\",\"_weight\":\"Mineral weight in uint256.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"resolveDispute(uint256,string)\":{\"details\":\"Resolves a dispute\",\"params\":{\"disputeId\":\"The ID of the dispute to resolve\",\"resolutionDetails\":\"The details of the resolution\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferMineral(string,address,string,string)\":{\"details\":\"only the transporter can transport mineralDetails\",\"params\":{\"_destination\":\"The Destination area of the mineral(string)\",\"_origin\":\"The Original location of the mineral under transportation\",\"_receivingParty\":\"The address of the destination portal\",\"mineralId\":\"The ID of the mineral under transportation\"}},\"voteOnDispute(uint256,bool)\":{\"details\":\"Voting mechanism for resolving disputes\",\"params\":{\"approve\":\"Whether the voter approves resoluction or rejects it\",\"disputeId\":\"The ID of the disputet to vote on\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_auditMineral(string,string)\":{\"notice\":\"Emits MineralAudited event.\"},\"inspectMineral(string,string)\":{\"notice\":\"Emits MineralInspected event on successful inspection\"},\"purchaseMineral(string)\":{\"notice\":\"Emits MineralPurchased event on successful purchase\"},\"refineMineral(string,string)\":{\"notice\":\"Emits MineralRefined event on successfl refining process\"},\"registerMineral(string,string,uint256,string,uint256,string)\":{\"notice\":\"Emits MineralRegistered event on successful registration.\"},\"resolveDispute(uint256,string)\":{\"notice\":\"Emits DisputeResolved event on successful dispute resolution\"},\"transferMineral(string,address,string,string)\":{\"notice\":\"Emits MineralTransported on successful transportation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/DisputeResolution.sol\":\"DisputeResolution\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title RolesManager contract\\n * @author @0xJonaseb11\\n * It acts as the factory of all the roles in the whole supplychain\\n * It is where all the roles in the chain are assigned and granted. No any other contract can handle that\\n *\\n * It is a Modular contract\\n */\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\n\\ncontract RolesManager is AccessControl, Errors {\\n    /*/////////////////////////////////////////////////////\\n                           SUPPLYCHAIN ROLES\\n            /////////////////////////////////////////////////////*/\\n    bytes32 public constant MINER_ROLE = keccak256(\\\"MINER_ROLE\\\");\\n    bytes32 public constant REFINER_ROLE = keccak256(\\\"REFINER_ROLE\\\");\\n    bytes32 public constant TRANSPORTER_ROLE = keccak256(\\\"TRANSPORTER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTOR_ROLE\\\");\\n    bytes32 public constant BUYER_ROLE = keccak256(\\\"BUYER_ROLE\\\");\\n\\n    /*//////////////////////////////////////////////////////\\n                                 EVENTS\\n        //////////////////////////////////////////////////////*/\\n    event RoleAssigned(address indexed account, bytes32 indexed role, uint256 roleAssignedAt);\\n    event RoleRevoked(bytes32 role, address account, address revoker, uint256 roleRevokedAt);\\n\\n    event MineralRegistered(\\n        string mineralId,\\n        string mineralName,\\n        string mineralType,\\n        string origin,\\n        uint256 weight,\\n        uint256 purityPercentage,\\n        address indexed miner,\\n        uint256 registeredAt\\n    );\\n    event MineralRefined(string mineralId, string refineryReport, address indexed refiner, uint256 refinedAt);\\n    event MineralTransported(\\n        string mineralId,\\n        address indexed transporter,\\n        address receivingParty,\\n        string origin,\\n        string destination,\\n        uint256 transportedAt\\n    );\\n    event MineralInspected(string mineralId, string mineralStatus, address indexed inspector, uint256 inspectedAt);\\n    event MineralAudited(string mineralId, string status, address indexed auditor, uint256 auditedAt);\\n    event MineralPurchased(string mineralId, address indexed buyer, uint256 purchasedAt);\\n    event MineralReadyToTrade(string mineralId, address indexed ApprovedBy, string status, uint256 inspectionDate);\\n\\n    // For every assigned role\\n    event MinerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event RefinerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event TransporterRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event AuditorRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event InspectorRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event BuyerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event AdminRoleAssigned(address indexed assignee, uint256 timestamp);\\n    // For every revoked role\\n    event MinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event RefinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event TransporterRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event AuditorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event InspectorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event BuyerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event AdminRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n\\n    struct MineralDetails {\\n        string id;\\n        string name;\\n        string origin;\\n        string mineralType;\\n        uint256 weight;\\n        uint256 purityPercentage;\\n        string storageConditions;\\n        address registeredBy;\\n        string currentStatus;\\n        string currentLocation;\\n        address currentHandler;\\n        bool isPurchased;\\n        bool isRefined;\\n        bool isAudited;\\n        bool isInspected;\\n        uint256 timestamp;\\n    }\\n\\n    struct MineralHistory {\\n        string id;\\n        string fieldChanged;\\n        string newValue;\\n        address updatedBy;\\n        uint256 timestamp;\\n    }\\n\\n    uint256 private nonce = block.timestamp + block.number;\\n    mapping(string => MineralDetails) public mineralDetails;\\n    mapping(string => MineralHistory[]) public mineralHistories;\\n    mapping(bytes32 => uint256) public roleMemberCount;\\n\\n    // Set the deployer as the admin\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        roleMemberCount[DEFAULT_ADMIN_ROLE] = 1;\\n        emit AdminRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(MINER_ROLE, msg.sender);\\n        // roleMemberCount[MINER_ROLE] = 1;\\n        // emit MinerRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(AUDITOR_ROLE, msg.sender);\\n        // roleMemberCount[AUDITOR_ROLE] = 1;\\n        // emit AuditorRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(INSPECTOR_ROLE, msg.sender);\\n        // roleMemberCount[INSPECTOR_ROLE] = 1;\\n        // emit InspectorRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(BUYER_ROLE, msg.sender);\\n        // roleMemberCount[BUYER_ROLE] = 1;\\n        // emit BuyerRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(REFINER_ROLE, msg.sender);\\n        // roleMemberCount[REFINER_ROLE] = 1;\\n        // emit RefinerRoleAssigned(msg.sender, block.timestamp);\\n\\n        // _setupRole(TRANSPORTER_ROLE, msg.sender);\\n        // roleMemberCount[TRANSPORTER_ROLE] = 1;\\n        // emit TransporterRoleAssigned(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev checks if sender has specific role\\n     */\\n    modifier restrictedToRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) {\\n            revert InsufficientPermissionsToPerformAction(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyNonZeroAddress(address account) {\\n        if (account == address(0)) {\\n            revert InvalidAccountAddress();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyValidMineralId(string memory mineralId) {\\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\\n            revert InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ATTENTION HERE - CHECKING VALIDITY OF A MINERAL\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\        \\n    //////////////////////////////////////////////////////////////*/\\n    modifier onlyValidMineral(string memory mineralId) virtual {\\n        if (!isMineralRegistered(mineralId) || bytes(mineralId).length == 0) {\\n            revert InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        _;\\n    }\\n\\n    /*////////////////////////////////////////////////////\\n            =====================================================\\n            ///////// ROLE-BASED FUNCTIONALITY FUNCTIONS ////////\\n            ====================================================\\n            //////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ================================================================\\n                              MINING ENTERPRISE PORTAL\\n        =================================================================\\n       //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Register a new mineral - only by miner.\\n     * @dev Every mineral is assigned a unique mineralId.\\n     * @param _name Mineral name.\\n     * @param _mineralType The type of a mineral.\\n     * @param _weight Mineral weight in uint256.\\n     * @param _origin Mineral Origin.\\n     * @param _purityPercentage Mineral purity in percentage.\\n     * @param _storageConditions Mineral Storage conditions.\\n     * @notice Emits MineralRegistered event on successful registration.\\n     */\\n    function registerMineral(\\n        string memory _name,\\n        string memory _mineralType,\\n        uint256 _weight,\\n        string memory _origin,\\n        uint256 _purityPercentage,\\n        string memory _storageConditions\\n    ) external virtual restrictedToRole(MINER_ROLE) returns (string memory) {\\n        if (bytes(_name).length == 0) revert RolesManager__InvalidMineralName();\\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\\n\\n        if (bytes(_mineralType).length == 0) revert RolesManager__InvalidMineralType();\\n\\n        if (_weight == 0) revert RolesManager__InvalidMineralWeight();\\n\\n        if (_purityPercentage == 0 || _purityPercentage > 100) revert RolesManager__InvalidMineralPurityPercentage();\\n\\n        if (_purityPercentage <= 80) revert RolesManager__MineralPurityPercentageTooLowToRegister(_purityPercentage);\\n\\n        if (bytes(_storageConditions).length == 0) revert RolesManager__InvalidMineralStorageConditions();\\n\\n        string memory mineralId = _generateHashedMineralId(_mineralType);\\n\\n        mineralDetails[mineralId] = MineralDetails({\\n            id: mineralId,\\n            name: _name,\\n            origin: _origin,\\n            mineralType: _mineralType,\\n            weight: _weight,\\n            purityPercentage: _purityPercentage,\\n            storageConditions: _storageConditions,\\n            registeredBy: msg.sender,\\n            currentStatus: \\\"Raw\\\",\\n            currentLocation: \\\"Mining Center\\\",\\n            currentHandler: msg.sender,\\n            isPurchased: false,\\n            isRefined: false,\\n            isAudited: false,\\n            isInspected: false,\\n            timestamp: block.timestamp\\n        });\\n\\n        // record initial mineral history\\n        mineralHistories[mineralId].push(\\n            MineralHistory({\\n                id: mineralId,\\n                fieldChanged: \\\"Registered\\\",\\n                newValue: string(abi.encodePacked(\\\"Origin: \\\", _origin)),\\n                updatedBy: msg.sender,\\n                timestamp: block.timestamp\\n            })\\n        );\\n\\n        emit MineralRegistered(\\n            mineralId,\\n            _name,\\n            _mineralType,\\n            _origin,\\n            _weight,\\n            _purityPercentage,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        return mineralId;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                              PROCESSING ENTERPRISE\\n        ===============================================================                    \\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*///////////////////////////////////////////////\\n                              REFINER\\n        ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the refiner can refiner a mineral\\n     * @param mineralId The ID of the mineral under refinery\\n     * @notice Emits MineralRefined event on successfl refining process\\n     */\\n    function refineMineral(string memory mineralId, string memory report) public restrictedToRole(REFINER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isRefined == true) revert RolesManager__MineralAlreadyRefined(mineralId);\\n\\n        mineralDetails[mineralId].isRefined = true;\\n\\n        emit MineralRefined(mineralId, report, msg.sender, block.timestamp);\\n    }\\n\\n    /*////////////////////////////////////////////////\\n                              TRANSPORTER\\n          ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the transporter can transport mineralDetails\\n     * @param mineralId The ID of the mineral under transportation\\n     * @param _receivingParty The address of the destination portal\\n     * @param _origin The Original location of the mineral under transportation\\n     * @param _destination The Destination area of the mineral(string)\\n     * @notice Emits MineralTransported on successful transportation\\n     */\\n    function transferMineral(\\n        string memory mineralId,\\n        address _receivingParty,\\n        string memory _origin,\\n        string memory _destination\\n    ) public virtual restrictedToRole(TRANSPORTER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (_receivingParty == address(0)) revert RolesManager__InvalidReceivingPartyAddress();\\n\\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\\n\\n        if (bytes(_destination).length == 0) revert RolesManager__InvalidMineralDestination();\\n\\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\\n\\n        mineralDetails[mineralId].currentHandler = msg.sender;\\n\\n        emit MineralTransported(mineralId, msg.sender, _receivingParty, _origin, _destination, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                     SUPPLYCHAIN VALIDATION PORTAL\\n        ===============================================================\\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*///////////////////////////////////////////////\\n                               INSPECTOR\\n            ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the inspector can inspect mineralDetails\\n     * @param mineralId The ID of the mineral under inspection\\n     * @param report The inspection status report of the mineral under inspection\\n     * @notice Emits MineralInspected event on successful inspection\\n     * @dev Logs audit report on every successful inspection\\n     */\\n    function inspectMineral(string memory mineralId, string memory report) public restrictedToRole(INSPECTOR_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isInspected == true) revert RolesManager__MineralAlreadyInspected(mineralId);\\n\\n        mineralDetails[mineralId].isInspected = true;\\n\\n        emit MineralInspected(mineralId, report, msg.sender, block.timestamp);\\n\\n        /*//////////////////////////////////////////////////\\n                          HANDLE INSPECTION REPORTING\\n           ///////////////////////////////////////////////////*/\\n    }\\n\\n    /*/////////////////////////////////////////////\\n                               AUDITOR\\n            ////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the auditor can audit mineralDetails.\\n     * @dev Logs audit report on every successful audit.\\n     * @param mineralId The ID of the mineral under audition.\\n     * @param report The audit status report of the mineral under audition.\\n     * @notice Emits MineralAudited event.\\n     */\\n    function _auditMineral(\\n        string memory mineralId,\\n        string memory report\\n    ) public /*virtual*/ restrictedToRole(AUDITOR_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isAudited == true) revert RolesManager__MineralAlreadyAudited(mineralId);\\n\\n        mineralDetails[mineralId].isAudited = true;\\n\\n        emit MineralAudited(mineralId, report, msg.sender, block.timestamp);\\n\\n        /*//////////////////////////////////////////////////\\n                          HANDLE AUDIT REPORTING\\n           ///////////////////////////////////////////////////*/\\n    }\\n\\n    /**\\n     * @dev Only the buyer can purchase mineralDetails\\n     * @param mineralId The ID of the mineral under purchase\\n     * @notice Emits MineralPurchased event on successful purchase\\n     */\\n    function purchaseMineral(string memory mineralId) public restrictedToRole(BUYER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\\n\\n        (bool isAudited, bool isInspected) = checkAuditAndInspectionStatus(mineralId);\\n\\n        if (!(isAudited && isInspected)) revert RolesManager__MineralNotMarketReady(mineralId);\\n\\n        // require(mineralDetails[mineralId].currentHandler == msg.sender, \\\"You are not the assigned buyer for this mineral!!\\\");\\n\\n        mineralDetails[mineralId].isPurchased = true;\\n        mineralDetails[mineralId].currentHandler = msg.sender;\\n\\n        emit MineralPurchased(mineralId, msg.sender, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     ROLESMANAGER HELPER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ADMIN FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ////////////////////////////////////////////////\\n    /////// ROLEMANAGEMENT FUNCTIONS ////////////////\\n    ////////////////////////////////////////////////\\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n\\n    /*////////////////////////////////////////////////////\\n                  ROLE MANAGEMENT FUNCTIONS\\n    ////////////////////////////////////////////////////*/\\n\\n    function assignMiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasMinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(MINER_ROLE, account);\\n        roleMemberCount[MINER_ROLE]++;\\n        emit MinerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignRefiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasRefinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(REFINER_ROLE, account);\\n        roleMemberCount[REFINER_ROLE]++;\\n        emit RefinerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignTransporter(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasTransporterRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(TRANSPORTER_ROLE, account);\\n        roleMemberCount[TRANSPORTER_ROLE]++;\\n        emit TransporterRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignAuditor(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasAuditorRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(AUDITOR_ROLE, account);\\n        roleMemberCount[AUDITOR_ROLE]++;\\n        emit AuditorRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignInspector(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasInspectorRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(INSPECTOR_ROLE, account);\\n        roleMemberCount[INSPECTOR_ROLE]++;\\n        emit InspectorRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignBuyer(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasBuyerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(BUYER_ROLE, account);\\n        roleMemberCount[BUYER_ROLE]++;\\n        emit BuyerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n\\n    function revokeMiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasMinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(MINER_ROLE, account);\\n        if (roleMemberCount[MINER_ROLE] > 0) {\\n            roleMemberCount[MINER_ROLE]--;\\n        }\\n        emit MinerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeRefiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRefinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(REFINER_ROLE, account);\\n\\n        if (roleMemberCount[REFINER_ROLE] > 0) {\\n            roleMemberCount[REFINER_ROLE]--;\\n        }\\n        emit RefinerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeTransporter(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasTransporterRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(TRANSPORTER_ROLE, account);\\n        if (roleMemberCount[TRANSPORTER_ROLE] > 0) {\\n            roleMemberCount[TRANSPORTER_ROLE]--;\\n        }\\n        emit TransporterRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeInspector(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasInspectorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(INSPECTOR_ROLE, account);\\n        if (roleMemberCount[INSPECTOR_ROLE] > 0) {\\n            roleMemberCount[INSPECTOR_ROLE]--;\\n        }\\n        emit InspectorRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeAuditor(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasAuditorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(AUDITOR_ROLE, account);\\n        if (roleMemberCount[AUDITOR_ROLE] > 0) {\\n            roleMemberCount[AUDITOR_ROLE]--;\\n        }\\n        emit AuditorRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeBuyer(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasBuyerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(BUYER_ROLE, account);\\n        if (roleMemberCount[BUYER_ROLE] > 0) {\\n            roleMemberCount[BUYER_ROLE]--;\\n        }\\n        emit BuyerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    /*/////////////////////////////////////////////////////\\n                  NEW ROLE COUNT FUNCTIONS\\n    /////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the number of accounts that have a specific role\\n     * @param role The role to query member count for\\n     * @return count The number of accounts with the role\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256 count) {\\n        if (!isValidRole(role)) revert RolesManager__InvalidRole();\\n        return roleMemberCount[role];\\n    }\\n\\n    /**\\n     * @dev Returns all role counts in a single call\\n     * @return minerCount Number of miners\\n     * @return refinerCount Number of refiners\\n     * @return transporterCount Number of transporters\\n     * @return auditorCount Number of auditors\\n     * @return inspectorCount Number of inspectors\\n     * @return buyerCount Number of buyers\\n     */\\n    function getAllRoleCounts()\\n        public\\n        view\\n        returns (\\n            uint256 minerCount,\\n            uint256 refinerCount,\\n            uint256 transporterCount,\\n            uint256 auditorCount,\\n            uint256 inspectorCount,\\n            uint256 buyerCount\\n        )\\n    {\\n        return (\\n            roleMemberCount[MINER_ROLE],\\n            roleMemberCount[REFINER_ROLE],\\n            roleMemberCount[TRANSPORTER_ROLE],\\n            roleMemberCount[AUDITOR_ROLE],\\n            roleMemberCount[INSPECTOR_ROLE],\\n            roleMemberCount[BUYER_ROLE]\\n        );\\n    }\\n\\n    // ... (keep all your existing functions below this point) ...\\n    // Only modification needed is to ensure the _setupRole function also increments counters:\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n\\n        roleMemberCount[role]++;\\n    }\\n\\n    /**\\n     * @dev Revokes role from an account - onlydmin\\n     * @param account The address of the account to be revoked role by the admin\\n     * @notice Emits event of the revoked role\\n     */\\n\\n    /*/////////////////////////////////////////////////////\\n   ====================================================\\n            HELPER FUNCTIONS SECTION\\n   ====================================================\\n   /////////////////////////////////////////////////////*/\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE OWNERSHIP CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Returns all roles assigned to a given address\\n     * @param account The address to check roles for\\n     * @return roles An array of role names the address has\\n     */\\n    function getRolesForAddress(\\n        address account\\n    ) public view onlyNonZeroAddress(account) returns (string[] memory roles) {\\n        // Count how many roles the address has\\n        uint256 roleCount = 0;\\n\\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) roleCount++;\\n        if (hasRole(MINER_ROLE, account)) roleCount++;\\n        if (hasRole(REFINER_ROLE, account)) roleCount++;\\n        if (hasRole(TRANSPORTER_ROLE, account)) roleCount++;\\n        if (hasRole(AUDITOR_ROLE, account)) roleCount++;\\n        if (hasRole(INSPECTOR_ROLE, account)) roleCount++;\\n        if (hasRole(BUYER_ROLE, account)) roleCount++;\\n\\n        // Initialize array with the counted size\\n        roles = new string[](roleCount);\\n        uint256 index = 0;\\n\\n        // Populate the array with role names\\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) {\\n            roles[index] = \\\"ADMIN\\\";\\n            index++;\\n        }\\n        if (hasRole(MINER_ROLE, account)) {\\n            roles[index] = \\\"MINER\\\";\\n            index++;\\n        }\\n        if (hasRole(REFINER_ROLE, account)) {\\n            roles[index] = \\\"REFINER\\\";\\n            index++;\\n        }\\n        if (hasRole(TRANSPORTER_ROLE, account)) {\\n            roles[index] = \\\"TRANSPORTER\\\";\\n            index++;\\n        }\\n        if (hasRole(AUDITOR_ROLE, account)) {\\n            roles[index] = \\\"AUDITOR\\\";\\n            index++;\\n        }\\n        if (hasRole(INSPECTOR_ROLE, account)) {\\n            roles[index] = \\\"INSPECTOR\\\";\\n            index++;\\n        }\\n        if (hasRole(BUYER_ROLE, account)) {\\n            roles[index] = \\\"BUYER\\\";\\n            index++;\\n        }\\n\\n        return roles;\\n    }\\n\\n    // function _setupRole(bytes32 role, address account) internal virtual {\\n    //     __grantRole(role, account);\\n    // }\\n\\n    /**\\n     ** @dev Roles helper functions\\n     * @dev checks if an account has a specific role\\n     * @param account The address of the account to checked with role association\\n     */\\n    function hasMinerRole(address account) public view returns (bool) {\\n        return hasRole(MINER_ROLE, account);\\n    }\\n    function hasRefinerRole(address account) public view returns (bool) {\\n        return hasRole(REFINER_ROLE, account);\\n    }\\n    function hasTransporterRole(address account) public view returns (bool) {\\n        return hasRole(TRANSPORTER_ROLE, account);\\n    }\\n    function hasInspectorRole(address account) public view returns (bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n    function hasAuditorRole(address account) public view returns (bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n    function hasBuyerRole(address account) public view returns (bool) {\\n        return hasRole(BUYER_ROLE, account);\\n    }\\n    function hasAdminRole(address account) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    // Helper function to validate the role\\n    function isValidRole(bytes32 role) private pure returns (bool) {\\n        return\\n            role == MINER_ROLE ||\\n            role == REFINER_ROLE ||\\n            role == TRANSPORTER_ROLE ||\\n            role == AUDITOR_ROLE ||\\n            role == INSPECTOR_ROLE ||\\n            role == BUYER_ROLE;\\n    }\\n\\n    /**\\n    * @dev checks audit and inspection status\\n    * @param mineralId The ID of the mineral to check for audit and inspection status\\n\\n    * Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\\n    */\\n    function checkAuditAndInspectionStatus(\\n        string memory mineralId\\n    ) public virtual restrictedToRole(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert RolesManager__InvalidMineralIdOrNotFound();\\n        }\\n\\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\\n            emit MineralReadyToTrade(mineralId, msg.sender, \\\"TradingReady\\\", block.timestamp);\\n        } else {\\n            revert RolesManager__MineralNotMarketReady(mineralId);\\n        }\\n\\n        isAudited = mineralDetails[mineralId].isAudited;\\n        isInspected = mineralDetails[mineralId].isInspected;\\n\\n        return (isAudited, isInspected);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            GETTERS - For Traceability\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getMineralHistory(string memory mineralId) public view virtual returns (MineralHistory[] memory) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert RolesManager__InvalidMineralIdOrNotFound();\\n        }\\n\\n        return mineralHistories[mineralId];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n    ===============================================================\\n         MINERAL REGISTRATION HELPER FUNCTIONS SECTION\\n    ===============================================================\\n    ////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev checks if a mineral with the given ID is registered\\n     * @param mineralId the ID of the mineral to check\\n     * @return A boolean indicating whether the mineral is registered or not\\n     */\\n    function isMineralRegistered(string memory mineralId) public virtual returns (bool) {\\n        if (bytes(mineralId).length == 0) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\\n            revert MineralRegistry__MineralNotRegistered(mineralId);\\n        }\\n\\n        return true;\\n    }\\n\\n    //////////////////////////////////////////////////////\\n    //////// GENERATE HASHED MINERALID FOR UNIQUENESS/////\\n    //////////////////////////////////////////////////////\\n    function _generateHashedMineralId(string memory mineralType) internal returns (string memory) {\\n        bytes32 fullHash = keccak256(abi.encodePacked(mineralType, msg.sender, block.timestamp, nonce++));\\n\\n        // Convert first 4 bytes (8 hex characters) into hex string with \\\"0x\\\"\\n        bytes memory shortHex = new bytes(10); // 2 for \\\"0x\\\", 8 for hex chars\\n        shortHex[0] = \\\"0\\\";\\n        shortHex[1] = \\\"x\\\";\\n        for (uint i = 0; i < 4; i++) {\\n            shortHex[2 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] >> 4));\\n            shortHex[3 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] & 0x0f));\\n        }\\n\\n        return string(abi.encodePacked(mineralType, \\\"-\\\", string(shortHex)));\\n    }\\n\\n    // helper: convert nibble to hex char (0-9, a-f)\\n    function _nibbleToHexChar(uint8 nibble) internal pure returns (bytes1) {\\n        return nibble < 10 ? bytes1(nibble + 0x30) : bytes1(nibble + 0x61 - 10);\\n    }\\n\\n    ///////////////////////////////////////////////\\n    //////// getting all registered minerals /////\\n    // //////////////////////////////////////////////\\n    // function getAllRegisteredMineral() public view returns(MineralDetails[] memory mineralDetails) {\\n    //     return mineralDetails;\\n\\n    // }\\n}\\n\",\"keccak256\":\"0xe1d42561c04e03e5c20a3ffa091227c6ddf7827616de718f563331de64846c2f\",\"license\":\"MIT\"},\"contracts/governance/DisputeResolution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title DisputeResolution contract\\n * @author @0xJonaseb11\\n * @dev It handles and resolves disputes raised by supplychain members\\n * @dev It incorporates weighted voting to make sure that disputes are resolved in transparency\\n * @notice Hard-to-resolve disputes are later on decided by the super admins for resolution\\n */\\n\\nimport { MineralRegistry } from \\\"../modules/MineralRegistry.sol\\\";\\nimport { TransactionLog } from \\\"../logs/TransactionLog.sol\\\";\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\n\\ncontract DisputeResolution is RolesManager {\\n    RolesManager private rolesManager;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event DisputeRaised(\\n        uint256 indexed disputeId,\\n        string mineralId,\\n        address indexed complainant,\\n        address defendant,\\n        string details,\\n        uint256 raisedAt\\n    );\\n    event DisputeResolved(uint256 indexed disputeId, string resolutionDetails, uint256 timestamp);\\n    event DisputeClosedUnresolved(\\n        address closedBy,\\n        uint256 disputeId,\\n        string mineralId,\\n        address complainant,\\n        address defendant,\\n        string details,\\n        uint256 closedUnresolvedAt\\n    );\\n    event DisputeEscalated(uint256 indexed disputeId, uint256 timestamp);\\n    event DisputeRejected(uint256 indexed disputeId, string reason, uint256 timestamp);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ENUM FOR STATUS\\n    //////////////////////////////////////////////////////////////*/\\n    enum DisputeStatus {\\n        Pending,\\n        Resolved,\\n        Rejected,\\n        Escalated\\n    }\\n\\n    struct Dispute {\\n        uint256 disputeId;\\n        string mineralId;\\n        address complainant;\\n        address defendant;\\n        string details;\\n        string evidence;\\n        DisputeStatus status;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n        uint256 approveVotes;\\n        uint256 rejectVotes;\\n        mapping(address => bool) hasVoted;\\n        uint256 votingDeadline;\\n    }\\n\\n    mapping(uint256 => Dispute) public disputes;\\n    uint256 public disputeCount;\\n    uint256 public votingThreshold = 3; // Minimum votes required for resolution\\n    uint256 public votingDuration = 10 days;\\n\\n    /**\\n     * @dev Events to enforce traceability\\n     */\\n\\n    constructor() {}\\n\\n    modifier onlyValidDisputeId(uint256 disputeId) {\\n        if (disputeId == 0 || disputes[disputeId].disputeId != disputeId)\\n            revert DisputeResolution__InvalidDisputeIdOrNotFound();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Registers a dispute\\n     * @param mineralId The ID of the mineral in question\\n     * @param defendant The address of the party being accused\\n     * @param details The details of the dispute\\n     * @param evidence Evidence supporting the dispute\\n     */\\n    function raiseDispute(\\n        string memory mineralId,\\n        address defendant,\\n        string calldata details,\\n        string calldata evidence\\n    ) external {\\n        if (bytes(mineralId).length == 0) revert DisputeResolution__InvalidMineralIdOrNotFound();\\n        if (defendant == address(0)) revert DisputeResolution__InvalidDisputeDefendantAddress();\\n        if (bytes(details).length == 0) revert DisputeResolution__InvalidDisputeDetails();\\n        if (bytes(evidence).length == 0) revert DisputeResolution__InvalidDisputeEvidence();\\n\\n        uint256 disputeId = disputeCount++;\\n\\n        Dispute storage dispute = disputes[disputeId];\\n        dispute.disputeId = disputeId;\\n        dispute.mineralId = mineralId;\\n        dispute.complainant = msg.sender;\\n        dispute.defendant = defendant;\\n        dispute.details = details;\\n        dispute.evidence = evidence;\\n        dispute.status = DisputeStatus.Pending;\\n        dispute.createdAt = block.timestamp;\\n        dispute.resolvedAt = 0;\\n        dispute.approveVotes = 0;\\n        dispute.rejectVotes = 0;\\n        dispute.votingDeadline = block.timestamp + votingDuration;\\n\\n        emit DisputeRaised(disputeId, mineralId, msg.sender, defendant, details, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Voting mechanism for resolving disputes\\n     * @param disputeId The ID of the disputet to vote on\\n     * @param approve Whether the voter approves resoluction or rejects it\\n     */\\n\\n    function voteOnDispute(uint256 disputeId, bool approve) external {\\n        Dispute storage dispute = disputes[disputeId];\\n\\n        if (dispute.status != DisputeStatus.Pending) revert DisputeResolution__DisputeStatusNotPending(disputeId);\\n        if (dispute.hasVoted[msg.sender]) revert DisputeResolution__AlreadyVoted(msg.sender);\\n        if (\\n            !hasRole(AUDITOR_ROLE, msg.sender) &&\\n            !hasRole(INSPECTOR_ROLE, msg.sender) &&\\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender)\\n        ) {\\n            revert DisputeResolution__NotEligibleToVote(msg.sender);\\n        }\\n\\n        /**\\n         * check if voting period has expired, if yes -> Auto escalate\\n         */\\n        if (block.timestamp >= dispute.votingDeadline) {\\n            dispute.status = DisputeStatus.Escalated;\\n\\n            emit DisputeEscalated(disputeId, block.timestamp);\\n            revert DisputeResolution__DisputeEscalated_UnableToVote(disputeId);\\n        }\\n\\n        dispute.hasVoted[msg.sender] == true;\\n\\n        if (approve) {\\n            dispute.approveVotes++;\\n        } else {\\n            dispute.rejectVotes++;\\n        }\\n\\n        if (dispute.approveVotes >= votingThreshold) {\\n            dispute.status = DisputeStatus.Resolved;\\n            dispute.resolvedAt = block.timestamp;\\n\\n            emit DisputeResolved(disputeId, \\\"Approved by majority voting\\\", block.timestamp);\\n        } else if (dispute.rejectVotes >= votingThreshold) {\\n            dispute.status = DisputeStatus.Rejected;\\n            emit DisputeRejected(disputeId, \\\"Rejected by majority voting\\\", block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @dev Resolves a dispute\\n     * @param disputeId The ID of the dispute to resolve\\n     * @param resolutionDetails The details of the resolution\\n     * @notice Emits DisputeResolved event on successful dispute resolution\\n     */\\n    function resolveDispute(\\n        uint256 disputeId,\\n        string calldata resolutionDetails\\n    ) external restrictedToRole(DEFAULT_ADMIN_ROLE) {\\n        Dispute storage dispute = disputes[disputeId];\\n\\n        if (dispute.disputeId != disputeId) revert DisputeResolution__InvalidDisputeIdOrNotFound();\\n        if (bytes(resolutionDetails).length == 0) revert DisputeResolution__InvalidResolutionDetails();\\n        if (dispute.status != DisputeStatus.Pending || dispute.status != DisputeStatus.Escalated)\\n            revert DisputeResolution__DisputeStatusNotPendingOrEscalated();\\n\\n        dispute.status = DisputeStatus.Resolved;\\n        dispute.resolvedAt = block.timestamp;\\n\\n        emit DisputeResolved(disputeId, resolutionDetails, block.timestamp);\\n    }\\n\\n    function resolveEscalatedDisputes(\\n        uint256 disputeId,\\n        string memory resolutionDetails\\n    ) public restrictedToRole(DEFAULT_ADMIN_ROLE) {\\n        Dispute storage dispute = disputes[disputeId];\\n\\n        if (dispute.status != DisputeStatus.Escalated) revert DisputeResolution__DisputeNotEscalated(disputeId);\\n\\n        dispute.status = DisputeStatus.Resolved;\\n        dispute.resolvedAt = block.timestamp;\\n\\n        emit DisputeResolved(disputeId, resolutionDetails, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             REJECT DISPUTE \\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ESCALATE DISPUTE\\n        //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Anyone with role can call this to manually trigger escalation for expired disputes\\n     * @dev Escalates a dispute to the super admin for final admin\\n     */\\n    function checkAndEscalateDispute(uint256 disputeId) external {\\n        Dispute storage dispute = disputes[disputeId];\\n\\n        if (dispute.status != DisputeStatus.Pending) revert DisputeResolution__DisputeStatusNotPending(disputeId);\\n\\n        if (!hasRole(AUDITOR_ROLE, msg.sender) && !hasRole(INSPECTOR_ROLE, msg.sender)) {\\n            revert DisputeResolution__NotEligibleToVote(msg.sender);\\n        }\\n\\n        if (block.timestamp < dispute.votingDeadline) revert DisputeResolution__VotingPeriodStillActive();\\n\\n        dispute.status = DisputeStatus.Escalated;\\n\\n        emit DisputeEscalated(disputeId, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xcb30f3615a56d6ba5d66bf54021d1955c230c85bbca81f5bdfd3c8cb25fa1f78\",\"license\":\"MIT\"},\"contracts/logs/TransactionLog.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title TransactionLog\\n * @author @0xJonaseb11\\n * It keeps track of all the operations, transactions perfomed in the whole supply chain\\n * Helps to keep track of actities in the chain to enforce traceability\\n */\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\n\\ncontract TransactionLog is Errors, RolesManager {\\n    RolesManager private rolesManager;\\n\\n    // events to enforce transparency n traceability\\n    event TransactionRecorded(\\n        uint256 indexed transactionId,\\n        address indexed sender,\\n        address indexed receiver,\\n        string mineralId,\\n        uint256 timestamp,\\n        string transactionType\\n    );\\n    event OperationRecorded(address indexed actor, string operationType, string mineralId, uint256 timestamp);\\n\\n    struct Transaction {\\n        uint256 transactionId;\\n        address sender;\\n        address receiver;\\n        string mineralId;\\n        uint256 timestamp;\\n        string transactionType;\\n    }\\n\\n    /**\\n     * @dev operations to help in supplychainValidation contract\\n     */\\n    struct Operation {\\n        address actor;\\n        string operationType;\\n        string mineralId;\\n        uint256 timestamp;\\n    }\\n\\n    Operation[] private operations;\\n\\n    mapping(uint256 => Transaction) private transactions;\\n    uint256 private nextTransactionId = 1;\\n\\n    modifier onlyAuthorizedRoles() {\\n        if (\\n            !hasRole(MINER_ROLE, msg.sender) ||\\n            !hasRole(TRANSPORTER_ROLE, msg.sender) ||\\n            !hasRole(AUDITOR_ROLE, msg.sender) ||\\n            !hasRole(INSPECTOR_ROLE, msg.sender) ||\\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender)\\n        ) revert InsufficientPermissionsToPerformAction(msg.sender);\\n        _;\\n    }\\n\\n    // setters\\n\\n    /**\\n     * @dev records operation in the supply chain\\n     * @notice Emits OperationRecorded even on successful record\\n     */\\n    function recordOperation(\\n        address actor,\\n        string memory operationType,\\n        string memory mineralId\\n    ) external onlyAuthorizedRoles onlyNonZeroAddress(actor) onlyValidMineralId(mineralId) {\\n        if (bytes(operationType).length == 0) revert TransactionLog__InvalidOperationType();\\n\\n        Operation memory newOperation = Operation({\\n            actor: actor,\\n            operationType: operationType,\\n            mineralId: mineralId,\\n            timestamp: block.timestamp\\n        });\\n        operations.push(newOperation);\\n\\n        emit OperationRecorded(actor, operationType, mineralId, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev records a transaction\\n     * @notice Emits TransactionRecorded event on successful transaction recording\\n     */\\n\\n    function recordTransaction(\\n        address receiver,\\n        string memory mineralId,\\n        string memory transactionType\\n    ) public onlyAuthorizedRoles onlyValidMineralId(mineralId) onlyNonZeroAddress(receiver) {\\n        if (bytes(transactionType).length == 0) revert TransactionLog__InvalidOperationType();\\n\\n        uint256 transactionId = nextTransactionId++;\\n        transactions[transactionId] = Transaction({\\n            transactionId: transactionId,\\n            sender: msg.sender,\\n            receiver: receiver,\\n            mineralId: mineralId,\\n            timestamp: block.timestamp,\\n            transactionType: transactionType\\n        });\\n\\n        emit TransactionRecorded(transactionId, msg.sender, receiver, mineralId, block.timestamp, transactionType);\\n    }\\n\\n    // getters\\n\\n    /**\\n     * @dev retrieves operations using operation index\\n     * Returns An arrray containing operation.actor, operationType, mineralId and timestamp\\n     */\\n    function getOperation(\\n        uint256 index\\n    ) external view returns (address actor, string memory operationType, string memory mineralId, uint256 timestamp) {\\n        if (index == 0 || index > operations.length) revert TransactionLog__InvalidOperationIndex(index);\\n\\n        Operation memory operation = operations[index]; // \\u2705 Now safe to access\\n\\n        return (operation.actor, operation.operationType, operation.mineralId, block.timestamp);\\n    }\\n    /**\\n     * @dev get track of number of operations done\\n     */\\n    function getOperationsCount() external view returns (uint256) {\\n        return operations.length;\\n    }\\n\\n    /**\\n     * @dev retrieves transactions using transactionID\\n     * @return transactions using specified transactionId\\n     */\\n    function getTransaction(uint256 transactionId) public view returns (Transaction memory) {\\n        if (transactions[transactionId].transactionId == transactionId || transactionId == 0)\\n            revert TransactionLog__InvalidTransactionIdOrNotFound(transactionId);\\n\\n        return transactions[transactionId];\\n    }\\n\\n    /**\\n     * @dev retrieve transactions using mineralIDs\\n     * @return results of transactions with specified mineralIDs\\n     */\\n    function getTransactionsByMineral(\\n        string memory mineralId\\n    ) public view onlyValidMineralId(mineralId) returns (Transaction[] memory) {\\n        uint256 count = 0;\\n\\n        for (uint256 i = 1; i < nextTransactionId; i++) {\\n            if (keccak256(bytes(transactions[i].mineralId)) == keccak256(bytes(mineralId))) {\\n                count++;\\n            }\\n        }\\n\\n        Transaction[] memory results = new Transaction[](count);\\n        uint256 index = 0;\\n        for (uint256 i = 1; i < nextTransactionId; i++) {\\n            if (keccak256(bytes(transactions[i].mineralId)) == keccak256(bytes(mineralId))) {\\n                results[index] = transactions[i];\\n                index++;\\n            }\\n        }\\n\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x4b25c021ac073573581f79f5d6db24095e958b3c90a6d474ac28896f18b791c0\",\"license\":\"MIT\"},\"contracts/modules/MineralRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title MineralRegistry contract\\n * @author @0xJonaseb11\\n * @dev It is a mineral factory contract. It is where new minerals are registered, updated and gotten till next step\\n * @dev Minerals are gotten from mineral registry contract and all other operations proceed right from there!!\\n * @notice It is the base contract of the supplychain\\n */\\n\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\n\\ncontract MineralRegistry is RolesManager {\\n    RolesManager private rolesManager;\\n    // uint256 private nextMineralId = 1;\\n\\n    // Events for transparency\\n    event MineralUpdated(\\n        string mineralId,\\n        string updatedField,\\n        string newValue,\\n        address indexed updatedBy,\\n        uint256 updatedAt\\n    );\\n    event MineralLocationUpdated(\\n        string mineralId,\\n        string previousLocation,\\n        string newLocation,\\n        address indexed tranporter\\n    );\\n\\n    /**\\n     * @dev connects RolesManager contract\\n     */\\n    constructor(address rolesManagerAddress) {\\n        rolesManager = RolesManager(rolesManagerAddress);\\n    }\\n\\n    /**\\n     * @dev Restrict actions to specific roles\\n     */\\n    modifier onlyAuthorized(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) {\\n            revert InsufficientPermissionsToPerformAction(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Updates mineral details - only by authorized roles\\n     * @param mineralId The ID of the mineral under update\\n     * @param newStatus New status of the mineral\\n     * @notice Emits MineralUpdated event on successful updation\\n     */\\n    function updateMineralStatus(string memory mineralId, string memory newStatus) public {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        if (bytes(newStatus).length == 0) revert MineralRegistry__InvalidMineralStatus();\\n\\n        if (\\n            !hasRole(REFINER_ROLE, msg.sender) ||\\n            !hasRole(TRANSPORTER_ROLE, msg.sender) ||\\n            !hasRole(AUDITOR_ROLE, msg.sender) ||\\n            !hasRole(INSPECTOR_ROLE, msg.sender)\\n        ) {\\n            revert InsufficientPermissionsToPerformAction(msg.sender);\\n        }\\n\\n        mineralDetails[mineralId].currentStatus = newStatus;\\n        mineralDetails[mineralId].timestamp = block.timestamp;\\n\\n        // record mineral history\\n        mineralHistories[mineralId].push(\\n            MineralHistory({\\n                id: mineralId,\\n                fieldChanged: \\\"Status\\\",\\n                newValue: newStatus,\\n                updatedBy: msg.sender,\\n                timestamp: block.timestamp\\n            })\\n        );\\n\\n        emit MineralUpdated(mineralId, \\\"Status\\\", newStatus, msg.sender, block.timestamp);\\n    }\\n\\n    /*////////////////////////////////////////////////////////////\\n        =============================================================\\n                       TRANSPORTATION ENTERPRISE\\n        =============================================================               \\n        ////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev updates the location of the mineral\\n     * @param mineralId the ID of the mineral to update\\n     * @param newLocation The new location of the mineral\\n     * @notice Emits MineralLocationUpdated event on successful location update!\\n     */\\n    function updateMineralLocation(\\n        string memory mineralId,\\n        string memory newLocation\\n    ) public onlyAuthorized(TRANSPORTER_ROLE) {\\n        // custom error handling\\n\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        if (bytes(newLocation).length == 0) {\\n            revert MineralRegistry__InvalidMineralLocation();\\n        }\\n\\n        string memory previousLocation = mineralDetails[mineralId].currentLocation;\\n        mineralDetails[mineralId].currentLocation = newLocation;\\n\\n        emit MineralLocationUpdated(mineralId, previousLocation, newLocation, msg.sender);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                     SUPPLYCHAIN VALIDATION PORTAL\\n        ===============================================================\\n        //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev retrieves mineral details of specified mineralId\\n     * @return mineral details of specified mineralId\\n     */\\n    function getMineralDetails(string memory mineralId) public view virtual returns (MineralDetails memory) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        return mineralDetails[mineralId];\\n    }\\n\\n    /**\\n     * @dev retrieves fll history of a mineral (for audit retail)\\n     * @return history of specified mineral sing its mineralId\\n     */\\n    function _getMineralHistory(string memory mineralId /*override*/) public view returns (MineralHistory[] memory) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        return mineralHistories[mineralId];\\n    }\\n\\n    /**\\n     * @dev checks if a mineral with the given ID is registered\\n     * @param mineralId the ID of the mineral to check\\n     * @return A boolean indicating whether the mineral is registered or not\\n     */\\n\\n    function isMineralAudited(string memory mineralId) public view returns (bool) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        return mineralDetails[mineralId].isAudited;\\n    }\\n\\n    function isMineralInspected(string memory mineralId) public view returns (bool) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        return mineralDetails[mineralId].isInspected;\\n    }\\n\\n    /*///////////////////////////////////////////////\\n                         AUDITOR\\n        ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev enables an auditor to audit a mineral\\n     * @notice Emits MineralAudited event on successful auditing of a mineral\\n     */\\n\\n    /*///////////////////////////////////////////////////////\\n                          INSPECTOR\\n        ///////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev enables only the inspector to audit a mineralDetails\\n     * @notice Emits MineralInspected even\\n     */\\n\\n    /**\\n     * @dev checks audit and inspection status\\n     * Returns the status of both audit and inspection of mineral according to mineralId\\n     */\\n    function _checkAuditAndInspectionStatus(\\n        string memory mineralId\\n    ) public /*override*/ onlyAuthorized(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\\n            emit MineralReadyToTrade(mineralId, msg.sender, \\\"TradingReady\\\", block.timestamp);\\n        } else {\\n            revert MineralNotReadyToTrade(mineralId);\\n        }\\n\\n        // explicitly return audit and inspection results\\n        return (mineralDetails[mineralId].isAudited, mineralDetails[mineralId].isInspected);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            HELPER FUNCTIONS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev helper function to convert address to string\\n     * @return string of address\\n     */\\n    function addressToString(address _address) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(_address)));\\n        bytes memory characters = \\\"ABACDEFGHIJ1245678909876\\\";\\n\\n        bytes memory str = new bytes(42);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            str[2 + i * 2] = characters[uint8(value[i + 12] >> 4)];\\n            str[3 + i * 2] = characters[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x95f7962555c34f590a380365b7c100e7a24ce3006d0c78b47a48c5a60ee27a73\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract Errors {\\n    /*//////////////////////////////////////////////////////////////\\n                        MINERALREGISTRY__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error MineralRegistry__MineralNotRegistered(string mineralId);\\n    error MineralRegistry__MineralAlreadyPurchased();\\n    error MineralRegistry__MineralAlreadyAudited();\\n    error MineralRegistry__MineralAlreadyInspected();\\n    error MineralRegistry__MineralNotAudited();\\n    error MineralRegistry__MineralNotInspected();\\n\\n    error MineralRegistry__InvalidMineralDetails();\\n    error MineralRegistry__InvalidMineralIdOrNotFound(string mineralId);\\n    error MineralRegistry__InvalidMineralStatus();\\n    error MineralRegistry__InvalidMineralName();\\n    error MineralRegistry__InvalidMineralOrigin();\\n    error MineralRegistry__InvalidMineralType();\\n    error MineralRegistry__InvalidMineralWeight();\\n    error MineralRegistry__InvalidMineralPurityPercentage();\\n    error MineralRegistry__InvalidMineralStorageConditions();\\n    error MineralRegistry__InvalidMineralLocation();\\n    error MineralRegistry__InvalidReceivingPartyAddress();\\n    error MineralRegistry__InvalidMineralDestination();\\n\\n    error MineralNotReadyToTrade(string mineralId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ROLESMANAGER__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n    error RolesManager__MineralAlreadyRefined(string mineralId);\\n    error RolesManager__MineralAlreadyPurchased(string mineralId);\\n    error RolesManager__MineralAlreadyInspected(string mineralId);\\n    error RolesManager__MineralAlreadyAudited(string mineralId);\\n    error RolesManager__NotTheAssignedBuyer(address caller);\\n\\n    error RolesManager__InvalidMineralName();\\n    error RolesManager__InvalidMineralOrigin();\\n    error RolesManager__InvalidMineralDestination();\\n\\n    error RolesManager__MineralNotMarketReady(string mineralId);\\n\\n    error RolesManager__InvalidMineralIdOrNotFound();\\n    error RolesManager__InvalidMineralType();\\n    error RolesManager__InvalidReceivingPartyAddress();\\n    error RolesManager__InvalidMineralStorageConditions();\\n    error RolesManager__InvalidMineralPurityPercentage();\\n    error RolesManager__MineralPurityPercentageTooLowToRegister(uint256 purityPercentage);\\n    error RolesManager__InvalidMineralWeight();\\n\\n    error RolesManager__InvalidAddress();\\n    error RolesManager__InvalidRole();\\n\\n    // Roles Assignment and revocation\\n    error RolesManager__AccountAlreadyHasRole();\\n    error RolesManager__AccountDoesNotHaveRole();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            DISPUTERESOLUTION__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n    error DisputeResolution__InvalidMineralIdOrNotFound();\\n    error DisputeResolution__InvalidDisputeDefendantAddress();\\n    error DisputeResolution__InvalidDisputeDetails();\\n    error DisputeResolution__InvalidDisputeEvidence();\\n    error DisputeResolution__InvalidDisputeIdOrNotFound();\\n    error DisputeResolution__InvalidResolutionDetails();\\n    error DisputeResolution__DisputeStatusNotPendingOrEscalated();\\n    error DisputeResolution__DisputeStatusNotPending(uint256 disputeId);\\n    error DisputeResolution__NotEligibleToVote(address caller);\\n    error DisputeResolution__AlreadyVoted(address caller);\\n    error DisputeResolution__DisputeEscalated_UnableToVote(uint256 disputeId);\\n    error DisputeResolution__VotingPeriodStillActive();\\n    error DisputeResolution__DisputeNotEscalated(uint256 disputeId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MINERALWAREHOUSE__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error MineralWarehouse__InvalidTokenAddress(address tokenAddress);\\n    error MineralWarehouse__MineralNotRefined(string mineralId);\\n    error MineralWarehouse__InvalidNumberOfPrices();\\n    error MineralWarehouse__UnacceptedToken(address tokenAddress);\\n    error MineralWarehouse__UnacceptedTokens(address[] tokenAddresses);\\n    error MineralWarehouse__MineralNotMarketReady(string mineralId);\\n    error MineralWarehouse__InvalidMineralPrice();\\n    error MineralWarehouse__MineralAlreadySold(string mineralId);\\n    error MineralWarehouse__UnauthorizedSeller(address seller);\\n    error MineralNotMarketReady(string mineralId);\\n    error MineralWarehouse__IncorrectETHAmount();\\n    error MineralWarehouse__ETHTransferFailed();\\n    error MineralWarehouse__InvalidTokenPrice();\\n\\n    error MineralWarehouse__MismatchedArrays();\\n    error MineralWarehouse__InvalidETHPrice();\\n    error MineralWarehouse__TokenNotAccepted(address tokenAddress);\\n\\n    error MineralWarehouse__MineralNotFoundInWarehouse(string mineralId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            TOKENISATION__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error Tokenization__TokenAlreadyExists(uint256 tokenId);\\n    error Tokenization__TokenIsAlreadyMinted(uint256 tokenId);\\n    error Tokenization__InvalidTokenIdOrNotFound(uint256 tokenId);\\n    error Tokenization__CallerNotMineralTokenOwner(uint256 tokenId, address caller);\\n    error Tokenization__InvalidTokenId(uint256 tokenId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            TRANSACTIONlOG__CUSTOM ERRORS\\n       //////////////////////////////////////////////////////////////*/\\n    error TransactionLog__InvalidOperationType();\\n    error TransactionLog__InvalidOperationIndex(uint256 index);\\n    error TransactionLog__InvalidTransactionIdOrNotFound(uint256 transactionId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        SUPPLYCHAINVALIDATOR__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error SupplychainValidator__InvalidMineralIdOrNotFound(string mineralId);\\n    error SupplychainValidator__InvalidMineralTransactionHistory();\\n    error SupplychainValidator__InvalidMineralOwnershipChain();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             GLOBAL ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n    error InvalidAccountAddress();\\n    error ERC20TokenTransferFailed(address token, uint256 tokenAmount);\\n    error InvalidPaymentMethods();\\n    error InvalidMineralIdOrNotFound(string mineralId);\\n    error InsufficientPermissionsToPerformAction(address caller);\\n\\n    /////////////////////////////////////\\n    // LOGISTICS MANAGER ERRORS /////////\\n    /////////////////////////////////////\\n    error TransportRequestAlreadyExists(string mineralId);\\n    error AddressDoesNotHaveRequiredRole(address caller, bytes32 role);\\n    error NotAssignedTransporter(string mineralId, address caller);\\n    error InvalidTransportStateTransition(string currentStatus, string attemptedStatus);\\n}\\n\",\"keccak256\":\"0x9b1b8d0828a0d7960988398eef2b8605af3485151b661a3bc695eb4362b00e38\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234620000e257434201804211620000cc576001556200002333620000e7565b50600080805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec80546000198114620000b8579160409160018094019055808052600460205220556040514281527f458ea7e03b3466b3cf9bc2d66ddea8b11fe9469982816f42666888e6c8c6e66460203392a26003600855620d2f00600955604051614fef9081620001798239f35b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b600052601160045260246000fd5b600080fd5b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff166200017457818052816020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b509056fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714614179575080630958fc2d146140bf5780630dacad2e14614005578063126ee33814613cd0578063132002fc14613cb2578063248a9ca314613c835780632f2ff15d14613c44578063309514df14613bc95780633499c3a214613b7957806335ba620714613a7357806336568abe14613a2c5780633a7adea514612b3d5780633cee830814612a5b578063480d1dd3146129a15780634e2a3109146128a85780634eabbe771461287f578063564a565d146127465780635aee1b151461252357806362827733146125055780636377741d1461244b5780636394f6e6146124225780636e1d616e146123f957806370e22e42146123a957806375a2b0d4146121d557806379451cd7146121ac5780637a01a1da146121835780637ae9c160146121085780637cde2b991461200f5780637fd9579b14611eec578063826fe0f514611cc75780638850845f14611c7757806391d1485414611c2a5780639969119414611b2c5780639b188dd614611ab15780639c16b33a14611657578063a217fddf1461163b578063a28889e11461161d578063a4f5df121461135a578063a917601b146112a0578063abaa536f14611250578063ac851dfd1461117e578063b6ba1ca714611152578063b9c5b8331461102d578063beae461514610fdd578063c395fcb314610f8d578063ca15c87314610ea3578063cc82b09014610dd7578063cf51b45d14610c8f578063d547741f14610c4e578063de7ce39114610bfe578063df422bf2146106d7578063e3a3c522146106ae578063e438fdf814610633578063f17f352314610426578063f5716a851461036e5763fc1032eb1461028757600080fd5b3461036957610295366142a5565b61029d61458d565b6102a6826144e1565b156103575761032e7f93e936184fad9f80c7000aa987f91be0cd621bacde11839fdc7139f3d9c2407b91600080516020614f3a8339815191528060005260006020526102f96001604060002001546145d3565b61030285614b78565b5060005260046020526040600020805480610345575b50506040519182916040835260408301906143f6565b4260208301526001600160a01b03909416930390a2005b61034e90614ce1565b90553880610318565b604051632ac1560560e21b8152600490fd5b600080fd5b346103695761037c366142a5565b61038461458d565b61038d8261450c565b156103575761032e7f4614600adaea632b1e4c381ad24471dab7b587dca104c8dd4da76bc64f19716f91600080516020614f5a8339815191528060005260006020526103e06001604060002001546145d3565b6103e985614b03565b50600052600460205260406000208054806104145750506040519182916040835260408301906143f6565b61041d90614ce1565b90558480610318565b34610369576080366003190112610369576001600160401b036004358181116103695761045790369060040161424f565b906104606141e2565b906044358181116103695761047990369060040161424f565b906064359081116103695761049290369060040161424f565b90600080516020614e5a83398151915260005260209260008452604060002033600052845260ff604060002054161561061b576001600160a01b03168015610609578151156105f7578251156105e557604051600160ff600a8851938881818c01966104ff81838a6142e7565b81016002815203019020015460a01c161515146105bf57936105b093926105a292600a61055a847f55b00b3c29344a545244b18d70b135e423405427088bd5425f13d690b82310b4998b6040519384928392519283916142e7565b8101600281520301902001336bffffffffffffffffffffffff60a01b8254161790556105916040519860a08a5260a08a01906143f6565b9288015286820360408801526143f6565b9084820360608601526143f6565b914260808201528033930390a2005b604051632072bb0160e11b815260048101869052806105e160248201896143f6565b0390fd5b604051635dbef47560e01b8152600490fd5b6040516326813e6f60e01b8152600490fd5b60405163bea3fd2f60e01b8152600490fd5b604051630568555f60e41b8152336004820152602490fd5b3461036957610641366142a5565b61064961458d565b61065282614562565b156103575761032e7f352e14c53d161e2481e65145b53265d1608f979a93a06df66d4c99b2a84ddc6391600080516020614e7a8339815191528060005260006020526106a56001604060002001546145d3565b6103e985614a8e565b34610369576000366003190112610369576020604051600080516020614e7a8339815191528152f35b3461036957602080600319360112610369576001600160a01b036106f96141cc565b168015610bec576000906000805260008352604060002081600052835260ff8060406000205416610be3575b600080516020614f1a83398151915291826000526000855260406000208160005285528160406000205416610bd3575b600080516020614f5a833981519152806000526000865260406000208260005286528260406000205416610bc3575b600080516020614e5a833981519152806000526000875260406000208360005287528360406000205416610bb3575b600080516020614f3a833981519152806000526000885260406000208460005288528460406000205416610ba3575b600080516020614e7a83398151915291826000526000895260406000208560005289528560406000205416610b93575b600080516020614efa833981519152938460005260008a526040600020866000528a528660406000205416610b83575b61084b89614cee565b986108596040519a8b61422e565b808a52610868601f1991614cee565b018a8a60005b838110610b7257505050506000976000805260008b526040600020876000528b528760406000205416610b37575b60005260008a526040600020866000528a528660406000205416610afa575b6000526000895260406000208560005289528560406000205416610abb575b6000526000885260406000208460005288528460406000205416610a78575b6000526000875260406000208360005287528360406000205416610a39575b60005260008652604060002082600052865282604060002054166109f8575b600052600085526040600020906000528452604060002054166109b5575b506040519082820192808352815180945260408301938160408260051b8601019301916000955b8287106109895785850386f35b9091929382806109a5600193603f198a820301865288516143f6565b960192019601959291909261097c565b6109f1906040516109c581614213565b6005815264212aaca2a960d91b858201526109e08285614d12565b526109eb8184614d12565b50614cd2565b5082610955565b92610a3390604051610a0981614213565b600981526824a729a822a1aa27a960b91b88820152610a288288614d12565b526109eb8187614d12565b92610937565b93610a7290604051610a4a81614213565b600781526620aaa224aa27a960c91b89820152610a678289614d12565b526109eb8188614d12565b93610918565b94610ab590604051610a8981614213565b600b81526a2a2920a729a827a92a22a960a91b8a820152610aaa828a614d12565b526109eb8189614d12565b946108f9565b95610af490604051610acc81614213565b60078152662922a324a722a960c91b8b820152610ae9828b614d12565b526109eb818a614d12565b956108da565b96610b3190604051610b0b81614213565b600581526426a4a722a960d91b8c820152610b26828c614d12565b526109eb818b614d12565b966108bb565b9750604051610b4581614213565b600581526420a226a4a760d91b8b820152610b5f8a614d05565b52610b6989614d05565b5060019761089c565b606083828194010152018b9061086e565b97610b8d90614cd2565b97610842565b96610b9d90614cd2565b96610812565b95610bad90614cd2565b956107e2565b94610bbd90614cd2565b946107b3565b93610bcd90614cd2565b93610784565b92610bdd90614cd2565b92610755565b60019250610725565b60405163200db56f60e11b8152600490fd5b3461036957602036600319011261036957610c176141cc565b6001600160a01b03166000908152600080516020614eda833981519152602090815260409182902054915160ff9092161515825290f35b3461036957604036600319011261036957610c8d600435610c6d6141e2565b90806000526000602052610c886001604060002001546145d3565b614bed565b005b34610369576040366003190112610369576004356024356001600160401b03811161036957610cc290369060040161445e565b336000908152600080516020614f9a833981519152602052604090205490919060ff161561061b5782600052600660205260406000209183835403610dc5578015610db357600683019283549360ff85166004811015610d9d57801590811591610d91575b50610d7f5760017f619a485783a3870e8a79daa87da1f5dc43342edeb762bd43a859a89c36dc00259560ff1916179055600842910155610d74604051928392604084526040840191614db8565b4260208301520390a2005b60405163cb6f8af560e01b8152600490fd5b60039150141587610d27565b634e487b7160e01b600052602160045260246000fd5b60405163868ff73d60e01b8152600490fd5b604051630c9ae81f60e21b8152600490fd5b3461036957602036600319011261036957610df06141cc565b6001600160a01b038116908115610bec57610e0961458d565b610e1281614562565b610e9157610e1f90614851565b50600080516020614e7a83398151915260005260046020527f9d423956391424a558206d539d4c7b96f2596f9d71b6fe92efe1f071a870ba948054610e6390614cd2565b90557f49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e0926020604051428152a2005b6040516314726de560e21b8152600490fd5b3461036957602036600319011261036957600435600080516020614f1a83398151915281148015610f76575b8015610f5f575b8015610f48575b8015610f31575b8015610f1a575b15610f085760005260046020526020604060002054604051908152f35b604051636b9c461160e01b8152600490fd5b50600080516020614efa8339815191528114610eeb565b50600080516020614e7a8339815191528114610ee4565b50600080516020614f3a8339815191528114610edd565b50600080516020614e5a8339815191528114610ed6565b50600080516020614f5a8339815191528114610ecf565b3461036957602036600319011261036957610fa66141cc565b6001600160a01b03166000908152600080516020614f9a833981519152602090815260409182902054915160ff9092161515825290f35b3461036957602036600319011261036957610ff66141cc565b6001600160a01b03166000908152600080516020614e1a833981519152602090815260409182902054915160ff9092161515825290f35b3461036957600036600319011261036957600460209081527f973ccc145476ef147b966a44694f8b2d26bac5a3d44a844fec6be696fe5fea70547f02ff85b9f193a3a7824cbaf5a79db262c0bac955152adf2752c6413d76b2d3c7547f0e08e55c6329ca2d4f38429c472032b4e97537c869a64c376bb7e702721eb8c3547fa792fa383e6bd9c6b4465bbfd8031f4b47377210fa121067c03906e9afac6246547f9d423956391424a558206d539d4c7b96f2596f9d71b6fe92efe1f071a870ba9454600080516020614efa8339815191526000527f5455ba4b8a75b33fa0f1f7affd9817680912f06b7b194bcf9ac01183c4930020546040805196875296860194909452948401919091526060830152608082019290925260a081019190915260c090f35b346103695760203660031901126103695760043560005260046020526020604060002054604051908152f35b3461036957602080600319360112610369576004356001600160401b038111610369576111af90369060040161424f565b80511561122d576040516111e96111f08351928581818701956111d38183896142e7565b8101600281520301902060405192838092614360565b038261422e565b83815191012090825190200361120a575060405160018152f35b906105e16040519283926311bb0bc960e31b8452600484015260248301906143f6565b906105e160405192839263f855236d60e01b8452600484015260248301906143f6565b34610369576020366003190112610369576112696141cc565b6001600160a01b03166000908152600080516020614dda833981519152602090815260409182902054915160ff9092161515825290f35b34610369576020366003190112610369576112b96141cc565b6001600160a01b038116908115610bec576112d261458d565b6112db81614537565b610e91576112e8906147da565b50600080516020614e5a83398151915260005260046020527f0e08e55c6329ca2d4f38429c472032b4e97537c869a64c376bb7e702721eb8c3805461132c90614cd2565b90557f964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a66020604051428152a2005b3461036957604036600319011261036957600435602480358015158103610369578260005260209160068352604060002091600683019160ff8354166004811015611608576115f257600b8401903360005281865260ff604060002054166115dd57600080516020614f3a83398151915260005260008652604060002033600052865260ff6040600020541615806115ac575b80611589575b61157457600c85015442101561153457503360005284521561151f576009820161141d8154614cd2565b90555b60098201546008549081116114a45750916080917f619a485783a3870e8a79daa87da1f5dc43342edeb762bd43a859a89c36dc002593600160ff198254161790556008429101556040519060408252601b60408301527f417070726f766564206279206d616a6f7269747920766f74696e67000000000060608301524290820152a2005b9091600a015410156114b257005b7f66e6fff3b5dd3c33ccb5596403903d31b44bf59342b0a32d9925a86d0d6efeb791608091600260ff198254161790556040519060408252601b60408301527f52656a6563746564206279206d616a6f7269747920766f74696e67000000000060608301524290820152a2005b600a820161152d8154614cd2565b9055611420565b86807f366e7dd2cab048eaff199cb82b06661733696643e03b462e0b2635552275ed1488604051428152a26040519063544b484760e11b82526004820152fd5b6040516312081e4d60e21b8152336004820152fd5b506000805260008652604060002033600052865260ff60406000205416156113f3565b50600080516020614e7a83398151915260005260008652604060002033600052865260ff60406000205416156113ed565b60405163f7a8a48560e01b8152336004820152fd5b60405163396c029560e11b815260048101879052fd5b50634e487b7160e01b60009081526021600452fd5b34610369576000366003190112610369576020600754604051908152f35b3461036957600036600319011261036957602060405160008152f35b34610369576080366003190112610369576004356001600160401b0381116103695761168790369060040161424f565b61168f6141e2565b6044356001600160401b038111610369576116ae90369060040161445e565b916064356001600160401b038111610369576116ce90369060040161445e565b919093855115611a9f576001600160a01b03821615611a8d578015611a7b578215611a69576007549461170086614cd2565b60075585600052600660205260406000209386855587516001600160401b0381116119685761173f816117366001890154614326565b60018901614c50565b806020601f82116001146119fb576000916119f0575b508160011b916000199060031b1c19161760018601555b6002850180546001600160a01b031990811633179091556003860180549091166001600160a01b038616179055600485016001600160401b038411611968576117bf846117b98354614326565b83614c50565b836000601f82116001146119895760009161197e575b508460011b906000198660031b1c19161790555b60058501916001600160401b0382116119685781906118128261180c8654614326565b86614c50565b600090601f83116001146118fd576000926118f2575b50508160011b916000199060031b1c19161790555b6006830160ff19815416905542600784015560006008840155600060098401556000600a8401556009544201938442116118dc577f848fa50545e34cd118bff432e9d1019f47b0ff1bbffdf5a5bcbe704985d98cd094600c6118cd9501556118b0604051976080895260808901906143f6565b6001600160a01b0390931660208801528683036040880152614db8565b924260608201528033940390a3005b634e487b7160e01b600052601160045260246000fd5b013590508980611828565b909150601f198316918460005260206000209260005b8181106119505750908460019594939210611936575b505050811b01905561183d565b0135600019600384901b60f8161c19169055898080611929565b91936020600181928787013581550195019201611913565b634e487b7160e01b600052604160045260246000fd5b90508701358a6117d5565b60008381526020812092508690601f198216905b8b8282106119d6575050106119bc575b5050600184811b0190556117e9565b880135600019600387901b60f8161c1916905589806119ad565b84013585556001909401936020938401938993500161199d565b90508901518a611755565b91506001870160005260206000206000925b8b601f1984168510611a5257506001935082601f19811610611a39575b5050811b01600186015561176c565b8b015160001960f88460031b161c191690558a80611a2a565b810151825560209384019360019092019101611a0d565b60405163eed4219760e01b8152600490fd5b60405163d7a20c5d60e01b8152600490fd5b604051637de702b760e11b8152600490fd5b604051632ad51ee560e21b8152600490fd5b3461036957611abf366142a5565b611ac761458d565b611ad0826144b6565b156103575761032e7f69e94e373f69f3f945457a07b335722310788af9cd459a33df6f72cc9e96404391600080516020614efa833981519152806000526000602052611b236001604060002001546145d3565b6103e985614a19565b3461036957611b3a3661441b565b336000908152600080516020614e3a833981519152602090815260409091205491929160ff161561061b57604051600160ff600a855193858181890196611b8281838a6142e7565b81016002815203019020015460b81c16151514611c075791600a611bd6611c02937f3a9eebd240f4c9f631531ebc672c4c040de483b868ccebe8a3a1fdad70cde0d9956040518093819287519283916142e7565b8101600281520301902001600160b81b60ff60b81b198254161790556040519182913395429184614ca4565b0390a2005b506105e1604051928392636f5f944160e11b8452600484015260248301906143f6565b3461036957604036600319011261036957611c436141e2565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461036957602036600319011261036957611c906141cc565b6001600160a01b03166000908152600080516020614e3a833981519152602090815260409182902054915160ff9092161515825290f35b3461036957602080600319360112610369576004356001600160401b03811161036957611cf890369060040161424f565b604051908051906111e9611d2f85830193611d148187876142e7565b85019486816002978881520301902060405192838092614360565b8481519101208151908184201490811591611ee3575b50611ed157828491611d5f604051948592519283916142e7565b83019282816003958681520301902090815490611d7b82614cee565b94611d89604051968761422e565b82865284860191829460005285600020916000935b858510611e4f57604080518981528a51818b01819052600092600582901b83018101918b918d9085015b828710611dd55785850386f35b909192938280600192603f19898203018552875190611e24611e12611e02845160a08086528501906143f6565b85850151848203878601526143f6565b604084015183820360408501526143f6565b916060868060a01b038183015116908301526080809101519101529601920196019592919092611dc8565b60058860019260409b9a9b51611e64816141f8565b604051611e75816111e9818c614360565b8152604051611e8a816111e981898d01614360565b83820152604051611ea1816111e9818b8d01614360565b6040820152848060a01b038689015416606082015260048801546080820152815201940194019392979697611d9e565b6040516329d7b10b60e11b8152600490fd5b90501585611d45565b3461036957602080600319360112610369576004359081600052600681526040600020906006820180549260ff84166004811015610d9d57611ff657600080516020614f3a83398151915260005260008352604060002033600052835260ff604060002054161580611fc5575b611fad57600c01544210611f9b5760037f366e7dd2cab048eaff199cb82b06661733696643e03b462e0b2635552275ed149360ff1916179055604051428152a2005b60405163075c0f0b60e51b8152600490fd5b6040516312081e4d60e21b8152336004820152602490fd5b50600080516020614e7a83398151915260005260008352604060002033600052835260ff6040600020541615611f59565b60405163396c029560e11b815260048101869052602490fd5b346103695761201d3661441b565b336000908152600080516020614eda833981519152602090815260409091205491929160ff161561061b57604051600160ff600a85519385818189019661206581838a6142e7565b81016002815203019020015460a81c161515146120e55791600a6120b9611c02937fa214f45af6d86b0d5ff7bb48f888cf4205e4a383da35fcbebfdbd9bd8e6d5a7c956040518093819287519283916142e7565b8101600281520301902001600160a81b60ff60a81b198254161790556040519182913395429184614ca4565b506105e160405192839263701203b760e01b8452600484015260248301906143f6565b3461036957612116366142a5565b61211e61458d565b61212782614537565b156103575761032e7f71577b91708c73ee54b43c6709958ff42e4bcc084910648ce7c3d16928b51d5291600080516020614e5a83398151915280600052600060205261217a6001604060002001546145d3565b6103e9856149a4565b34610369576000366003190112610369576020604051600080516020614efa8339815191528152f35b34610369576000366003190112610369576020604051600080516020614f5a8339815191528152f35b3461036957602080600319360112610369576004356001600160401b0381116103695761220690369060040161424f565b906000805260008152604060002033600052815260ff604060002054161561061b576040516111e96122458451928481818801956111d38183896142e7565b82815191012083519081832014908115916123a0575b50611ed15760ff600a604051848187516122768183896142e7565b81016002815203019020015460b01c1680612374575b15612351579060ff600a61233283604096958751606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e226122d2606083018a6143f6565b916b54726164696e67526561647960a01b85828503948582850152600c81520152428b8201528a33930190a28484895184818b516123118183896142e7565b81016002815203019020015460b01c169688519384928392519283916142e7565b81016002815203019020015460b81c1683519215158352151590820152f35b506105e16040519283926348cddbdb60e11b8452600484015260248301906143f6565b5060ff600a6040518481875161238b8183896142e7565b81016002815203019020015460b81c1661228c565b9050158461225b565b34610369576020366003190112610369576123c26141cc565b6001600160a01b03166000908152600080516020614eba833981519152602090815260409182902054915160ff9092161515825290f35b34610369576000366003190112610369576020604051600080516020614f3a8339815191528152f35b34610369576000366003190112610369576020604051600080516020614f1a8339815191528152f35b34610369576020366003190112610369576124646141cc565b6001600160a01b038116908115610bec5761247d61458d565b6124868161450c565b610e915761249390614763565b50600080516020614f5a83398151915260005260046020527f02ff85b9f193a3a7824cbaf5a79db262c0bac955152adf2752c6413d76b2d3c780546124d790614cd2565b90557f4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be7516020604051428152a2005b34610369576000366003190112610369576020600854604051908152f35b34610369576020366003190112610369576004356001600160401b0381116103695761255390369060040161424f565b604051818180935160208193019161256a926142e7565b810160028152036020019020604051806125848184614360565b0361258f908261422e565b60405191826125a18160018401614360565b036125ac908461422e565b604051806125bd8160028501614360565b036125c8908261422e565b60405191826125da8160038401614360565b036125e5908461422e565b600481015460058201546040519491856126028160068701614360565b0361260d908761422e565b60078401546040516001600160a01b03979093918816929091846126348160088a01614360565b0361263f908661422e565b60405195866126518160098b01614360565b0361265c908861422e565b600a88015497600b0154986040519c8d9c8d610200908181520161267f916143f6565b8d810360208f0152612690916143f6565b8c810360408e01526126a1916143f6565b8b810360608d01526126b2916143f6565b9160808b015260a08a015288810360c08a01526126ce916143f6565b9060e08801528681036101008801526126e6916143f6565b8581036101208701526126f8916143f6565b9281166101408501528060a01c60ff1615156101608501528060a81c60ff1615156101808501528060b01c60ff1615156101a085015260b81c60ff1615156101c08401526101e08301520390f35b346103695760203660031901126103695760043560005260066020526040600020805490604051908180600183019061277e91614360565b03612789908361422e565b600281015460038201546040516001600160a01b039283169490939092909116836127b78160048501614360565b036127c2908561422e565b60405194856127d48160058601614360565b036127df908761422e565b600683015460ff1695600784015495600885015492600986015494600a87015496600c0154976040519b8c528b6101806020819201528c01612820916143f6565b9160408c015260608b015289810360808b015261283c916143f6565b88810360a08a015261284d916143f6565b946004871015610d9d57879660c088015260e08701526101008601526101208501526101408401526101608301520390f35b34610369576000366003190112610369576020604051600080516020614e5a8339815191528152f35b34610369576128b63661441b565b336000908152600080516020614dda833981519152602090815260409091205491929160ff161561061b57604051600160ff600a8551938581818901966128fe81838a6142e7565b81016002815203019020015460b01c1615151461297e5791600a612952611c02937fa9de1934279a83f8cfaaecf6a7002ac10aeaea244c8c763f3752f3fc4c3e631d956040518093819287519283916142e7565b8101600281520301902001600160b01b60ff60b01b198254161790556040519182913395429184614ca4565b506105e160405192839263c817400d60e01b8452600484015260248301906143f6565b34610369576020366003190112610369576129ba6141cc565b6001600160a01b038116908115610bec576129d361458d565b6129dc816144e1565b610e91576129e9906146ec565b50600080516020614f3a83398151915260005260046020527fa792fa383e6bd9c6b4465bbfd8031f4b47377210fa121067c03906e9afac62468054612a2d90614cd2565b90557f4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb36020604051428152a2005b34610369576040366003190112610369576004356024356001600160401b03811161036957612a8e90369060040161424f565b336000908152600080516020614f9a833981519152602052604090205460ff161561061b57816000526006602052604060002060068101805460ff81166004811015610d9d57600303612b245760ff1916600117905542600890910155604080518181527f619a485783a3870e8a79daa87da1f5dc43342edeb762bd43a859a89c36dc00259290918291610d74918301906143f6565b60405163c9f22f9d60e01b815260048101869052602490fd5b346103695760c0366003190112610369576004356001600160401b03811161036957612b6d90369060040161424f565b6024356001600160401b03811161036957612b8c90369060040161424f565b906064356001600160401b03811161036957612bac90369060040161424f565b9060a4356001600160401b03811161036957612bcc90369060040161424f565b336000908152600080516020614e9a833981519152602052604090205490929060ff161561061b57815115613a1a578051156105f757835115613a0857604435156139f6576084351580156139ea575b6139d857605060843511156139be578251156139ac57600154612c3e81614cd2565b600155604051612c8660748260208101946020612c618b888151938492016142e7565b8201903360601b6020830152426034830152605482015203605481018452018261422e565b5190209260405193612c9785614213565b600a8552602036818701378451156139965760306020860153845160011015613996576078602186015360005b60048110613919575050612d19602160405180968851612ceb816020850160208d016142e7565b8201602d60f81b6020820152612d0a82518093602087850191016142e7565b0103600181018752018561422e565b60405190816102008101106001600160401b0361020084011117611968576102008201604052848252836020830152826040830152856060830152604435608083015260843560a083015260c08201523360e0820152604051612d7b81614213565b600381526252617760e81b6020820152610100820152604051612d9d81614213565b600d81526c26b4b734b7339021b2b73a32b960991b6020820152610120820152336101408201526000610160820152600061018082015260006101a082015260006101c0820152426101e08201526040516020818651612e008183858b016142e7565b810160028152030190209080518051906001600160401b038211611968578190612e3482612e2e8754614326565b87614c50565b602090601f83116001146138ad576000926138a2575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b038211611968578190612e9182612e886001880154614326565b60018801614c50565b602090601f831160011461383057600092613825575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211611968578190612ef182612ee86002880154614326565b60028801614c50565b602090601f83116001146137b3576000926137a8575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b038211611968578190612f5182612f486003880154614326565b60038801614c50565b602090601f83116001146137365760009261372b575b50508160011b916000199060031b1c19161760038301555b6080810151600483015560a0810151600583015560c08101518051906001600160401b038211611968578190612fc582612fbc6006880154614326565b60068801614c50565b602090601f83116001146136b9576000926136ae575b50508160011b916000199060031b1c19161760068301555b60e08101516007830180546001600160a01b0319166001600160a01b03929092169190911790556101008101518051906001600160401b03821161196857819061304d826130446008880154614326565b60088801614c50565b602090601f831160011461363c57600092613631575b50508160011b916000199060031b1c19161760088301555b6101208101518051906001600160401b038211611968576130ac826130a36009870154614326565b60098701614c50565b602090601f83116001146135bb579180600b94926101e0946000926135b0575b50508160011b916000199060031b1c19161760098501555b600a840160018060a01b036101408301511681549060ff60a01b610160850151151560a01b1660ff60a81b610180860151151560a81b169060ff60b01b6101a0870151151560b01b169260ff60b81b6101c0880151151560b81b16946001600160401b0360c01b16171717171790550151910155604051602081855161316d8183858a016142e7565b81016003815203019020936040519467027b934b3b4b71d160c51b60208701526131b560288785516131a58184840160208a016142e7565b810103600881018952018761422e565b604051956131c2876141f8565b8587526040516131d181614213565b600a815269149959da5cdd195c995960b21b602082015260208801526040870152336060870152426080870152805468010000000000000000811015611968576132209160018201815561430a565b61359a5785518051906001600160401b0382116119685781906132478261180c8654614326565b602090601f831160011461352e57600092613523575b50508160011b916000199060031b1c19161781555b60208601518051906001600160401b0382116119685781906132a48261329b6001870154614326565b60018701614c50565b602090601f83116001146134b1576000926134a6575b50508160011b916000199060031b1c19161760018201555b60408601519586516001600160401b03811161196857613302816132f96002860154614326565b60028601614c50565b6020601f82116001146134055792600460806105a294846133c598957f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939a986133f69e6000926133fa575b50508160011b916000199060031b1c19161760028501555b6003840160018060a01b036060830151166bffffffffffffffffffffffff60a01b82541617905501519101556133b76040519660e088526133a960e089018a6143f6565b9088820360208a01526143f6565b9086820360408801526143f6565b91604435608082015260843560a08201524260c08201528033930390a26040519182916020835260208301906143f6565b0390f35b015190508e8061334d565b6002840160005260206000209860005b601f198416811061348e575060806105a2946001856133f69d7f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939b99966004966133c59c99601f19811610613475575b505050811b016002850155613365565b015160001960f88460031b161c191690558e8080613465565b828201518b556001909a019960209283019201613415565b0151905088806132ba565b9250600184016000526020600020906000935b601f1984168510613508576001945083601f198116106134ef575b505050811b0160018201556132d2565b015160001960f88460031b161c191690558880806134df565b818101518355602094850194600190930192909101906134c4565b01519050888061325d565b9250836000526020600020906000935b601f198416851061357f576001945083601f19811610613566575b505050811b018155613272565b015160001960f88460031b161c19169055888080613559565b8181015183556020948501946001909301929091019061353e565b634e487b7160e01b600052600060045260246000fd5b015190508a806130cc565b906009850160005260206000209160005b601f1985168110613619575092600b94926001926101e09583601f19811610613600575b505050811b0160098501556130e4565b015160001960f88460031b161c191690558a80806135f0565b919260206001819286850151815501940192016135cc565b015190508880613063565b9250600885016000526020600020906000935b601f1984168510613693576001945083601f1981161061367a575b505050811b01600883015561307b565b015160001960f88460031b161c1916905588808061366a565b8181015183556020948501946001909301929091019061364f565b015190508880612fdb565b9250600685016000526020600020906000935b601f1984168510613710576001945083601f198116106136f7575b505050811b016006830155612ff3565b015160001960f88460031b161c191690558880806136e7565b818101518355602094850194600190930192909101906136cc565b015190508880612f67565b9250600385016000526020600020906000935b601f198416851061378d576001945083601f19811610613774575b505050811b016003830155612f7f565b015160001960f88460031b161c19169055888080613764565b81810151835560209485019460019093019290910190613749565b015190508880612f07565b9250600285016000526020600020906000935b601f198416851061380a576001945083601f198116106137f1575b505050811b016002830155612f1f565b015160001960f88460031b161c191690558880806137e1565b818101518355602094850194600190930192909101906137c6565b015190508880612ea7565b9250600185016000526020600020906000935b601f1984168510613887576001945083601f1981161061386e575b505050811b016001830155612ebf565b015160001960f88460031b161c1916905588808061385e565b81810151835560209485019460019093019290910190613843565b015190508880612e4a565b9250846000526020600020906000935b601f19841685106138fe576001945083601f198116106138e5575b505050811b018255612e5f565b015160001960f88460031b161c191690558880806138d8565b818101518355602094850194600190930192909101906138bd565b60208110156139965781811a90600f613936818460041c16614d37565b908260011b9360028486048114851517156118dc578581018091116118dc5761396661396d9460001a918c614d26565b5316614d37565b9160039081018091116118dc5761398b6139919360001a9189614d26565b53614cd2565b612cc4565b634e487b7160e01b600052603260045260246000fd5b60405163bfccc8e960e01b8152600490fd5b60405163d05db01960e01b81526084356004820152602490fd5b604051633abe7db760e21b8152600490fd5b50606460843511612c1c565b60405163fd83f8d960e01b8152600490fd5b60405163a765e58f60e01b8152600490fd5b604051630ac6e45360e31b8152600490fd5b3461036957604036600319011261036957613a456141e2565b336001600160a01b03821603613a6157610c8d90600435614bed565b60405163334bd91960e11b8152600490fd5b34610369576040366003190112610369576004356001600160401b03811161036957613aa390369060040161424f565b613abf60206024359281604051938285809451938492016142e7565b81016003815203019020805482101561036957613b4e91613adf9161430a565b5060405190613af982613af28184614360565b038361422e565b604051613b0d816111e98160018601614360565b613b6a604051613b24816111e98160028801614360565b613b5c600460018060a01b036003870154169501549360405197889760a0895260a08901906143f6565b9087820360208901526143f6565b9085820360408701526143f6565b91606084015260808301520390f35b3461036957602036600319011261036957613b926141cc565b6001600160a01b03166000908152600080516020614e9a833981519152602090815260409182902054915160ff9092161515825290f35b3461036957613bd7366142a5565b613bdf61458d565b613be88261448b565b156103575761032e7f125f88db22967983b401f70f6804d47f43cb545fcb725d0b335fe7d43d9b4a4a91600080516020614f1a833981519152806000526000602052613c3b6001604060002001546145d3565b6103e98561492f565b3461036957604036600319011261036957610c8d600435613c636141e2565b90806000526000602052613c7e6001604060002001546145d3565b6148c8565b346103695760203660031901126103695760043560005260006020526020600160406000200154604051908152f35b34610369576000366003190112610369576020600954604051908152f35b3461036957602080600319360112610369576004356001600160401b03811161036957613d0190369060040161424f565b90600080516020614efa83398151915260005260008152604060002033600052815260ff9182604060002054161561061b5760405181519383830194613d488184886142e7565b8201906001816002938481528588600a97889303019020015460a01c16151514613fe3576000805260008552604060002033600052855280604060002054161561061b576111e9613dbb604051878180613da68c8b519283916142e7565b81018781520301902060405192838092614360565b8581519101208451908188201490811591613fda575b50611ed1578083604051878180613dec8c8b519283916142e7565b810187815203019020015460b01c1680613faf575b15613f8d57604051606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e22613e3b60608301876143f6565b916b54726164696e67526561647960a01b88828503948582850152600c81520152426040820152604033930190a28083604051878180613e7f8c8b519283916142e7565b810187815203019020015460b01c169083604051878180613ea48c8b519283916142e7565b810187815203019020015460b81c1681613f85575b5015613f6357837ffed1001c142a7ab386454a2f7d78b013ba7ff40595d10c128f2fb6463ccd7b7a9495613f27928460405184818951613efa8183896142e7565b81018581520301902001805460ff60a01b1916600160a01b179055604051865190948593829085906142e7565b8201908152030190200180546001600160a01b031916331790556040805181815291613f55918301906143f6565b9242908201528033930390a2005b6040516348cddbdb60e11b815260048101859052806105e160248201866143f6565b905086613eb9565b6040516348cddbdb60e11b815260048101869052806105e160248201876143f6565b508083604051878180613fc68c8b519283916142e7565b810187815203019020015460b81c16613e01565b90501587613dd1565b604051632072bb0160e11b815260048101869052806105e160248201876143f6565b346103695760203660031901126103695761401e6141cc565b6001600160a01b038116908115610bec5761403761458d565b614040816144b6565b610e915761404d90614675565b50600080516020614efa83398151915260005260046020527f5455ba4b8a75b33fa0f1f7affd9817680912f06b7b194bcf9ac01183c4930020805461409190614cd2565b90557ff8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e975056020604051428152a2005b34610369576020366003190112610369576140d86141cc565b6001600160a01b038116908115610bec576140f161458d565b6140fa8161448b565b610e9157614107906145f9565b50600080516020614f1a83398151915260005260046020527f973ccc145476ef147b966a44694f8b2d26bac5a3d44a844fec6be696fe5fea70805461414b90614cd2565b90557f593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf5596020604051428152a2005b34610369576020366003190112610369576004359063ffffffff60e01b821680920361036957602091637965db0b60e01b81149081156141bb575b5015158152f35b6301ffc9a760e01b149050836141b4565b600435906001600160a01b038216820361036957565b602435906001600160a01b038216820361036957565b60a081019081106001600160401b0382111761196857604052565b604081019081106001600160401b0382111761196857604052565b90601f801991011681019081106001600160401b0382111761196857604052565b81601f82011215610369578035906001600160401b0382116119685760405192614283601f8401601f19166020018561422e565b8284526020838301011161036957816000926020809301838601378301015290565b906040600319830112610369576004356001600160a01b03811681036103695791602435906001600160401b038211610369576142e49160040161424f565b90565b60005b8381106142fa5750506000910152565b81810151838201526020016142ea565b8054821015613996576000526005602060002091020190600090565b90600182811c92168015614356575b602083101461434057565b634e487b7160e01b600052602260045260246000fd5b91607f1691614335565b906000929180549161437183614326565b9182825260019384811690816000146143d35750600114614393575b50505050565b90919394506000526020928360002092846000945b8386106143bf57505050500101903880808061438d565b8054858701830152940193859082016143a8565b9294505050602093945060ff191683830152151560051b0101903880808061438d565b9060209161440f815180928185528580860191016142e7565b601f01601f1916010190565b906040600319830112610369576001600160401b0360043581811161036957836144479160040161424f565b92602435918211610369576142e49160040161424f565b9181601f84011215610369578235916001600160401b038311610369576020838186019501011161036957565b6001600160a01b03166000908152600080516020614e9a833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020614e1a833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020614dda833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020614eda833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020614eba833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020614e3a833981519152602052604090205460ff1690565b336000908152600080516020614f9a833981519152602052604081205460ff16156145b55750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b80600052600060205260406000203360005260205260ff60406000205416156145b55750565b6001600160a01b03166000818152600080516020614e9a8339815191526020526040812054909190600080516020614f1a8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b505090565b6001600160a01b03166000818152600080516020614e1a8339815191526020526040812054909190600080516020614efa8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b6001600160a01b03166000818152600080516020614dda8339815191526020526040812054909190600080516020614f3a8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b6001600160a01b03166000818152600080516020614eda8339815191526020526040812054909190600080516020614f5a8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b6001600160a01b03166000818152600080516020614eba8339815191526020526040812054909190600080516020614e5a8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b6001600160a01b03166000818152600080516020614e3a8339815191526020526040812054909190600080516020614e7a8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b6001600160a01b03166000818152600080516020614e9a8339815191526020526040812054909190600080516020614f1a8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b6001600160a01b03166000818152600080516020614eba8339815191526020526040812054909190600080516020614e5a8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b6001600160a01b03166000818152600080516020614e1a8339815191526020526040812054909190600080516020614efa8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b6001600160a01b03166000818152600080516020614e3a8339815191526020526040812054909190600080516020614e7a8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b6001600160a01b03166000818152600080516020614eda8339815191526020526040812054909190600080516020614f5a8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b6001600160a01b03166000818152600080516020614dda8339815191526020526040812054909190600080516020614f3a8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b90601f8111614c5e57505050565b600091825260208220906020601f850160051c83019410614c9a575b601f0160051c01915b828110614c8f57505050565b818155600101614c83565b9092508290614c7a565b939291614ccd90614cbf6040936060885260608801906143f6565b9086820360208801526143f6565b930152565b60001981146118dc5760010190565b80156118dc576000190190565b6001600160401b0381116119685760051b60200190565b8051156139965760200190565b80518210156139965760209160051b010190565b908151811015613996570160200190565b60009060ff16600a811015614d6357603091500160ff81116118dc5760f81b6001600160f81b03191690565b60610160ff8111614da45760ff6009199116019060ff8211614d90575060f81b6001600160f81b03191690565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b82526011600452602482fd5b908060209392818452848401376000828201840152601f01601f191601019056fe0d2d6a5d08cb5d871289c0a3ca855d9da72909a111c24cce2d5c2b34a20daa542f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0df3fa603c74bfe2a4719960e47343678c3dc690d2b27a2295acc6fc430833aaf9acfff8a39fb957d9d1c8e3ef9f08385e3fcf7bb23ab7ba0ad0f8df93dbde6a68ddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0bb3fcc25fbffa12ea463b3505377899a4d5ddb4858b9c7bd36764686d9425b36bce5fd3347e0dc338dcc0e895534dd4af2740eec95f56cd4ca4b4b2ada357ca04130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851f8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90ea952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5a977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4df6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171bad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5a2646970667358221220e1c98446e56be4f7c675df0c855477e02bc4aa0f7de554d319b5444a15e5e36e64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714614179575080630958fc2d146140bf5780630dacad2e14614005578063126ee33814613cd0578063132002fc14613cb2578063248a9ca314613c835780632f2ff15d14613c44578063309514df14613bc95780633499c3a214613b7957806335ba620714613a7357806336568abe14613a2c5780633a7adea514612b3d5780633cee830814612a5b578063480d1dd3146129a15780634e2a3109146128a85780634eabbe771461287f578063564a565d146127465780635aee1b151461252357806362827733146125055780636377741d1461244b5780636394f6e6146124225780636e1d616e146123f957806370e22e42146123a957806375a2b0d4146121d557806379451cd7146121ac5780637a01a1da146121835780637ae9c160146121085780637cde2b991461200f5780637fd9579b14611eec578063826fe0f514611cc75780638850845f14611c7757806391d1485414611c2a5780639969119414611b2c5780639b188dd614611ab15780639c16b33a14611657578063a217fddf1461163b578063a28889e11461161d578063a4f5df121461135a578063a917601b146112a0578063abaa536f14611250578063ac851dfd1461117e578063b6ba1ca714611152578063b9c5b8331461102d578063beae461514610fdd578063c395fcb314610f8d578063ca15c87314610ea3578063cc82b09014610dd7578063cf51b45d14610c8f578063d547741f14610c4e578063de7ce39114610bfe578063df422bf2146106d7578063e3a3c522146106ae578063e438fdf814610633578063f17f352314610426578063f5716a851461036e5763fc1032eb1461028757600080fd5b3461036957610295366142a5565b61029d61458d565b6102a6826144e1565b156103575761032e7f93e936184fad9f80c7000aa987f91be0cd621bacde11839fdc7139f3d9c2407b91600080516020614f3a8339815191528060005260006020526102f96001604060002001546145d3565b61030285614b78565b5060005260046020526040600020805480610345575b50506040519182916040835260408301906143f6565b4260208301526001600160a01b03909416930390a2005b61034e90614ce1565b90553880610318565b604051632ac1560560e21b8152600490fd5b600080fd5b346103695761037c366142a5565b61038461458d565b61038d8261450c565b156103575761032e7f4614600adaea632b1e4c381ad24471dab7b587dca104c8dd4da76bc64f19716f91600080516020614f5a8339815191528060005260006020526103e06001604060002001546145d3565b6103e985614b03565b50600052600460205260406000208054806104145750506040519182916040835260408301906143f6565b61041d90614ce1565b90558480610318565b34610369576080366003190112610369576001600160401b036004358181116103695761045790369060040161424f565b906104606141e2565b906044358181116103695761047990369060040161424f565b906064359081116103695761049290369060040161424f565b90600080516020614e5a83398151915260005260209260008452604060002033600052845260ff604060002054161561061b576001600160a01b03168015610609578151156105f7578251156105e557604051600160ff600a8851938881818c01966104ff81838a6142e7565b81016002815203019020015460a01c161515146105bf57936105b093926105a292600a61055a847f55b00b3c29344a545244b18d70b135e423405427088bd5425f13d690b82310b4998b6040519384928392519283916142e7565b8101600281520301902001336bffffffffffffffffffffffff60a01b8254161790556105916040519860a08a5260a08a01906143f6565b9288015286820360408801526143f6565b9084820360608601526143f6565b914260808201528033930390a2005b604051632072bb0160e11b815260048101869052806105e160248201896143f6565b0390fd5b604051635dbef47560e01b8152600490fd5b6040516326813e6f60e01b8152600490fd5b60405163bea3fd2f60e01b8152600490fd5b604051630568555f60e41b8152336004820152602490fd5b3461036957610641366142a5565b61064961458d565b61065282614562565b156103575761032e7f352e14c53d161e2481e65145b53265d1608f979a93a06df66d4c99b2a84ddc6391600080516020614e7a8339815191528060005260006020526106a56001604060002001546145d3565b6103e985614a8e565b34610369576000366003190112610369576020604051600080516020614e7a8339815191528152f35b3461036957602080600319360112610369576001600160a01b036106f96141cc565b168015610bec576000906000805260008352604060002081600052835260ff8060406000205416610be3575b600080516020614f1a83398151915291826000526000855260406000208160005285528160406000205416610bd3575b600080516020614f5a833981519152806000526000865260406000208260005286528260406000205416610bc3575b600080516020614e5a833981519152806000526000875260406000208360005287528360406000205416610bb3575b600080516020614f3a833981519152806000526000885260406000208460005288528460406000205416610ba3575b600080516020614e7a83398151915291826000526000895260406000208560005289528560406000205416610b93575b600080516020614efa833981519152938460005260008a526040600020866000528a528660406000205416610b83575b61084b89614cee565b986108596040519a8b61422e565b808a52610868601f1991614cee565b018a8a60005b838110610b7257505050506000976000805260008b526040600020876000528b528760406000205416610b37575b60005260008a526040600020866000528a528660406000205416610afa575b6000526000895260406000208560005289528560406000205416610abb575b6000526000885260406000208460005288528460406000205416610a78575b6000526000875260406000208360005287528360406000205416610a39575b60005260008652604060002082600052865282604060002054166109f8575b600052600085526040600020906000528452604060002054166109b5575b506040519082820192808352815180945260408301938160408260051b8601019301916000955b8287106109895785850386f35b9091929382806109a5600193603f198a820301865288516143f6565b960192019601959291909261097c565b6109f1906040516109c581614213565b6005815264212aaca2a960d91b858201526109e08285614d12565b526109eb8184614d12565b50614cd2565b5082610955565b92610a3390604051610a0981614213565b600981526824a729a822a1aa27a960b91b88820152610a288288614d12565b526109eb8187614d12565b92610937565b93610a7290604051610a4a81614213565b600781526620aaa224aa27a960c91b89820152610a678289614d12565b526109eb8188614d12565b93610918565b94610ab590604051610a8981614213565b600b81526a2a2920a729a827a92a22a960a91b8a820152610aaa828a614d12565b526109eb8189614d12565b946108f9565b95610af490604051610acc81614213565b60078152662922a324a722a960c91b8b820152610ae9828b614d12565b526109eb818a614d12565b956108da565b96610b3190604051610b0b81614213565b600581526426a4a722a960d91b8c820152610b26828c614d12565b526109eb818b614d12565b966108bb565b9750604051610b4581614213565b600581526420a226a4a760d91b8b820152610b5f8a614d05565b52610b6989614d05565b5060019761089c565b606083828194010152018b9061086e565b97610b8d90614cd2565b97610842565b96610b9d90614cd2565b96610812565b95610bad90614cd2565b956107e2565b94610bbd90614cd2565b946107b3565b93610bcd90614cd2565b93610784565b92610bdd90614cd2565b92610755565b60019250610725565b60405163200db56f60e11b8152600490fd5b3461036957602036600319011261036957610c176141cc565b6001600160a01b03166000908152600080516020614eda833981519152602090815260409182902054915160ff9092161515825290f35b3461036957604036600319011261036957610c8d600435610c6d6141e2565b90806000526000602052610c886001604060002001546145d3565b614bed565b005b34610369576040366003190112610369576004356024356001600160401b03811161036957610cc290369060040161445e565b336000908152600080516020614f9a833981519152602052604090205490919060ff161561061b5782600052600660205260406000209183835403610dc5578015610db357600683019283549360ff85166004811015610d9d57801590811591610d91575b50610d7f5760017f619a485783a3870e8a79daa87da1f5dc43342edeb762bd43a859a89c36dc00259560ff1916179055600842910155610d74604051928392604084526040840191614db8565b4260208301520390a2005b60405163cb6f8af560e01b8152600490fd5b60039150141587610d27565b634e487b7160e01b600052602160045260246000fd5b60405163868ff73d60e01b8152600490fd5b604051630c9ae81f60e21b8152600490fd5b3461036957602036600319011261036957610df06141cc565b6001600160a01b038116908115610bec57610e0961458d565b610e1281614562565b610e9157610e1f90614851565b50600080516020614e7a83398151915260005260046020527f9d423956391424a558206d539d4c7b96f2596f9d71b6fe92efe1f071a870ba948054610e6390614cd2565b90557f49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e0926020604051428152a2005b6040516314726de560e21b8152600490fd5b3461036957602036600319011261036957600435600080516020614f1a83398151915281148015610f76575b8015610f5f575b8015610f48575b8015610f31575b8015610f1a575b15610f085760005260046020526020604060002054604051908152f35b604051636b9c461160e01b8152600490fd5b50600080516020614efa8339815191528114610eeb565b50600080516020614e7a8339815191528114610ee4565b50600080516020614f3a8339815191528114610edd565b50600080516020614e5a8339815191528114610ed6565b50600080516020614f5a8339815191528114610ecf565b3461036957602036600319011261036957610fa66141cc565b6001600160a01b03166000908152600080516020614f9a833981519152602090815260409182902054915160ff9092161515825290f35b3461036957602036600319011261036957610ff66141cc565b6001600160a01b03166000908152600080516020614e1a833981519152602090815260409182902054915160ff9092161515825290f35b3461036957600036600319011261036957600460209081527f973ccc145476ef147b966a44694f8b2d26bac5a3d44a844fec6be696fe5fea70547f02ff85b9f193a3a7824cbaf5a79db262c0bac955152adf2752c6413d76b2d3c7547f0e08e55c6329ca2d4f38429c472032b4e97537c869a64c376bb7e702721eb8c3547fa792fa383e6bd9c6b4465bbfd8031f4b47377210fa121067c03906e9afac6246547f9d423956391424a558206d539d4c7b96f2596f9d71b6fe92efe1f071a870ba9454600080516020614efa8339815191526000527f5455ba4b8a75b33fa0f1f7affd9817680912f06b7b194bcf9ac01183c4930020546040805196875296860194909452948401919091526060830152608082019290925260a081019190915260c090f35b346103695760203660031901126103695760043560005260046020526020604060002054604051908152f35b3461036957602080600319360112610369576004356001600160401b038111610369576111af90369060040161424f565b80511561122d576040516111e96111f08351928581818701956111d38183896142e7565b8101600281520301902060405192838092614360565b038261422e565b83815191012090825190200361120a575060405160018152f35b906105e16040519283926311bb0bc960e31b8452600484015260248301906143f6565b906105e160405192839263f855236d60e01b8452600484015260248301906143f6565b34610369576020366003190112610369576112696141cc565b6001600160a01b03166000908152600080516020614dda833981519152602090815260409182902054915160ff9092161515825290f35b34610369576020366003190112610369576112b96141cc565b6001600160a01b038116908115610bec576112d261458d565b6112db81614537565b610e91576112e8906147da565b50600080516020614e5a83398151915260005260046020527f0e08e55c6329ca2d4f38429c472032b4e97537c869a64c376bb7e702721eb8c3805461132c90614cd2565b90557f964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a66020604051428152a2005b3461036957604036600319011261036957600435602480358015158103610369578260005260209160068352604060002091600683019160ff8354166004811015611608576115f257600b8401903360005281865260ff604060002054166115dd57600080516020614f3a83398151915260005260008652604060002033600052865260ff6040600020541615806115ac575b80611589575b61157457600c85015442101561153457503360005284521561151f576009820161141d8154614cd2565b90555b60098201546008549081116114a45750916080917f619a485783a3870e8a79daa87da1f5dc43342edeb762bd43a859a89c36dc002593600160ff198254161790556008429101556040519060408252601b60408301527f417070726f766564206279206d616a6f7269747920766f74696e67000000000060608301524290820152a2005b9091600a015410156114b257005b7f66e6fff3b5dd3c33ccb5596403903d31b44bf59342b0a32d9925a86d0d6efeb791608091600260ff198254161790556040519060408252601b60408301527f52656a6563746564206279206d616a6f7269747920766f74696e67000000000060608301524290820152a2005b600a820161152d8154614cd2565b9055611420565b86807f366e7dd2cab048eaff199cb82b06661733696643e03b462e0b2635552275ed1488604051428152a26040519063544b484760e11b82526004820152fd5b6040516312081e4d60e21b8152336004820152fd5b506000805260008652604060002033600052865260ff60406000205416156113f3565b50600080516020614e7a83398151915260005260008652604060002033600052865260ff60406000205416156113ed565b60405163f7a8a48560e01b8152336004820152fd5b60405163396c029560e11b815260048101879052fd5b50634e487b7160e01b60009081526021600452fd5b34610369576000366003190112610369576020600754604051908152f35b3461036957600036600319011261036957602060405160008152f35b34610369576080366003190112610369576004356001600160401b0381116103695761168790369060040161424f565b61168f6141e2565b6044356001600160401b038111610369576116ae90369060040161445e565b916064356001600160401b038111610369576116ce90369060040161445e565b919093855115611a9f576001600160a01b03821615611a8d578015611a7b578215611a69576007549461170086614cd2565b60075585600052600660205260406000209386855587516001600160401b0381116119685761173f816117366001890154614326565b60018901614c50565b806020601f82116001146119fb576000916119f0575b508160011b916000199060031b1c19161760018601555b6002850180546001600160a01b031990811633179091556003860180549091166001600160a01b038616179055600485016001600160401b038411611968576117bf846117b98354614326565b83614c50565b836000601f82116001146119895760009161197e575b508460011b906000198660031b1c19161790555b60058501916001600160401b0382116119685781906118128261180c8654614326565b86614c50565b600090601f83116001146118fd576000926118f2575b50508160011b916000199060031b1c19161790555b6006830160ff19815416905542600784015560006008840155600060098401556000600a8401556009544201938442116118dc577f848fa50545e34cd118bff432e9d1019f47b0ff1bbffdf5a5bcbe704985d98cd094600c6118cd9501556118b0604051976080895260808901906143f6565b6001600160a01b0390931660208801528683036040880152614db8565b924260608201528033940390a3005b634e487b7160e01b600052601160045260246000fd5b013590508980611828565b909150601f198316918460005260206000209260005b8181106119505750908460019594939210611936575b505050811b01905561183d565b0135600019600384901b60f8161c19169055898080611929565b91936020600181928787013581550195019201611913565b634e487b7160e01b600052604160045260246000fd5b90508701358a6117d5565b60008381526020812092508690601f198216905b8b8282106119d6575050106119bc575b5050600184811b0190556117e9565b880135600019600387901b60f8161c1916905589806119ad565b84013585556001909401936020938401938993500161199d565b90508901518a611755565b91506001870160005260206000206000925b8b601f1984168510611a5257506001935082601f19811610611a39575b5050811b01600186015561176c565b8b015160001960f88460031b161c191690558a80611a2a565b810151825560209384019360019092019101611a0d565b60405163eed4219760e01b8152600490fd5b60405163d7a20c5d60e01b8152600490fd5b604051637de702b760e11b8152600490fd5b604051632ad51ee560e21b8152600490fd5b3461036957611abf366142a5565b611ac761458d565b611ad0826144b6565b156103575761032e7f69e94e373f69f3f945457a07b335722310788af9cd459a33df6f72cc9e96404391600080516020614efa833981519152806000526000602052611b236001604060002001546145d3565b6103e985614a19565b3461036957611b3a3661441b565b336000908152600080516020614e3a833981519152602090815260409091205491929160ff161561061b57604051600160ff600a855193858181890196611b8281838a6142e7565b81016002815203019020015460b81c16151514611c075791600a611bd6611c02937f3a9eebd240f4c9f631531ebc672c4c040de483b868ccebe8a3a1fdad70cde0d9956040518093819287519283916142e7565b8101600281520301902001600160b81b60ff60b81b198254161790556040519182913395429184614ca4565b0390a2005b506105e1604051928392636f5f944160e11b8452600484015260248301906143f6565b3461036957604036600319011261036957611c436141e2565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461036957602036600319011261036957611c906141cc565b6001600160a01b03166000908152600080516020614e3a833981519152602090815260409182902054915160ff9092161515825290f35b3461036957602080600319360112610369576004356001600160401b03811161036957611cf890369060040161424f565b604051908051906111e9611d2f85830193611d148187876142e7565b85019486816002978881520301902060405192838092614360565b8481519101208151908184201490811591611ee3575b50611ed157828491611d5f604051948592519283916142e7565b83019282816003958681520301902090815490611d7b82614cee565b94611d89604051968761422e565b82865284860191829460005285600020916000935b858510611e4f57604080518981528a51818b01819052600092600582901b83018101918b918d9085015b828710611dd55785850386f35b909192938280600192603f19898203018552875190611e24611e12611e02845160a08086528501906143f6565b85850151848203878601526143f6565b604084015183820360408501526143f6565b916060868060a01b038183015116908301526080809101519101529601920196019592919092611dc8565b60058860019260409b9a9b51611e64816141f8565b604051611e75816111e9818c614360565b8152604051611e8a816111e981898d01614360565b83820152604051611ea1816111e9818b8d01614360565b6040820152848060a01b038689015416606082015260048801546080820152815201940194019392979697611d9e565b6040516329d7b10b60e11b8152600490fd5b90501585611d45565b3461036957602080600319360112610369576004359081600052600681526040600020906006820180549260ff84166004811015610d9d57611ff657600080516020614f3a83398151915260005260008352604060002033600052835260ff604060002054161580611fc5575b611fad57600c01544210611f9b5760037f366e7dd2cab048eaff199cb82b06661733696643e03b462e0b2635552275ed149360ff1916179055604051428152a2005b60405163075c0f0b60e51b8152600490fd5b6040516312081e4d60e21b8152336004820152602490fd5b50600080516020614e7a83398151915260005260008352604060002033600052835260ff6040600020541615611f59565b60405163396c029560e11b815260048101869052602490fd5b346103695761201d3661441b565b336000908152600080516020614eda833981519152602090815260409091205491929160ff161561061b57604051600160ff600a85519385818189019661206581838a6142e7565b81016002815203019020015460a81c161515146120e55791600a6120b9611c02937fa214f45af6d86b0d5ff7bb48f888cf4205e4a383da35fcbebfdbd9bd8e6d5a7c956040518093819287519283916142e7565b8101600281520301902001600160a81b60ff60a81b198254161790556040519182913395429184614ca4565b506105e160405192839263701203b760e01b8452600484015260248301906143f6565b3461036957612116366142a5565b61211e61458d565b61212782614537565b156103575761032e7f71577b91708c73ee54b43c6709958ff42e4bcc084910648ce7c3d16928b51d5291600080516020614e5a83398151915280600052600060205261217a6001604060002001546145d3565b6103e9856149a4565b34610369576000366003190112610369576020604051600080516020614efa8339815191528152f35b34610369576000366003190112610369576020604051600080516020614f5a8339815191528152f35b3461036957602080600319360112610369576004356001600160401b0381116103695761220690369060040161424f565b906000805260008152604060002033600052815260ff604060002054161561061b576040516111e96122458451928481818801956111d38183896142e7565b82815191012083519081832014908115916123a0575b50611ed15760ff600a604051848187516122768183896142e7565b81016002815203019020015460b01c1680612374575b15612351579060ff600a61233283604096958751606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e226122d2606083018a6143f6565b916b54726164696e67526561647960a01b85828503948582850152600c81520152428b8201528a33930190a28484895184818b516123118183896142e7565b81016002815203019020015460b01c169688519384928392519283916142e7565b81016002815203019020015460b81c1683519215158352151590820152f35b506105e16040519283926348cddbdb60e11b8452600484015260248301906143f6565b5060ff600a6040518481875161238b8183896142e7565b81016002815203019020015460b81c1661228c565b9050158461225b565b34610369576020366003190112610369576123c26141cc565b6001600160a01b03166000908152600080516020614eba833981519152602090815260409182902054915160ff9092161515825290f35b34610369576000366003190112610369576020604051600080516020614f3a8339815191528152f35b34610369576000366003190112610369576020604051600080516020614f1a8339815191528152f35b34610369576020366003190112610369576124646141cc565b6001600160a01b038116908115610bec5761247d61458d565b6124868161450c565b610e915761249390614763565b50600080516020614f5a83398151915260005260046020527f02ff85b9f193a3a7824cbaf5a79db262c0bac955152adf2752c6413d76b2d3c780546124d790614cd2565b90557f4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be7516020604051428152a2005b34610369576000366003190112610369576020600854604051908152f35b34610369576020366003190112610369576004356001600160401b0381116103695761255390369060040161424f565b604051818180935160208193019161256a926142e7565b810160028152036020019020604051806125848184614360565b0361258f908261422e565b60405191826125a18160018401614360565b036125ac908461422e565b604051806125bd8160028501614360565b036125c8908261422e565b60405191826125da8160038401614360565b036125e5908461422e565b600481015460058201546040519491856126028160068701614360565b0361260d908761422e565b60078401546040516001600160a01b03979093918816929091846126348160088a01614360565b0361263f908661422e565b60405195866126518160098b01614360565b0361265c908861422e565b600a88015497600b0154986040519c8d9c8d610200908181520161267f916143f6565b8d810360208f0152612690916143f6565b8c810360408e01526126a1916143f6565b8b810360608d01526126b2916143f6565b9160808b015260a08a015288810360c08a01526126ce916143f6565b9060e08801528681036101008801526126e6916143f6565b8581036101208701526126f8916143f6565b9281166101408501528060a01c60ff1615156101608501528060a81c60ff1615156101808501528060b01c60ff1615156101a085015260b81c60ff1615156101c08401526101e08301520390f35b346103695760203660031901126103695760043560005260066020526040600020805490604051908180600183019061277e91614360565b03612789908361422e565b600281015460038201546040516001600160a01b039283169490939092909116836127b78160048501614360565b036127c2908561422e565b60405194856127d48160058601614360565b036127df908761422e565b600683015460ff1695600784015495600885015492600986015494600a87015496600c0154976040519b8c528b6101806020819201528c01612820916143f6565b9160408c015260608b015289810360808b015261283c916143f6565b88810360a08a015261284d916143f6565b946004871015610d9d57879660c088015260e08701526101008601526101208501526101408401526101608301520390f35b34610369576000366003190112610369576020604051600080516020614e5a8339815191528152f35b34610369576128b63661441b565b336000908152600080516020614dda833981519152602090815260409091205491929160ff161561061b57604051600160ff600a8551938581818901966128fe81838a6142e7565b81016002815203019020015460b01c1615151461297e5791600a612952611c02937fa9de1934279a83f8cfaaecf6a7002ac10aeaea244c8c763f3752f3fc4c3e631d956040518093819287519283916142e7565b8101600281520301902001600160b01b60ff60b01b198254161790556040519182913395429184614ca4565b506105e160405192839263c817400d60e01b8452600484015260248301906143f6565b34610369576020366003190112610369576129ba6141cc565b6001600160a01b038116908115610bec576129d361458d565b6129dc816144e1565b610e91576129e9906146ec565b50600080516020614f3a83398151915260005260046020527fa792fa383e6bd9c6b4465bbfd8031f4b47377210fa121067c03906e9afac62468054612a2d90614cd2565b90557f4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb36020604051428152a2005b34610369576040366003190112610369576004356024356001600160401b03811161036957612a8e90369060040161424f565b336000908152600080516020614f9a833981519152602052604090205460ff161561061b57816000526006602052604060002060068101805460ff81166004811015610d9d57600303612b245760ff1916600117905542600890910155604080518181527f619a485783a3870e8a79daa87da1f5dc43342edeb762bd43a859a89c36dc00259290918291610d74918301906143f6565b60405163c9f22f9d60e01b815260048101869052602490fd5b346103695760c0366003190112610369576004356001600160401b03811161036957612b6d90369060040161424f565b6024356001600160401b03811161036957612b8c90369060040161424f565b906064356001600160401b03811161036957612bac90369060040161424f565b9060a4356001600160401b03811161036957612bcc90369060040161424f565b336000908152600080516020614e9a833981519152602052604090205490929060ff161561061b57815115613a1a578051156105f757835115613a0857604435156139f6576084351580156139ea575b6139d857605060843511156139be578251156139ac57600154612c3e81614cd2565b600155604051612c8660748260208101946020612c618b888151938492016142e7565b8201903360601b6020830152426034830152605482015203605481018452018261422e565b5190209260405193612c9785614213565b600a8552602036818701378451156139965760306020860153845160011015613996576078602186015360005b60048110613919575050612d19602160405180968851612ceb816020850160208d016142e7565b8201602d60f81b6020820152612d0a82518093602087850191016142e7565b0103600181018752018561422e565b60405190816102008101106001600160401b0361020084011117611968576102008201604052848252836020830152826040830152856060830152604435608083015260843560a083015260c08201523360e0820152604051612d7b81614213565b600381526252617760e81b6020820152610100820152604051612d9d81614213565b600d81526c26b4b734b7339021b2b73a32b960991b6020820152610120820152336101408201526000610160820152600061018082015260006101a082015260006101c0820152426101e08201526040516020818651612e008183858b016142e7565b810160028152030190209080518051906001600160401b038211611968578190612e3482612e2e8754614326565b87614c50565b602090601f83116001146138ad576000926138a2575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b038211611968578190612e9182612e886001880154614326565b60018801614c50565b602090601f831160011461383057600092613825575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211611968578190612ef182612ee86002880154614326565b60028801614c50565b602090601f83116001146137b3576000926137a8575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b038211611968578190612f5182612f486003880154614326565b60038801614c50565b602090601f83116001146137365760009261372b575b50508160011b916000199060031b1c19161760038301555b6080810151600483015560a0810151600583015560c08101518051906001600160401b038211611968578190612fc582612fbc6006880154614326565b60068801614c50565b602090601f83116001146136b9576000926136ae575b50508160011b916000199060031b1c19161760068301555b60e08101516007830180546001600160a01b0319166001600160a01b03929092169190911790556101008101518051906001600160401b03821161196857819061304d826130446008880154614326565b60088801614c50565b602090601f831160011461363c57600092613631575b50508160011b916000199060031b1c19161760088301555b6101208101518051906001600160401b038211611968576130ac826130a36009870154614326565b60098701614c50565b602090601f83116001146135bb579180600b94926101e0946000926135b0575b50508160011b916000199060031b1c19161760098501555b600a840160018060a01b036101408301511681549060ff60a01b610160850151151560a01b1660ff60a81b610180860151151560a81b169060ff60b01b6101a0870151151560b01b169260ff60b81b6101c0880151151560b81b16946001600160401b0360c01b16171717171790550151910155604051602081855161316d8183858a016142e7565b81016003815203019020936040519467027b934b3b4b71d160c51b60208701526131b560288785516131a58184840160208a016142e7565b810103600881018952018761422e565b604051956131c2876141f8565b8587526040516131d181614213565b600a815269149959da5cdd195c995960b21b602082015260208801526040870152336060870152426080870152805468010000000000000000811015611968576132209160018201815561430a565b61359a5785518051906001600160401b0382116119685781906132478261180c8654614326565b602090601f831160011461352e57600092613523575b50508160011b916000199060031b1c19161781555b60208601518051906001600160401b0382116119685781906132a48261329b6001870154614326565b60018701614c50565b602090601f83116001146134b1576000926134a6575b50508160011b916000199060031b1c19161760018201555b60408601519586516001600160401b03811161196857613302816132f96002860154614326565b60028601614c50565b6020601f82116001146134055792600460806105a294846133c598957f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939a986133f69e6000926133fa575b50508160011b916000199060031b1c19161760028501555b6003840160018060a01b036060830151166bffffffffffffffffffffffff60a01b82541617905501519101556133b76040519660e088526133a960e089018a6143f6565b9088820360208a01526143f6565b9086820360408801526143f6565b91604435608082015260843560a08201524260c08201528033930390a26040519182916020835260208301906143f6565b0390f35b015190508e8061334d565b6002840160005260206000209860005b601f198416811061348e575060806105a2946001856133f69d7f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939b99966004966133c59c99601f19811610613475575b505050811b016002850155613365565b015160001960f88460031b161c191690558e8080613465565b828201518b556001909a019960209283019201613415565b0151905088806132ba565b9250600184016000526020600020906000935b601f1984168510613508576001945083601f198116106134ef575b505050811b0160018201556132d2565b015160001960f88460031b161c191690558880806134df565b818101518355602094850194600190930192909101906134c4565b01519050888061325d565b9250836000526020600020906000935b601f198416851061357f576001945083601f19811610613566575b505050811b018155613272565b015160001960f88460031b161c19169055888080613559565b8181015183556020948501946001909301929091019061353e565b634e487b7160e01b600052600060045260246000fd5b015190508a806130cc565b906009850160005260206000209160005b601f1985168110613619575092600b94926001926101e09583601f19811610613600575b505050811b0160098501556130e4565b015160001960f88460031b161c191690558a80806135f0565b919260206001819286850151815501940192016135cc565b015190508880613063565b9250600885016000526020600020906000935b601f1984168510613693576001945083601f1981161061367a575b505050811b01600883015561307b565b015160001960f88460031b161c1916905588808061366a565b8181015183556020948501946001909301929091019061364f565b015190508880612fdb565b9250600685016000526020600020906000935b601f1984168510613710576001945083601f198116106136f7575b505050811b016006830155612ff3565b015160001960f88460031b161c191690558880806136e7565b818101518355602094850194600190930192909101906136cc565b015190508880612f67565b9250600385016000526020600020906000935b601f198416851061378d576001945083601f19811610613774575b505050811b016003830155612f7f565b015160001960f88460031b161c19169055888080613764565b81810151835560209485019460019093019290910190613749565b015190508880612f07565b9250600285016000526020600020906000935b601f198416851061380a576001945083601f198116106137f1575b505050811b016002830155612f1f565b015160001960f88460031b161c191690558880806137e1565b818101518355602094850194600190930192909101906137c6565b015190508880612ea7565b9250600185016000526020600020906000935b601f1984168510613887576001945083601f1981161061386e575b505050811b016001830155612ebf565b015160001960f88460031b161c1916905588808061385e565b81810151835560209485019460019093019290910190613843565b015190508880612e4a565b9250846000526020600020906000935b601f19841685106138fe576001945083601f198116106138e5575b505050811b018255612e5f565b015160001960f88460031b161c191690558880806138d8565b818101518355602094850194600190930192909101906138bd565b60208110156139965781811a90600f613936818460041c16614d37565b908260011b9360028486048114851517156118dc578581018091116118dc5761396661396d9460001a918c614d26565b5316614d37565b9160039081018091116118dc5761398b6139919360001a9189614d26565b53614cd2565b612cc4565b634e487b7160e01b600052603260045260246000fd5b60405163bfccc8e960e01b8152600490fd5b60405163d05db01960e01b81526084356004820152602490fd5b604051633abe7db760e21b8152600490fd5b50606460843511612c1c565b60405163fd83f8d960e01b8152600490fd5b60405163a765e58f60e01b8152600490fd5b604051630ac6e45360e31b8152600490fd5b3461036957604036600319011261036957613a456141e2565b336001600160a01b03821603613a6157610c8d90600435614bed565b60405163334bd91960e11b8152600490fd5b34610369576040366003190112610369576004356001600160401b03811161036957613aa390369060040161424f565b613abf60206024359281604051938285809451938492016142e7565b81016003815203019020805482101561036957613b4e91613adf9161430a565b5060405190613af982613af28184614360565b038361422e565b604051613b0d816111e98160018601614360565b613b6a604051613b24816111e98160028801614360565b613b5c600460018060a01b036003870154169501549360405197889760a0895260a08901906143f6565b9087820360208901526143f6565b9085820360408701526143f6565b91606084015260808301520390f35b3461036957602036600319011261036957613b926141cc565b6001600160a01b03166000908152600080516020614e9a833981519152602090815260409182902054915160ff9092161515825290f35b3461036957613bd7366142a5565b613bdf61458d565b613be88261448b565b156103575761032e7f125f88db22967983b401f70f6804d47f43cb545fcb725d0b335fe7d43d9b4a4a91600080516020614f1a833981519152806000526000602052613c3b6001604060002001546145d3565b6103e98561492f565b3461036957604036600319011261036957610c8d600435613c636141e2565b90806000526000602052613c7e6001604060002001546145d3565b6148c8565b346103695760203660031901126103695760043560005260006020526020600160406000200154604051908152f35b34610369576000366003190112610369576020600954604051908152f35b3461036957602080600319360112610369576004356001600160401b03811161036957613d0190369060040161424f565b90600080516020614efa83398151915260005260008152604060002033600052815260ff9182604060002054161561061b5760405181519383830194613d488184886142e7565b8201906001816002938481528588600a97889303019020015460a01c16151514613fe3576000805260008552604060002033600052855280604060002054161561061b576111e9613dbb604051878180613da68c8b519283916142e7565b81018781520301902060405192838092614360565b8581519101208451908188201490811591613fda575b50611ed1578083604051878180613dec8c8b519283916142e7565b810187815203019020015460b01c1680613faf575b15613f8d57604051606081527f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e22613e3b60608301876143f6565b916b54726164696e67526561647960a01b88828503948582850152600c81520152426040820152604033930190a28083604051878180613e7f8c8b519283916142e7565b810187815203019020015460b01c169083604051878180613ea48c8b519283916142e7565b810187815203019020015460b81c1681613f85575b5015613f6357837ffed1001c142a7ab386454a2f7d78b013ba7ff40595d10c128f2fb6463ccd7b7a9495613f27928460405184818951613efa8183896142e7565b81018581520301902001805460ff60a01b1916600160a01b179055604051865190948593829085906142e7565b8201908152030190200180546001600160a01b031916331790556040805181815291613f55918301906143f6565b9242908201528033930390a2005b6040516348cddbdb60e11b815260048101859052806105e160248201866143f6565b905086613eb9565b6040516348cddbdb60e11b815260048101869052806105e160248201876143f6565b508083604051878180613fc68c8b519283916142e7565b810187815203019020015460b81c16613e01565b90501587613dd1565b604051632072bb0160e11b815260048101869052806105e160248201876143f6565b346103695760203660031901126103695761401e6141cc565b6001600160a01b038116908115610bec5761403761458d565b614040816144b6565b610e915761404d90614675565b50600080516020614efa83398151915260005260046020527f5455ba4b8a75b33fa0f1f7affd9817680912f06b7b194bcf9ac01183c4930020805461409190614cd2565b90557ff8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e975056020604051428152a2005b34610369576020366003190112610369576140d86141cc565b6001600160a01b038116908115610bec576140f161458d565b6140fa8161448b565b610e9157614107906145f9565b50600080516020614f1a83398151915260005260046020527f973ccc145476ef147b966a44694f8b2d26bac5a3d44a844fec6be696fe5fea70805461414b90614cd2565b90557f593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf5596020604051428152a2005b34610369576020366003190112610369576004359063ffffffff60e01b821680920361036957602091637965db0b60e01b81149081156141bb575b5015158152f35b6301ffc9a760e01b149050836141b4565b600435906001600160a01b038216820361036957565b602435906001600160a01b038216820361036957565b60a081019081106001600160401b0382111761196857604052565b604081019081106001600160401b0382111761196857604052565b90601f801991011681019081106001600160401b0382111761196857604052565b81601f82011215610369578035906001600160401b0382116119685760405192614283601f8401601f19166020018561422e565b8284526020838301011161036957816000926020809301838601378301015290565b906040600319830112610369576004356001600160a01b03811681036103695791602435906001600160401b038211610369576142e49160040161424f565b90565b60005b8381106142fa5750506000910152565b81810151838201526020016142ea565b8054821015613996576000526005602060002091020190600090565b90600182811c92168015614356575b602083101461434057565b634e487b7160e01b600052602260045260246000fd5b91607f1691614335565b906000929180549161437183614326565b9182825260019384811690816000146143d35750600114614393575b50505050565b90919394506000526020928360002092846000945b8386106143bf57505050500101903880808061438d565b8054858701830152940193859082016143a8565b9294505050602093945060ff191683830152151560051b0101903880808061438d565b9060209161440f815180928185528580860191016142e7565b601f01601f1916010190565b906040600319830112610369576001600160401b0360043581811161036957836144479160040161424f565b92602435918211610369576142e49160040161424f565b9181601f84011215610369578235916001600160401b038311610369576020838186019501011161036957565b6001600160a01b03166000908152600080516020614e9a833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020614e1a833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020614dda833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020614eda833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020614eba833981519152602052604090205460ff1690565b6001600160a01b03166000908152600080516020614e3a833981519152602052604090205460ff1690565b336000908152600080516020614f9a833981519152602052604081205460ff16156145b55750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b80600052600060205260406000203360005260205260ff60406000205416156145b55750565b6001600160a01b03166000818152600080516020614e9a8339815191526020526040812054909190600080516020614f1a8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b505090565b6001600160a01b03166000818152600080516020614e1a8339815191526020526040812054909190600080516020614efa8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b6001600160a01b03166000818152600080516020614dda8339815191526020526040812054909190600080516020614f3a8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b6001600160a01b03166000818152600080516020614eda8339815191526020526040812054909190600080516020614f5a8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b6001600160a01b03166000818152600080516020614eba8339815191526020526040812054909190600080516020614e5a8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b6001600160a01b03166000818152600080516020614e3a8339815191526020526040812054909190600080516020614e7a8339815191529060ff1661467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461467057808352826020526040832082845260205260408320600160ff19825416179055600080516020614dfa833981519152339380a4600190565b6001600160a01b03166000818152600080516020614e9a8339815191526020526040812054909190600080516020614f1a8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b6001600160a01b03166000818152600080516020614eba8339815191526020526040812054909190600080516020614e5a8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b6001600160a01b03166000818152600080516020614e1a8339815191526020526040812054909190600080516020614efa8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b6001600160a01b03166000818152600080516020614e3a8339815191526020526040812054909190600080516020614e7a8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b6001600160a01b03166000818152600080516020614eda8339815191526020526040812054909190600080516020614f5a8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b6001600160a01b03166000818152600080516020614dda8339815191526020526040812054909190600080516020614f3a8339815191529060ff16156146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146146705780835282602052604083208284526020526040832060ff198154169055600080516020614f7a833981519152339380a4600190565b90601f8111614c5e57505050565b600091825260208220906020601f850160051c83019410614c9a575b601f0160051c01915b828110614c8f57505050565b818155600101614c83565b9092508290614c7a565b939291614ccd90614cbf6040936060885260608801906143f6565b9086820360208801526143f6565b930152565b60001981146118dc5760010190565b80156118dc576000190190565b6001600160401b0381116119685760051b60200190565b8051156139965760200190565b80518210156139965760209160051b010190565b908151811015613996570160200190565b60009060ff16600a811015614d6357603091500160ff81116118dc5760f81b6001600160f81b03191690565b60610160ff8111614da45760ff6009199116019060ff8211614d90575060f81b6001600160f81b03191690565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b82526011600452602482fd5b908060209392818452848401376000828201840152601f01601f191601019056fe0d2d6a5d08cb5d871289c0a3ca855d9da72909a111c24cce2d5c2b34a20daa542f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0df3fa603c74bfe2a4719960e47343678c3dc690d2b27a2295acc6fc430833aaf9acfff8a39fb957d9d1c8e3ef9f08385e3fcf7bb23ab7ba0ad0f8df93dbde6a68ddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0bb3fcc25fbffa12ea463b3505377899a4d5ddb4858b9c7bd36764686d9425b36bce5fd3347e0dc338dcc0e895534dd4af2740eec95f56cd4ca4b4b2ada357ca04130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851f8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90ea952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5a977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4df6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171bad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5a2646970667358221220e1c98446e56be4f7c675df0c855477e02bc4aa0f7de554d319b5444a15e5e36e64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "_auditMineral(string,string)": {
        "details": "only the auditor can audit mineralDetails.Logs audit report on every successful audit.",
        "params": {
          "mineralId": "The ID of the mineral under audition.",
          "report": "The audit status report of the mineral under audition."
        }
      },
      "checkAndEscalateDispute(uint256)": {
        "details": "Anyone with role can call this to manually trigger escalation for expired disputesEscalates a dispute to the super admin for final admin"
      },
      "checkAuditAndInspectionStatus(string)": {
        "details": "checks audit and inspection status",
        "params": {
          "mineralId": "The ID of the mineral to check for audit and inspection status Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId"
        }
      },
      "constructor": {
        "details": "Events to enforce traceability"
      },
      "getAllRoleCounts()": {
        "details": "Returns all role counts in a single call",
        "returns": {
          "auditorCount": "Number of auditors",
          "buyerCount": "Number of buyers",
          "inspectorCount": "Number of inspectors",
          "minerCount": "Number of miners",
          "refinerCount": "Number of refiners",
          "transporterCount": "Number of transporters"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have a specific role",
        "params": {
          "role": "The role to query member count for"
        },
        "returns": {
          "count": "The number of accounts with the role"
        }
      },
      "getRolesForAddress(address)": {
        "details": "Returns all roles assigned to a given address",
        "params": {
          "account": "The address to check roles for"
        },
        "returns": {
          "roles": "An array of role names the address has"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasMinerRole(address)": {
        "details": "Roles helper functionschecks if an account has a specific role",
        "params": {
          "account": "The address of the account to checked with role association"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "inspectMineral(string,string)": {
        "details": "only the inspector can inspect mineralDetailsLogs audit report on every successful inspection",
        "params": {
          "mineralId": "The ID of the mineral under inspection",
          "report": "The inspection status report of the mineral under inspection"
        }
      },
      "isMineralRegistered(string)": {
        "details": "checks if a mineral with the given ID is registered",
        "params": {
          "mineralId": "the ID of the mineral to check"
        },
        "returns": {
          "_0": "A boolean indicating whether the mineral is registered or not"
        }
      },
      "purchaseMineral(string)": {
        "details": "Only the buyer can purchase mineralDetails",
        "params": {
          "mineralId": "The ID of the mineral under purchase"
        }
      },
      "raiseDispute(string,address,string,string)": {
        "details": "Registers a dispute",
        "params": {
          "defendant": "The address of the party being accused",
          "details": "The details of the dispute",
          "evidence": "Evidence supporting the dispute",
          "mineralId": "The ID of the mineral in question"
        }
      },
      "refineMineral(string,string)": {
        "details": "only the refiner can refiner a mineral",
        "params": {
          "mineralId": "The ID of the mineral under refinery"
        }
      },
      "registerMineral(string,string,uint256,string,uint256,string)": {
        "details": "Register a new mineral - only by miner.Every mineral is assigned a unique mineralId.",
        "params": {
          "_mineralType": "The type of a mineral.",
          "_name": "Mineral name.",
          "_origin": "Mineral Origin.",
          "_purityPercentage": "Mineral purity in percentage.",
          "_storageConditions": "Mineral Storage conditions.",
          "_weight": "Mineral weight in uint256."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "resolveDispute(uint256,string)": {
        "details": "Resolves a dispute",
        "params": {
          "disputeId": "The ID of the dispute to resolve",
          "resolutionDetails": "The details of the resolution"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferMineral(string,address,string,string)": {
        "details": "only the transporter can transport mineralDetails",
        "params": {
          "_destination": "The Destination area of the mineral(string)",
          "_origin": "The Original location of the mineral under transportation",
          "_receivingParty": "The address of the destination portal",
          "mineralId": "The ID of the mineral under transportation"
        }
      },
      "voteOnDispute(uint256,bool)": {
        "details": "Voting mechanism for resolving disputes",
        "params": {
          "approve": "Whether the voter approves resoluction or rejects it",
          "disputeId": "The ID of the disputet to vote on"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_auditMineral(string,string)": {
        "notice": "Emits MineralAudited event."
      },
      "inspectMineral(string,string)": {
        "notice": "Emits MineralInspected event on successful inspection"
      },
      "purchaseMineral(string)": {
        "notice": "Emits MineralPurchased event on successful purchase"
      },
      "refineMineral(string,string)": {
        "notice": "Emits MineralRefined event on successfl refining process"
      },
      "registerMineral(string,string,uint256,string,uint256,string)": {
        "notice": "Emits MineralRegistered event on successful registration."
      },
      "resolveDispute(uint256,string)": {
        "notice": "Emits DisputeResolved event on successful dispute resolution"
      },
      "transferMineral(string,address,string,string)": {
        "notice": "Emits MineralTransported on successful transportation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 3707,
        "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
        "label": "nonce",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3712,
        "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
        "label": "mineralDetails",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(MineralDetails)3689_storage)"
      },
      {
        "astId": 3718,
        "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
        "label": "mineralHistories",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(MineralHistory)3700_storage)dyn_storage)"
      },
      {
        "astId": 3722,
        "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
        "label": "roleMemberCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5919,
        "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
        "label": "rolesManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(RolesManager)5420"
      },
      {
        "astId": 6011,
        "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
        "label": "disputes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Dispute)6006_storage)"
      },
      {
        "astId": 6013,
        "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
        "label": "disputeCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6016,
        "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
        "label": "votingThreshold",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6019,
        "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
        "label": "votingDuration",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MineralHistory)3700_storage)dyn_storage": {
        "base": "t_struct(MineralHistory)3700_storage",
        "encoding": "dynamic_array",
        "label": "struct RolesManager.MineralHistory[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(RolesManager)5420": {
        "encoding": "inplace",
        "label": "contract RolesManager",
        "numberOfBytes": "20"
      },
      "t_enum(DisputeStatus)5976": {
        "encoding": "inplace",
        "label": "enum DisputeResolution.DisputeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(MineralHistory)3700_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RolesManager.MineralHistory[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(MineralHistory)3700_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MineralDetails)3689_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RolesManager.MineralDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(MineralDetails)3689_storage"
      },
      "t_mapping(t_uint256,t_struct(Dispute)6006_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DisputeResolution.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)6006_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Dispute)6006_storage": {
        "encoding": "inplace",
        "label": "struct DisputeResolution.Dispute",
        "members": [
          {
            "astId": 5978,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "disputeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5980,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "mineralId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5982,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "complainant",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5984,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "defendant",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5986,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "details",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 5988,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "evidence",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 5991,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(DisputeStatus)5976"
          },
          {
            "astId": 5993,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "createdAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5995,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "resolvedAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5997,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "approveVotes",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 5999,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "rejectVotes",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 6003,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "hasVoted",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6005,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "votingDeadline",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(MineralDetails)3689_storage": {
        "encoding": "inplace",
        "label": "struct RolesManager.MineralDetails",
        "members": [
          {
            "astId": 3658,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3660,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3662,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "origin",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3664,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "mineralType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3666,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "weight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3668,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "purityPercentage",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3670,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "storageConditions",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3672,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "registeredBy",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3674,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "currentStatus",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 3676,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "currentLocation",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 3678,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "currentHandler",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 3680,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "isPurchased",
            "offset": 20,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3682,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "isRefined",
            "offset": 21,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3684,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "isAudited",
            "offset": 22,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3686,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "isInspected",
            "offset": 23,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3688,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "timestamp",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(MineralHistory)3700_storage": {
        "encoding": "inplace",
        "label": "struct RolesManager.MineralHistory",
        "members": [
          {
            "astId": 3691,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3693,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "fieldChanged",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3695,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "newValue",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3697,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "updatedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3699,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/governance/DisputeResolution.sol:DisputeResolution",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}