{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/core/PrivacyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title PrivacyGuard contract\n * @author @0xJongiaseb11\n * It enforces privacy between the actors and also helps to keep sensitive data and activities safe from bad actors\n */\nimport { RolesManager } from \"./RolesManager.sol\";\n\ncontract PrivacyGuard is RolesManager {\n    /*//////////////////////////////////////////////////////////////\n                             CUSTOM ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    error PrivacyGuard__InvalidDataOrNotFound();\n    error PrivacyGuard__AccessDenied();\n    error PrivacyGuard__DataAlreadyExists();\n    error PrivacyGuard__InvalidEncryptedContent();\n\n    mapping(uint256 => string) private encryptedData;\n\n    /**\n     * Events for logging access attemps\n     */\n    event DataAccessAttempt(address indexed accessor, uint256 indexed dataId, bool success);\n    event SensitiveDataAdded(uint256 indexed dataId, address indexed addedBy);\n    event SensitiveDataDeleted(uint256 indexed dataId, address indexed deletedBy);\n\n    /**\n     * @dev Adds sensitive data to the system (only authorized roles)\n     * @param dataId The unique identifier for the data\n     * @param encryptedContent The encrypted content content of the data\n     * @notice Emits DataAdded event on successful addition of sensitive data\n     */\n    function addSensitiveData(uint256 dataId, string memory encryptedContent) public onlyRole(AUDITOR_ROLE) {\n        if (bytes(encryptedContent).length == 0) revert PrivacyGuard__InvalidEncryptedContent();\n\n        // if (encryptedData[dataId]/*.id*/ == dataId)\n        // revert PrivacyGuard__DataAlreadyExists();\n\n        encryptedData[dataId] = encryptedContent;\n\n        emit SensitiveDataAdded(dataId, msg.sender);\n    }\n\n    /**\n     * @dev Retrieves sensitive data (Only authorized roles)\n     * @param dataId The unique identifier for the data\n     * @return The encrypted data content\n     */\n    function getSensitiveData(uint256 dataId) public returns (string memory) {\n        if (!hasAccess(msg.sender)) revert PrivacyGuard__AccessDenied();\n\n        if (bytes(encryptedData[dataId]).length == 0) revert PrivacyGuard__InvalidDataOrNotFound();\n\n        emit DataAccessAttempt(msg.sender, dataId, true);\n\n        return encryptedData[dataId];\n    }\n\n    /**\n     * @dev Deletes sensitive data (Only admin or authorized roles)\n     * @param dataId The unique identifier for the data\n     */\n    function deleteSensitiveData(uint256 dataId) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (bytes(encryptedData[dataId]).length == 0) revert PrivacyGuard__InvalidDataOrNotFound();\n\n        delete encryptedData[dataId];\n        emit SensitiveDataDeleted(dataId, msg.sender);\n    }\n\n    /**\n     * @dev Checks if an account has access to sensitive data\n     * @param account The address of the account\n     * @return A boolean indicating access rights\n     */\n    function hasAccess(address account) internal view onlyNonZeroAddress(account) returns (bool) {\n        return hasMinerRole(account) || hasAuditorRole(account) || hasInspectorRole(account);\n    }\n}\n"
    },
    "contracts/core/RolesManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title RolesManager contract\n * @author @0xJonaseb11\n * It acts as the factory of all the roles in the whole supplychain\n * It is where all the roles in the chain are assigned and granted. No any other contract can handle that\n *\n * It is a Modular contract\n */\n\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\n\ncontract RolesManager is AccessControl, Errors {\n    /*/////////////////////////////////////////////////////\n                           SUPPLYCHAIN ROLES\n            /////////////////////////////////////////////////////*/\n    bytes32 public constant MINER_ROLE = keccak256(\"MINER_ROLE\");\n    bytes32 public constant REFINER_ROLE = keccak256(\"REFINER_ROLE\");\n    bytes32 public constant TRANSPORTER_ROLE = keccak256(\"TRANSPORTER_ROLE\");\n    bytes32 public constant AUDITOR_ROLE = keccak256(\"AUDITOR_ROLE\");\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\"INSPECTOR_ROLE\");\n    bytes32 public constant BUYER_ROLE = keccak256(\"BUYER_ROLE\");\n\n    /*//////////////////////////////////////////////////////\n                                 EVENTS\n        //////////////////////////////////////////////////////*/\n    event RoleAssigned(address indexed account, bytes32 indexed role, uint256 roleAssignedAt);\n    event RoleRevoked(bytes32 role, address account, address revoker, uint256 roleRevokedAt);\n\n    event MineralRegistered(\n        string mineralId,\n        string mineralName,\n        string mineralType,\n        string origin,\n        uint256 weight,\n        uint256 purityPercentage,\n        address indexed miner,\n        uint256 registeredAt\n    );\n    event MineralRefined(string mineralId, string refineryReport, address indexed refiner, uint256 refinedAt);\n    event MineralTransported(\n        string mineralId,\n        address indexed transporter,\n        address receivingParty,\n        string origin,\n        string destination,\n        uint256 transportedAt\n    );\n    event MineralInspected(string mineralId, string mineralStatus, address indexed inspector, uint256 inspectedAt);\n    event MineralAudited(string mineralId, string status, address indexed auditor, uint256 auditedAt);\n    event MineralPurchased(string mineralId, address indexed buyer, uint256 purchasedAt);\n    event MineralReadyToTrade(string mineralId, address indexed ApprovedBy, string status, uint256 inspectionDate);\n\n    // For every assigned role\n    event MinerRoleAssigned(address indexed assignee, uint256 timestamp);\n    event RefinerRoleAssigned(address indexed assignee, uint256 timestamp);\n    event TransporterRoleAssigned(address indexed assignee, uint256 timestamp);\n    event AuditorRoleAssigned(address indexed assignee, uint256 timestamp);\n    event InspectorRoleAssigned(address indexed assignee, uint256 timestamp);\n    event BuyerRoleAssigned(address indexed assignee, uint256 timestamp);\n    event AdminRoleAssigned(address indexed assignee, uint256 timestamp);\n    // For every revoked role\n    event MinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event RefinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event TransporterRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event AuditorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event InspectorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event BuyerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event AdminRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n\n    struct MineralDetails {\n        string id;\n        string name;\n        string origin;\n        string mineralType;\n        uint256 weight;\n        uint256 purityPercentage;\n        string storageConditions;\n        address registeredBy;\n        string currentStatus;\n        string currentLocation;\n        address currentHandler;\n        bool isPurchased;\n        bool isRefined;\n        bool isAudited;\n        bool isInspected;\n        uint256 timestamp;\n    }\n\n    struct MineralHistory {\n        string id;\n        string fieldChanged;\n        string newValue;\n        address updatedBy;\n        uint256 timestamp;\n    }\n\n    uint256 private nonce = block.timestamp + block.number;\n    mapping(string => MineralDetails) public mineralDetails;\n    mapping(string => MineralHistory[]) public mineralHistories;\n    mapping(bytes32 => uint256) public roleMemberCount;\n\n    // Set the deployer as the admin\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        roleMemberCount[DEFAULT_ADMIN_ROLE] = 1;\n        emit AdminRoleAssigned(msg.sender, block.timestamp);\n\n        // _setupRole(MINER_ROLE, msg.sender);\n        // roleMemberCount[MINER_ROLE] = 1;\n        // emit MinerRoleAssigned(msg.sender, block.timestamp);\n\n        // _setupRole(AUDITOR_ROLE, msg.sender);\n        // roleMemberCount[AUDITOR_ROLE] = 1;\n        // emit AuditorRoleAssigned(msg.sender, block.timestamp);\n\n        // _setupRole(INSPECTOR_ROLE, msg.sender);\n        // roleMemberCount[INSPECTOR_ROLE] = 1;\n        // emit InspectorRoleAssigned(msg.sender, block.timestamp);\n\n        // _setupRole(BUYER_ROLE, msg.sender);\n        // roleMemberCount[BUYER_ROLE] = 1;\n        // emit BuyerRoleAssigned(msg.sender, block.timestamp);\n\n        // _setupRole(REFINER_ROLE, msg.sender);\n        // roleMemberCount[REFINER_ROLE] = 1;\n        // emit RefinerRoleAssigned(msg.sender, block.timestamp);\n\n        // _setupRole(TRANSPORTER_ROLE, msg.sender);\n        // roleMemberCount[TRANSPORTER_ROLE] = 1;\n        // emit TransporterRoleAssigned(msg.sender, block.timestamp);\n    }\n\n    /**\n     * @dev checks if sender has specific role\n     */\n    modifier restrictedToRole(bytes32 role) {\n        if (!hasRole(role, msg.sender)) {\n            revert InsufficientPermissionsToPerformAction(msg.sender);\n        }\n        _;\n    }\n\n    modifier onlyNonZeroAddress(address account) {\n        if (account == address(0)) {\n            revert InvalidAccountAddress();\n        }\n        _;\n    }\n\n    modifier onlyValidMineralId(string memory mineralId) {\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\n            revert InvalidMineralIdOrNotFound(mineralId);\n        }\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ATTENTION HERE - CHECKING VALIDITY OF A MINERAL\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\        \n    //////////////////////////////////////////////////////////////*/\n    modifier onlyValidMineral(string memory mineralId) virtual {\n        if (!isMineralRegistered(mineralId) || bytes(mineralId).length == 0) {\n            revert InvalidMineralIdOrNotFound(mineralId);\n        }\n        _;\n    }\n\n    /*////////////////////////////////////////////////////\n            =====================================================\n            ///////// ROLE-BASED FUNCTIONALITY FUNCTIONS ////////\n            ====================================================\n            //////////////////////////////////////////////////*/\n\n    /*//////////////////////////////////////////////////////////////\n        ================================================================\n                              MINING ENTERPRISE PORTAL\n        =================================================================\n       //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Register a new mineral - only by miner.\n     * @dev Every mineral is assigned a unique mineralId.\n     * @param _name Mineral name.\n     * @param _mineralType The type of a mineral.\n     * @param _weight Mineral weight in uint256.\n     * @param _origin Mineral Origin.\n     * @param _purityPercentage Mineral purity in percentage.\n     * @param _storageConditions Mineral Storage conditions.\n     * @notice Emits MineralRegistered event on successful registration.\n     */\n    function registerMineral(\n        string memory _name,\n        string memory _mineralType,\n        uint256 _weight,\n        string memory _origin,\n        uint256 _purityPercentage,\n        string memory _storageConditions\n    ) external virtual restrictedToRole(MINER_ROLE) returns (string memory) {\n        if (bytes(_name).length == 0) revert RolesManager__InvalidMineralName();\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\n\n        if (bytes(_mineralType).length == 0) revert RolesManager__InvalidMineralType();\n\n        if (_weight == 0) revert RolesManager__InvalidMineralWeight();\n\n        if (_purityPercentage == 0 || _purityPercentage > 100) revert RolesManager__InvalidMineralPurityPercentage();\n\n        if (_purityPercentage <= 80) revert RolesManager__MineralPurityPercentageTooLowToRegister(_purityPercentage);\n\n        if (bytes(_storageConditions).length == 0) revert RolesManager__InvalidMineralStorageConditions();\n\n        string memory mineralId = _generateHashedMineralId(_mineralType);\n\n        mineralDetails[mineralId] = MineralDetails({\n            id: mineralId,\n            name: _name,\n            origin: _origin,\n            mineralType: _mineralType,\n            weight: _weight,\n            purityPercentage: _purityPercentage,\n            storageConditions: _storageConditions,\n            registeredBy: msg.sender,\n            currentStatus: \"Raw\",\n            currentLocation: \"Mining Center\",\n            currentHandler: msg.sender,\n            isPurchased: false,\n            isRefined: false,\n            isAudited: false,\n            isInspected: false,\n            timestamp: block.timestamp\n        });\n\n        // record initial mineral history\n        mineralHistories[mineralId].push(\n            MineralHistory({\n                id: mineralId,\n                fieldChanged: \"Registered\",\n                newValue: string(abi.encodePacked(\"Origin: \", _origin)),\n                updatedBy: msg.sender,\n                timestamp: block.timestamp\n            })\n        );\n\n        emit MineralRegistered(\n            mineralId,\n            _name,\n            _mineralType,\n            _origin,\n            _weight,\n            _purityPercentage,\n            msg.sender,\n            block.timestamp\n        );\n\n        return mineralId;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n        ===============================================================\n                              PROCESSING ENTERPRISE\n        ===============================================================                    \n        //////////////////////////////////////////////////////////////*/\n\n    /*///////////////////////////////////////////////\n                              REFINER\n        ///////////////////////////////////////////////*/\n\n    /**\n     * @dev only the refiner can refiner a mineral\n     * @param mineralId The ID of the mineral under refinery\n     * @notice Emits MineralRefined event on successfl refining process\n     */\n    function refineMineral(string memory mineralId, string memory report) public restrictedToRole(REFINER_ROLE) {\n        // if (\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n        //     bytes(mineralId).length == 0\n        // ) {\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\n        // }\n\n        if (mineralDetails[mineralId].isRefined == true) revert RolesManager__MineralAlreadyRefined(mineralId);\n\n        mineralDetails[mineralId].isRefined = true;\n\n        emit MineralRefined(mineralId, report, msg.sender, block.timestamp);\n    }\n\n    /*////////////////////////////////////////////////\n                              TRANSPORTER\n          ///////////////////////////////////////////////*/\n\n    /**\n     * @dev only the transporter can transport mineralDetails\n     * @param mineralId The ID of the mineral under transportation\n     * @param _receivingParty The address of the destination portal\n     * @param _origin The Original location of the mineral under transportation\n     * @param _destination The Destination area of the mineral(string)\n     * @notice Emits MineralTransported on successful transportation\n     */\n    function transferMineral(\n        string memory mineralId,\n        address _receivingParty,\n        string memory _origin,\n        string memory _destination\n    ) public virtual restrictedToRole(TRANSPORTER_ROLE) {\n        // if (\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n        //     bytes(mineralId).length == 0\n        // ) {\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\n        // }\n\n        if (_receivingParty == address(0)) revert RolesManager__InvalidReceivingPartyAddress();\n\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\n\n        if (bytes(_destination).length == 0) revert RolesManager__InvalidMineralDestination();\n\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\n\n        mineralDetails[mineralId].currentHandler = msg.sender;\n\n        emit MineralTransported(mineralId, msg.sender, _receivingParty, _origin, _destination, block.timestamp);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n        ===============================================================\n                     SUPPLYCHAIN VALIDATION PORTAL\n        ===============================================================\n        //////////////////////////////////////////////////////////////*/\n\n    /*///////////////////////////////////////////////\n                               INSPECTOR\n            ///////////////////////////////////////////////*/\n\n    /**\n     * @dev only the inspector can inspect mineralDetails\n     * @param mineralId The ID of the mineral under inspection\n     * @param report The inspection status report of the mineral under inspection\n     * @notice Emits MineralInspected event on successful inspection\n     * @dev Logs audit report on every successful inspection\n     */\n    function inspectMineral(string memory mineralId, string memory report) public restrictedToRole(INSPECTOR_ROLE) {\n        // if (\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n        //     bytes(mineralId).length == 0\n        // ) {\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\n        // }\n\n        if (mineralDetails[mineralId].isInspected == true) revert RolesManager__MineralAlreadyInspected(mineralId);\n\n        mineralDetails[mineralId].isInspected = true;\n\n        emit MineralInspected(mineralId, report, msg.sender, block.timestamp);\n\n        /*//////////////////////////////////////////////////\n                          HANDLE INSPECTION REPORTING\n           ///////////////////////////////////////////////////*/\n    }\n\n    /*/////////////////////////////////////////////\n                               AUDITOR\n            ////////////////////////////////////////////*/\n\n    /**\n     * @dev only the auditor can audit mineralDetails.\n     * @dev Logs audit report on every successful audit.\n     * @param mineralId The ID of the mineral under audition.\n     * @param report The audit status report of the mineral under audition.\n     * @notice Emits MineralAudited event.\n     */\n    function _auditMineral(\n        string memory mineralId,\n        string memory report\n    ) public /*virtual*/ restrictedToRole(AUDITOR_ROLE) {\n        // if (\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n        //     bytes(mineralId).length == 0\n        // ) {\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\n        // }\n\n        if (mineralDetails[mineralId].isAudited == true) revert RolesManager__MineralAlreadyAudited(mineralId);\n\n        mineralDetails[mineralId].isAudited = true;\n\n        emit MineralAudited(mineralId, report, msg.sender, block.timestamp);\n\n        /*//////////////////////////////////////////////////\n                          HANDLE AUDIT REPORTING\n           ///////////////////////////////////////////////////*/\n    }\n\n    /**\n     * @dev Only the buyer can purchase mineralDetails\n     * @param mineralId The ID of the mineral under purchase\n     * @notice Emits MineralPurchased event on successful purchase\n     */\n    function purchaseMineral(string memory mineralId) public restrictedToRole(BUYER_ROLE) {\n        // if (\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n        //     bytes(mineralId).length == 0\n        // ) {\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\n        // }\n\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\n\n        (bool isAudited, bool isInspected) = checkAuditAndInspectionStatus(mineralId);\n\n        if (!(isAudited && isInspected)) revert RolesManager__MineralNotMarketReady(mineralId);\n\n        // require(mineralDetails[mineralId].currentHandler == msg.sender, \"You are not the assigned buyer for this mineral!!\");\n\n        mineralDetails[mineralId].isPurchased = true;\n        mineralDetails[mineralId].currentHandler = msg.sender;\n\n        emit MineralPurchased(mineralId, msg.sender, block.timestamp);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     ROLESMANAGER HELPER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /*//////////////////////////////////////////////////////////////\n                            ADMIN FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    ////////////////////////////////////////////////\n    /////// ROLEMANAGEMENT FUNCTIONS ////////////////\n    ////////////////////////////////////////////////\n\n    /////////////////////////////////\n    ////// ROLE GRANTING ////////////\n    /////////////////////////////////\n\n    /*////////////////////////////////////////////////////\n                  ROLE MANAGEMENT FUNCTIONS\n    ////////////////////////////////////////////////////*/\n\n    function assignMiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasMinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(MINER_ROLE, account);\n        roleMemberCount[MINER_ROLE]++;\n        emit MinerRoleAssigned(account, block.timestamp);\n    }\n\n    function assignRefiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasRefinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(REFINER_ROLE, account);\n        roleMemberCount[REFINER_ROLE]++;\n        emit RefinerRoleAssigned(account, block.timestamp);\n    }\n\n    function assignTransporter(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasTransporterRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(TRANSPORTER_ROLE, account);\n        roleMemberCount[TRANSPORTER_ROLE]++;\n        emit TransporterRoleAssigned(account, block.timestamp);\n    }\n\n    function assignAuditor(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasAuditorRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(AUDITOR_ROLE, account);\n        roleMemberCount[AUDITOR_ROLE]++;\n        emit AuditorRoleAssigned(account, block.timestamp);\n    }\n\n    function assignInspector(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasInspectorRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(INSPECTOR_ROLE, account);\n        roleMemberCount[INSPECTOR_ROLE]++;\n        emit InspectorRoleAssigned(account, block.timestamp);\n    }\n\n    function assignBuyer(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasBuyerRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(BUYER_ROLE, account);\n        roleMemberCount[BUYER_ROLE]++;\n        emit BuyerRoleAssigned(account, block.timestamp);\n    }\n\n    /////////////////////////////////\n    // ROLE REVOKATION /////////////\n    ////////////////////////////////\n\n    function revokeMiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasMinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(MINER_ROLE, account);\n        if (roleMemberCount[MINER_ROLE] > 0) {\n            roleMemberCount[MINER_ROLE]--;\n        }\n        emit MinerRoleRevoked(account, reason, block.timestamp);\n    }\n\n    function revokeRefiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasRefinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(REFINER_ROLE, account);\n\n        if (roleMemberCount[REFINER_ROLE] > 0) {\n            roleMemberCount[REFINER_ROLE]--;\n        }\n        emit RefinerRoleRevoked(account, reason, block.timestamp);\n    }\n\n    function revokeTransporter(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasTransporterRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(TRANSPORTER_ROLE, account);\n        if (roleMemberCount[TRANSPORTER_ROLE] > 0) {\n            roleMemberCount[TRANSPORTER_ROLE]--;\n        }\n        emit TransporterRoleRevoked(account, reason, block.timestamp);\n    }\n\n    function revokeInspector(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasInspectorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(INSPECTOR_ROLE, account);\n        if (roleMemberCount[INSPECTOR_ROLE] > 0) {\n            roleMemberCount[INSPECTOR_ROLE]--;\n        }\n        emit InspectorRoleRevoked(account, reason, block.timestamp);\n    }\n\n    function revokeAuditor(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasAuditorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(AUDITOR_ROLE, account);\n        if (roleMemberCount[AUDITOR_ROLE] > 0) {\n            roleMemberCount[AUDITOR_ROLE]--;\n        }\n        emit AuditorRoleRevoked(account, reason, block.timestamp);\n    }\n\n    function revokeBuyer(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasBuyerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(BUYER_ROLE, account);\n        if (roleMemberCount[BUYER_ROLE] > 0) {\n            roleMemberCount[BUYER_ROLE]--;\n        }\n        emit BuyerRoleRevoked(account, reason, block.timestamp);\n    }\n\n    /*/////////////////////////////////////////////////////\n                  NEW ROLE COUNT FUNCTIONS\n    /////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Returns the number of accounts that have a specific role\n     * @param role The role to query member count for\n     * @return count The number of accounts with the role\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256 count) {\n        if (!isValidRole(role)) revert RolesManager__InvalidRole();\n        return roleMemberCount[role];\n    }\n\n    /**\n     * @dev Returns all role counts in a single call\n     * @return minerCount Number of miners\n     * @return refinerCount Number of refiners\n     * @return transporterCount Number of transporters\n     * @return auditorCount Number of auditors\n     * @return inspectorCount Number of inspectors\n     * @return buyerCount Number of buyers\n     */\n    function getAllRoleCounts()\n        public\n        view\n        returns (\n            uint256 minerCount,\n            uint256 refinerCount,\n            uint256 transporterCount,\n            uint256 auditorCount,\n            uint256 inspectorCount,\n            uint256 buyerCount\n        )\n    {\n        return (\n            roleMemberCount[MINER_ROLE],\n            roleMemberCount[REFINER_ROLE],\n            roleMemberCount[TRANSPORTER_ROLE],\n            roleMemberCount[AUDITOR_ROLE],\n            roleMemberCount[INSPECTOR_ROLE],\n            roleMemberCount[BUYER_ROLE]\n        );\n    }\n\n    // ... (keep all your existing functions below this point) ...\n    // Only modification needed is to ensure the _setupRole function also increments counters:\n    function _setupRole(bytes32 role, address account) internal {\n        _grantRole(role, account);\n\n        roleMemberCount[role]++;\n    }\n\n    /**\n     * @dev Revokes role from an account - onlydmin\n     * @param account The address of the account to be revoked role by the admin\n     * @notice Emits event of the revoked role\n     */\n\n    /*/////////////////////////////////////////////////////\n   ====================================================\n            HELPER FUNCTIONS SECTION\n   ====================================================\n   /////////////////////////////////////////////////////*/\n\n    /////////////////////////////////////////////////\n    //////// ROLE OWNERSHIP CHECKS //////////////////\n    /////////////////////////////////////////////////\n\n    /**\n     * @dev Returns all roles assigned to a given address\n     * @param account The address to check roles for\n     * @return roles An array of role names the address has\n     */\n    function getRolesForAddress(\n        address account\n    ) public view onlyNonZeroAddress(account) returns (string[] memory roles) {\n        // Count how many roles the address has\n        uint256 roleCount = 0;\n\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) roleCount++;\n        if (hasRole(MINER_ROLE, account)) roleCount++;\n        if (hasRole(REFINER_ROLE, account)) roleCount++;\n        if (hasRole(TRANSPORTER_ROLE, account)) roleCount++;\n        if (hasRole(AUDITOR_ROLE, account)) roleCount++;\n        if (hasRole(INSPECTOR_ROLE, account)) roleCount++;\n        if (hasRole(BUYER_ROLE, account)) roleCount++;\n\n        // Initialize array with the counted size\n        roles = new string[](roleCount);\n        uint256 index = 0;\n\n        // Populate the array with role names\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) {\n            roles[index] = \"ADMIN\";\n            index++;\n        }\n        if (hasRole(MINER_ROLE, account)) {\n            roles[index] = \"MINER\";\n            index++;\n        }\n        if (hasRole(REFINER_ROLE, account)) {\n            roles[index] = \"REFINER\";\n            index++;\n        }\n        if (hasRole(TRANSPORTER_ROLE, account)) {\n            roles[index] = \"TRANSPORTER\";\n            index++;\n        }\n        if (hasRole(AUDITOR_ROLE, account)) {\n            roles[index] = \"AUDITOR\";\n            index++;\n        }\n        if (hasRole(INSPECTOR_ROLE, account)) {\n            roles[index] = \"INSPECTOR\";\n            index++;\n        }\n        if (hasRole(BUYER_ROLE, account)) {\n            roles[index] = \"BUYER\";\n            index++;\n        }\n\n        return roles;\n    }\n\n    // function _setupRole(bytes32 role, address account) internal virtual {\n    //     __grantRole(role, account);\n    // }\n\n    /**\n     ** @dev Roles helper functions\n     * @dev checks if an account has a specific role\n     * @param account The address of the account to checked with role association\n     */\n    function hasMinerRole(address account) public view returns (bool) {\n        return hasRole(MINER_ROLE, account);\n    }\n    function hasRefinerRole(address account) public view returns (bool) {\n        return hasRole(REFINER_ROLE, account);\n    }\n    function hasTransporterRole(address account) public view returns (bool) {\n        return hasRole(TRANSPORTER_ROLE, account);\n    }\n    function hasInspectorRole(address account) public view returns (bool) {\n        return hasRole(INSPECTOR_ROLE, account);\n    }\n    function hasAuditorRole(address account) public view returns (bool) {\n        return hasRole(AUDITOR_ROLE, account);\n    }\n    function hasBuyerRole(address account) public view returns (bool) {\n        return hasRole(BUYER_ROLE, account);\n    }\n    function hasAdminRole(address account) public view returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    // Helper function to validate the role\n    function isValidRole(bytes32 role) private pure returns (bool) {\n        return\n            role == MINER_ROLE ||\n            role == REFINER_ROLE ||\n            role == TRANSPORTER_ROLE ||\n            role == AUDITOR_ROLE ||\n            role == INSPECTOR_ROLE ||\n            role == BUYER_ROLE;\n    }\n\n    /**\n    * @dev checks audit and inspection status\n    * @param mineralId The ID of the mineral to check for audit and inspection status\n\n    * Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\n    */\n    function checkAuditAndInspectionStatus(\n        string memory mineralId\n    ) public virtual restrictedToRole(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert RolesManager__InvalidMineralIdOrNotFound();\n        }\n\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\n            emit MineralReadyToTrade(mineralId, msg.sender, \"TradingReady\", block.timestamp);\n        } else {\n            revert RolesManager__MineralNotMarketReady(mineralId);\n        }\n\n        isAudited = mineralDetails[mineralId].isAudited;\n        isInspected = mineralDetails[mineralId].isInspected;\n\n        return (isAudited, isInspected);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            GETTERS - For Traceability\n    //////////////////////////////////////////////////////////////*/\n\n    function getMineralHistory(string memory mineralId) public view virtual returns (MineralHistory[] memory) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert RolesManager__InvalidMineralIdOrNotFound();\n        }\n\n        return mineralHistories[mineralId];\n    }\n\n    /*///////////////////////////////////////////////////////////////\n    ===============================================================\n         MINERAL REGISTRATION HELPER FUNCTIONS SECTION\n    ===============================================================\n    ////////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev checks if a mineral with the given ID is registered\n     * @param mineralId the ID of the mineral to check\n     * @return A boolean indicating whether the mineral is registered or not\n     */\n    function isMineralRegistered(string memory mineralId) public virtual returns (bool) {\n        if (bytes(mineralId).length == 0) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\n            revert MineralRegistry__MineralNotRegistered(mineralId);\n        }\n\n        return true;\n    }\n\n    //////////////////////////////////////////////////////\n    //////// GENERATE HASHED MINERALID FOR UNIQUENESS/////\n    //////////////////////////////////////////////////////\n    function _generateHashedMineralId(string memory mineralType) internal returns (string memory) {\n        bytes32 fullHash = keccak256(abi.encodePacked(mineralType, msg.sender, block.timestamp, nonce++));\n\n        // Convert first 4 bytes (8 hex characters) into hex string with \"0x\"\n        bytes memory shortHex = new bytes(10); // 2 for \"0x\", 8 for hex chars\n        shortHex[0] = \"0\";\n        shortHex[1] = \"x\";\n        for (uint i = 0; i < 4; i++) {\n            shortHex[2 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] >> 4));\n            shortHex[3 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] & 0x0f));\n        }\n\n        return string(abi.encodePacked(mineralType, \"-\", string(shortHex)));\n    }\n\n    // helper: convert nibble to hex char (0-9, a-f)\n    function _nibbleToHexChar(uint8 nibble) internal pure returns (bytes1) {\n        return nibble < 10 ? bytes1(nibble + 0x30) : bytes1(nibble + 0x61 - 10);\n    }\n\n    ///////////////////////////////////////////////\n    //////// getting all registered minerals /////\n    // //////////////////////////////////////////////\n    // function getAllRegisteredMineral() public view returns(MineralDetails[] memory mineralDetails) {\n    //     return mineralDetails;\n\n    // }\n}\n"
    },
    "contracts/core/SupplychainValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title SupplychainValidator cotnract\n * @author 0xJonaseb11\n * It handles all the logic related to validating the activites done in the supplychain to enforce transparency and integrity\n * Helps to make sure that no bad actors done or corruption involved in the chain\n */\n\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport { RolesManager } from \"./RolesManager.sol\";\nimport { MineralRegistry } from \"../modules/MineralRegistry.sol\";\nimport { PrivacyGuard } from \"../core/PrivacyGuard.sol\";\nimport { Tokenization } from \"../tokens/Tokenization.sol\";\nimport { TransactionLog } from \"../logs/TransactionLog.sol\";\nimport { LogisticsManager } from \"../modules/LogisticsManager.sol\";\n\ncontract SupplychainValidator is RolesManager {\n    RolesManager private rolesManager;\n    MineralRegistry private mineralRegistry;\n    PrivacyGuard private privacyGuard;\n    Tokenization private tokenization;\n    TransactionLog private transactionLog;\n    LogisticsManager private logisticsManager;\n\n    /**\n     * @dev Events for traceability\n     */\n    event OperationValidated(address indexed actor, string operation, uint256 timestamp);\n    event SupplychainValidated(address indexed validator, bool isValid, string mineralId);\n\n    modifier onlyAuthorizedActor(bytes32 role) {\n        if (!hasRole(role, msg.sender)) {\n            revert InsufficientPermissionsToPerformAction(msg.sender);\n        }\n        _;\n    }\n\n    constructor(\n        address _rolesManager,\n        address _mineralRegistry,\n        address _privacyGuard,\n        address _tokenization,\n        address _transactionLog,\n        address _logisticsManager\n    ) RolesManager() {\n        rolesManager = RolesManager(_rolesManager);\n        mineralRegistry = MineralRegistry(_mineralRegistry);\n        privacyGuard = PrivacyGuard(_privacyGuard);\n        tokenization = Tokenization(_tokenization);\n        transactionLog = TransactionLog(_transactionLog);\n        logisticsManager = LogisticsManager(_logisticsManager);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n        ===============================================================\n                              SUPPLYCHAIN VALIDATION PORTAL\n        ===============================================================\n        //////////////////////////////////////////////////////////////*/\n\n    /*/////////////////////////////////////////\n                              MINER\n            /////////////////////////////////////////*/\n\n    /**\n     * @dev validates mining operation\n     * @notice Emits OperationValidated event fon successful operation validation\n     */\n    function validateMiningOperation(\n        string memory mineralId\n    ) external onlyAuthorizedActor(MINER_ROLE) onlyValidMineral(mineralId) {\n        transactionLog.recordOperation(msg.sender, \"Mining\", mineralId);\n\n        emit OperationValidated(msg.sender, \"Mining\", block.timestamp);\n    }\n\n    /*/////////////////////////////////////////\n                              REFINER\n            /////////////////////////////////////////*/\n\n    /**\n     * @dev validates refining operation\n     * @notice Emits OperationValidated even on successful validation\n     */\n    function validateRefiningOperation(\n        string memory mineralId\n    ) external onlyAuthorizedActor(REFINER_ROLE) onlyValidMineral(mineralId) {\n        transactionLog.recordOperation(msg.sender, \"Refining\", mineralId);\n\n        emit OperationValidated(msg.sender, \"Refining\", block.timestamp);\n    }\n\n    /*/////////////////////////////////////////\n                              TRASPORTER\n            /////////////////////////////////////////*/\n\n    /**\n     * @dev validates transportation operation\n     * @notice Emits OperationValidated even on successful validation\n     */\n    function validateTransportationOperation(\n        string memory mineralId,\n        address to\n    ) external onlyAuthorizedActor(TRANSPORTER_ROLE) onlyValidMineral(mineralId) {\n        uint256 tokenId = tokenization.getTokenIdByMineralId(mineralId);\n\n        tokenization.safeTransferFrom(msg.sender, to, tokenId);\n\n        transactionLog.recordOperation(msg.sender, \"Transportation\", mineralId);\n\n        emit OperationValidated(msg.sender, \"Transportation\", block.timestamp);\n    }\n\n    /*/////////////////////////////////////////\n                              BUYER\n            /////////////////////////////////////////*/\n\n    /**\n     * @dev validate purchase operation\n     * @notice Emits OperationValidated event on success validation\n     */\n    function validatePurchaseOperation(\n        string memory mineralId,\n        address buyer\n    ) external onlyAuthorizedActor(BUYER_ROLE) onlyValidMineral(mineralId) {\n        uint256 tokenId = tokenization.getTokenIdByMineralId(mineralId);\n\n        tokenization.safeTransferFrom(msg.sender, buyer, tokenId);\n        transactionLog.recordOperation(msg.sender, \"Purchase\", mineralId);\n\n        emit OperationValidated(msg.sender, \"Purchase\", block.timestamp);\n    }\n\n    /*/////////////////////////////////////////\n                              INSPECTOR\n            /////////////////////////////////////////*/\n\n    /**\n     * @dev validates Inspection operation\n     * @notice Emits OperationValidated event on successfl validataion\n     */\n    function validateInspectionOperation(\n        string memory mineralId,\n        address inspector\n    ) external onlyAuthorizedActor(INSPECTOR_ROLE) onlyValidMineral(mineralId) {\n        transactionLog.recordOperation(inspector, \"Inspection\", mineralId);\n\n        emit OperationValidated(inspector, \"Inspector\", block.timestamp);\n    }\n\n    /**\n     * @dev Validates the supply chain of a mineral\n     * @param mineralId The ID of the mineral to validate\n     * @return isValid Indicates whether the supply chain is valid\n     * @return validationReason A string describing the validation result\n     */\n\n    function validateSupplychain(\n        string memory mineralId\n    ) public returns (bool isValid, string memory validationReason) {\n        MineralRegistry.MineralDetails memory details = mineralRegistry.getMineralDetails(mineralId);\n\n        (bool isAudited, bool isInspected) = mineralRegistry.checkAuditAndInspectionStatus(mineralId);\n\n        if (!isAudited) {\n            return (false, \"Mineral is not audited!!\");\n        }\n        if (!isInspected) {\n            return (false, \"Mineral is not inspected!!\");\n        }\n\n        // check for mineral transaction history\n        TransactionLog.Transaction[] memory transactions = transactionLog.getTransactionsByMineral(mineralId);\n        if (transactions.length == 0) {\n            // revert SupplychainValidator__InvalidMineralTransactionHistory();\n            return (false, \"No transaction history found for specified mineral\");\n        }\n\n        // validate ownership chain in transactions\n        address currentOwner = details.currentHandler;\n        for (uint256 i = transactions.length; i > 0; i--) {\n            TransactionLog.Transaction memory transaction = transactions[i - 1];\n            if (transaction.receiver != currentOwner) {\n                // revert SupplychainValidator__InvalidMineralOwnershipChain();\n                return (false, \"Invalid ownership chain in transactions!!\");\n            }\n            currentOwner = transaction.sender;\n        }\n\n        if (currentOwner != details.registeredBy) {\n            // revert SupplychainValidator__InvalidMineralOwnershipChain();\n            return (false, \"Ownership chain does not lead back to the original registrant!!\");\n        }\n\n        // validation passed\n        return (true, \"Supplychain is Valid!!\");\n    }\n\n    /**\n     * @dev Logs validation results for specified mineral\n     * @notice Emits SupplychainValidated, an event with the validation reason of the mineral supplychain\n     * @param mineralId The ID of the mineral to validate\n     */\n    function logValidationResult(string memory mineralId) public returns (bool, string memory) {\n        if (bytes(mineralId).length == 0 || !isMineralRegistered(mineralId)) {\n            revert SupplychainValidator__InvalidMineralIdOrNotFound(mineralId);\n        }\n        (bool isValid, string memory validationReason) = validateSupplychain(mineralId);\n\n        emit SupplychainValidated(msg.sender, isValid, mineralId);\n\n        return (isValid, validationReason);\n    }\n}\n"
    },
    "contracts/governance/DisputeResolution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title DisputeResolution contract\n * @author @0xJonaseb11\n * @dev It handles and resolves disputes raised by supplychain members\n * @dev It incorporates weighted voting to make sure that disputes are resolved in transparency\n * @notice Hard-to-resolve disputes are later on decided by the super admins for resolution\n */\n\nimport { MineralRegistry } from \"../modules/MineralRegistry.sol\";\nimport { TransactionLog } from \"../logs/TransactionLog.sol\";\nimport { RolesManager } from \"../core/RolesManager.sol\";\n\ncontract DisputeResolution is RolesManager {\n    RolesManager private rolesManager;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event DisputeRaised(\n        uint256 indexed disputeId,\n        string mineralId,\n        address indexed complainant,\n        address defendant,\n        string details,\n        uint256 raisedAt\n    );\n    event DisputeResolved(uint256 indexed disputeId, string resolutionDetails, uint256 timestamp);\n    event DisputeClosedUnresolved(\n        address closedBy,\n        uint256 disputeId,\n        string mineralId,\n        address complainant,\n        address defendant,\n        string details,\n        uint256 closedUnresolvedAt\n    );\n    event DisputeEscalated(uint256 indexed disputeId, uint256 timestamp);\n    event DisputeRejected(uint256 indexed disputeId, string reason, uint256 timestamp);\n\n    /*//////////////////////////////////////////////////////////////\n                            ENUM FOR STATUS\n    //////////////////////////////////////////////////////////////*/\n    enum DisputeStatus {\n        Pending,\n        Resolved,\n        Rejected,\n        Escalated\n    }\n\n    struct Dispute {\n        uint256 disputeId;\n        string mineralId;\n        address complainant;\n        address defendant;\n        string details;\n        string evidence;\n        DisputeStatus status;\n        uint256 createdAt;\n        uint256 resolvedAt;\n        uint256 approveVotes;\n        uint256 rejectVotes;\n        mapping(address => bool) hasVoted;\n        uint256 votingDeadline;\n    }\n\n    mapping(uint256 => Dispute) public disputes;\n    uint256 public disputeCount;\n    uint256 public votingThreshold = 3; // Minimum votes required for resolution\n    uint256 public votingDuration = 10 days;\n\n    /**\n     * @dev Events to enforce traceability\n     */\n\n    constructor() {}\n\n    modifier onlyValidDisputeId(uint256 disputeId) {\n        if (disputeId == 0 || disputes[disputeId].disputeId != disputeId)\n            revert DisputeResolution__InvalidDisputeIdOrNotFound();\n        _;\n    }\n\n    /**\n     * @dev Registers a dispute\n     * @param mineralId The ID of the mineral in question\n     * @param defendant The address of the party being accused\n     * @param details The details of the dispute\n     * @param evidence Evidence supporting the dispute\n     */\n    function raiseDispute(\n        string memory mineralId,\n        address defendant,\n        string calldata details,\n        string calldata evidence\n    ) external {\n        if (bytes(mineralId).length == 0) revert DisputeResolution__InvalidMineralIdOrNotFound();\n        if (defendant == address(0)) revert DisputeResolution__InvalidDisputeDefendantAddress();\n        if (bytes(details).length == 0) revert DisputeResolution__InvalidDisputeDetails();\n        if (bytes(evidence).length == 0) revert DisputeResolution__InvalidDisputeEvidence();\n\n        uint256 disputeId = disputeCount++;\n\n        Dispute storage dispute = disputes[disputeId];\n        dispute.disputeId = disputeId;\n        dispute.mineralId = mineralId;\n        dispute.complainant = msg.sender;\n        dispute.defendant = defendant;\n        dispute.details = details;\n        dispute.evidence = evidence;\n        dispute.status = DisputeStatus.Pending;\n        dispute.createdAt = block.timestamp;\n        dispute.resolvedAt = 0;\n        dispute.approveVotes = 0;\n        dispute.rejectVotes = 0;\n        dispute.votingDeadline = block.timestamp + votingDuration;\n\n        emit DisputeRaised(disputeId, mineralId, msg.sender, defendant, details, block.timestamp);\n    }\n\n    /**\n     * @dev Voting mechanism for resolving disputes\n     * @param disputeId The ID of the disputet to vote on\n     * @param approve Whether the voter approves resoluction or rejects it\n     */\n\n    function voteOnDispute(uint256 disputeId, bool approve) external {\n        Dispute storage dispute = disputes[disputeId];\n\n        if (dispute.status != DisputeStatus.Pending) revert DisputeResolution__DisputeStatusNotPending(disputeId);\n        if (dispute.hasVoted[msg.sender]) revert DisputeResolution__AlreadyVoted(msg.sender);\n        if (\n            !hasRole(AUDITOR_ROLE, msg.sender) &&\n            !hasRole(INSPECTOR_ROLE, msg.sender) &&\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender)\n        ) {\n            revert DisputeResolution__NotEligibleToVote(msg.sender);\n        }\n\n        /**\n         * check if voting period has expired, if yes -> Auto escalate\n         */\n        if (block.timestamp >= dispute.votingDeadline) {\n            dispute.status = DisputeStatus.Escalated;\n\n            emit DisputeEscalated(disputeId, block.timestamp);\n            revert DisputeResolution__DisputeEscalated_UnableToVote(disputeId);\n        }\n\n        dispute.hasVoted[msg.sender] == true;\n\n        if (approve) {\n            dispute.approveVotes++;\n        } else {\n            dispute.rejectVotes++;\n        }\n\n        if (dispute.approveVotes >= votingThreshold) {\n            dispute.status = DisputeStatus.Resolved;\n            dispute.resolvedAt = block.timestamp;\n\n            emit DisputeResolved(disputeId, \"Approved by majority voting\", block.timestamp);\n        } else if (dispute.rejectVotes >= votingThreshold) {\n            dispute.status = DisputeStatus.Rejected;\n            emit DisputeRejected(disputeId, \"Rejected by majority voting\", block.timestamp);\n        }\n    }\n\n    /**\n     * @dev Resolves a dispute\n     * @param disputeId The ID of the dispute to resolve\n     * @param resolutionDetails The details of the resolution\n     * @notice Emits DisputeResolved event on successful dispute resolution\n     */\n    function resolveDispute(\n        uint256 disputeId,\n        string calldata resolutionDetails\n    ) external restrictedToRole(DEFAULT_ADMIN_ROLE) {\n        Dispute storage dispute = disputes[disputeId];\n\n        if (dispute.disputeId != disputeId) revert DisputeResolution__InvalidDisputeIdOrNotFound();\n        if (bytes(resolutionDetails).length == 0) revert DisputeResolution__InvalidResolutionDetails();\n        if (dispute.status != DisputeStatus.Pending || dispute.status != DisputeStatus.Escalated)\n            revert DisputeResolution__DisputeStatusNotPendingOrEscalated();\n\n        dispute.status = DisputeStatus.Resolved;\n        dispute.resolvedAt = block.timestamp;\n\n        emit DisputeResolved(disputeId, resolutionDetails, block.timestamp);\n    }\n\n    function resolveEscalatedDisputes(\n        uint256 disputeId,\n        string memory resolutionDetails\n    ) public restrictedToRole(DEFAULT_ADMIN_ROLE) {\n        Dispute storage dispute = disputes[disputeId];\n\n        if (dispute.status != DisputeStatus.Escalated) revert DisputeResolution__DisputeNotEscalated(disputeId);\n\n        dispute.status = DisputeStatus.Resolved;\n        dispute.resolvedAt = block.timestamp;\n\n        emit DisputeResolved(disputeId, resolutionDetails, block.timestamp);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             REJECT DISPUTE \n        //////////////////////////////////////////////////////////////*/\n\n    /*//////////////////////////////////////////////////////////////\n                            ESCALATE DISPUTE\n        //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Anyone with role can call this to manually trigger escalation for expired disputes\n     * @dev Escalates a dispute to the super admin for final admin\n     */\n    function checkAndEscalateDispute(uint256 disputeId) external {\n        Dispute storage dispute = disputes[disputeId];\n\n        if (dispute.status != DisputeStatus.Pending) revert DisputeResolution__DisputeStatusNotPending(disputeId);\n\n        if (!hasRole(AUDITOR_ROLE, msg.sender) && !hasRole(INSPECTOR_ROLE, msg.sender)) {\n            revert DisputeResolution__NotEligibleToVote(msg.sender);\n        }\n\n        if (block.timestamp < dispute.votingDeadline) revert DisputeResolution__VotingPeriodStillActive();\n\n        dispute.status = DisputeStatus.Escalated;\n\n        emit DisputeEscalated(disputeId, block.timestamp);\n    }\n}\n"
    },
    "contracts/logs/TransactionLog.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title TransactionLog\n * @author @0xJonaseb11\n * It keeps track of all the operations, transactions perfomed in the whole supply chain\n * Helps to keep track of actities in the chain to enforce traceability\n */\nimport { RolesManager } from \"../core/RolesManager.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\n\ncontract TransactionLog is Errors, RolesManager {\n    RolesManager private rolesManager;\n\n    // events to enforce transparency n traceability\n    event TransactionRecorded(\n        uint256 indexed transactionId,\n        address indexed sender,\n        address indexed receiver,\n        string mineralId,\n        uint256 timestamp,\n        string transactionType\n    );\n    event OperationRecorded(address indexed actor, string operationType, string mineralId, uint256 timestamp);\n\n    struct Transaction {\n        uint256 transactionId;\n        address sender;\n        address receiver;\n        string mineralId;\n        uint256 timestamp;\n        string transactionType;\n    }\n\n    /**\n     * @dev operations to help in supplychainValidation contract\n     */\n    struct Operation {\n        address actor;\n        string operationType;\n        string mineralId;\n        uint256 timestamp;\n    }\n\n    Operation[] private operations;\n\n    mapping(uint256 => Transaction) private transactions;\n    uint256 private nextTransactionId = 1;\n\n    modifier onlyAuthorizedRoles() {\n        if (\n            !hasRole(MINER_ROLE, msg.sender) ||\n            !hasRole(TRANSPORTER_ROLE, msg.sender) ||\n            !hasRole(AUDITOR_ROLE, msg.sender) ||\n            !hasRole(INSPECTOR_ROLE, msg.sender) ||\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender)\n        ) revert InsufficientPermissionsToPerformAction(msg.sender);\n        _;\n    }\n\n    // setters\n\n    /**\n     * @dev records operation in the supply chain\n     * @notice Emits OperationRecorded even on successful record\n     */\n    function recordOperation(\n        address actor,\n        string memory operationType,\n        string memory mineralId\n    ) external onlyAuthorizedRoles onlyNonZeroAddress(actor) onlyValidMineralId(mineralId) {\n        if (bytes(operationType).length == 0) revert TransactionLog__InvalidOperationType();\n\n        Operation memory newOperation = Operation({\n            actor: actor,\n            operationType: operationType,\n            mineralId: mineralId,\n            timestamp: block.timestamp\n        });\n        operations.push(newOperation);\n\n        emit OperationRecorded(actor, operationType, mineralId, block.timestamp);\n    }\n\n    /**\n     * @dev records a transaction\n     * @notice Emits TransactionRecorded event on successful transaction recording\n     */\n\n    function recordTransaction(\n        address receiver,\n        string memory mineralId,\n        string memory transactionType\n    ) public onlyAuthorizedRoles onlyValidMineralId(mineralId) onlyNonZeroAddress(receiver) {\n        if (bytes(transactionType).length == 0) revert TransactionLog__InvalidOperationType();\n\n        uint256 transactionId = nextTransactionId++;\n        transactions[transactionId] = Transaction({\n            transactionId: transactionId,\n            sender: msg.sender,\n            receiver: receiver,\n            mineralId: mineralId,\n            timestamp: block.timestamp,\n            transactionType: transactionType\n        });\n\n        emit TransactionRecorded(transactionId, msg.sender, receiver, mineralId, block.timestamp, transactionType);\n    }\n\n    // getters\n\n    /**\n     * @dev retrieves operations using operation index\n     * Returns An arrray containing operation.actor, operationType, mineralId and timestamp\n     */\n    function getOperation(\n        uint256 index\n    ) external view returns (address actor, string memory operationType, string memory mineralId, uint256 timestamp) {\n        if (index == 0 || index > operations.length) revert TransactionLog__InvalidOperationIndex(index);\n\n        Operation memory operation = operations[index]; // ✅ Now safe to access\n\n        return (operation.actor, operation.operationType, operation.mineralId, block.timestamp);\n    }\n    /**\n     * @dev get track of number of operations done\n     */\n    function getOperationsCount() external view returns (uint256) {\n        return operations.length;\n    }\n\n    /**\n     * @dev retrieves transactions using transactionID\n     * @return transactions using specified transactionId\n     */\n    function getTransaction(uint256 transactionId) public view returns (Transaction memory) {\n        if (transactions[transactionId].transactionId == transactionId || transactionId == 0)\n            revert TransactionLog__InvalidTransactionIdOrNotFound(transactionId);\n\n        return transactions[transactionId];\n    }\n\n    /**\n     * @dev retrieve transactions using mineralIDs\n     * @return results of transactions with specified mineralIDs\n     */\n    function getTransactionsByMineral(\n        string memory mineralId\n    ) public view onlyValidMineralId(mineralId) returns (Transaction[] memory) {\n        uint256 count = 0;\n\n        for (uint256 i = 1; i < nextTransactionId; i++) {\n            if (keccak256(bytes(transactions[i].mineralId)) == keccak256(bytes(mineralId))) {\n                count++;\n            }\n        }\n\n        Transaction[] memory results = new Transaction[](count);\n        uint256 index = 0;\n        for (uint256 i = 1; i < nextTransactionId; i++) {\n            if (keccak256(bytes(transactions[i].mineralId)) == keccak256(bytes(mineralId))) {\n                results[index] = transactions[i];\n                index++;\n            }\n        }\n\n        return results;\n    }\n}\n"
    },
    "contracts/modules/LogisticsManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { RolesManager } from \"../core/RolesManager.sol\";\n\ncontract LogisticsManager is RolesManager {\n    /*////////////////////////////////////////////////\n                        EVENTS\n    ////////////////////////////////////////////////*/\n    event TransportRequestCreated(\n        string mineralId,\n        address indexed requester,\n        string origin,\n        string destination,\n        uint256 estimatedDeparture,\n        uint256 requestTimestamp\n    );\n\n    event TransportAssigned(string mineralId, address indexed transporter, uint256 assignedAt);\n\n    event TransportCompleted(string mineralId, address indexed transporter, uint256 completedAt);\n\n    event TransportStatusChanged(string mineralId, string newStatus, uint256 updatedAt);\n\n    /*////////////////////////////////////////////////\n                        STRUCTS\n    ////////////////////////////////////////////////*/\n    struct TransportDetails {\n        string mineralId;\n        address requester;\n        address transporter;\n        string origin;\n        string destination;\n        uint256 estimatedDeparture;\n        uint256 actualDeparture;\n        uint256 estimatedArrival;\n        uint256 actualArrival;\n        string currentStatus; // \"REQUESTED\", \"ASSIGNED\", \"IN_TRANSIT\", \"DELIVERED\", \"CANCELLED\"\n        string transportConditions;\n    }\n\n    /*////////////////////////////////////////////////\n                        STORAGE\n    ////////////////////////////////////////////////*/\n    mapping(string => TransportDetails) public transportDetails;\n    mapping(address => string[]) public transporterAssignments;\n\n    /*////////////////////////////////////////////////\n                        MODIFIERS\n    ////////////////////////////////////////////////*/\n    modifier onlyTransporterOrAdmin() {\n        if (!hasRole(TRANSPORTER_ROLE, msg.sender) && !hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\n            revert InsufficientPermissionsToPerformAction(msg.sender);\n        }\n        _;\n    }\n\n    modifier onlyValidTransportRequest(string memory mineralId) {\n        if (bytes(transportDetails[mineralId].mineralId).length == 0) {\n            revert InvalidMineralIdOrNotFound(mineralId);\n        }\n        _;\n    }\n\n    /*////////////////////////////////////////////////\n                    CORE FUNCTIONS\n    ////////////////////////////////////////////////*/\n    /**\n     * @dev Create a new transport request (Miner or Admin only)\n     */\n    function createTransportRequest(\n        string memory mineralId,\n        string memory origin,\n        string memory destination,\n        uint256 estimatedDeparture,\n        string memory transportConditions\n    ) external onlyRole(MINER_ROLE) {\n        if (bytes(mineralId).length == 0) revert InvalidMineralIdOrNotFound(mineralId);\n        if (transportDetails[mineralId].requester != address(0)) {\n            revert TransportRequestAlreadyExists(mineralId);\n        }\n\n        transportDetails[mineralId] = TransportDetails({\n            mineralId: mineralId,\n            requester: msg.sender,\n            transporter: address(0),\n            origin: origin,\n            destination: destination,\n            estimatedDeparture: estimatedDeparture,\n            actualDeparture: 0,\n            estimatedArrival: 0,\n            actualArrival: 0,\n            currentStatus: \"REQUESTED\",\n            transportConditions: transportConditions\n        });\n\n        emit TransportRequestCreated(mineralId, msg.sender, origin, destination, estimatedDeparture, block.timestamp);\n    }\n\n    /**\n     * @dev Assign transporter to a request (Admin only)\n     */\n    function assignTransporter(\n        string memory mineralId,\n        address transporter,\n        uint256 estimatedArrival\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) onlyValidTransportRequest(mineralId) {\n        if (!hasRole(TRANSPORTER_ROLE, transporter)) {\n            revert AddressDoesNotHaveRequiredRole(transporter, TRANSPORTER_ROLE);\n        }\n\n        TransportDetails storage details = transportDetails[mineralId];\n        details.transporter = transporter;\n        details.estimatedArrival = estimatedArrival;\n        details.currentStatus = \"ASSIGNED\";\n\n        transporterAssignments[transporter].push(mineralId);\n\n        emit TransportAssigned(mineralId, transporter, block.timestamp);\n        emit TransportStatusChanged(mineralId, \"ASSIGNED\", block.timestamp);\n    }\n\n    /**\n     * @dev Start transport (Transporter only)\n     */\n    function startTransport(\n        string memory mineralId\n    ) external onlyTransporterOrAdmin onlyValidTransportRequest(mineralId) {\n        TransportDetails storage details = transportDetails[mineralId];\n        if (details.transporter != msg.sender && !hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\n            revert NotAssignedTransporter(mineralId, msg.sender);\n        }\n\n        details.actualDeparture = block.timestamp;\n        details.currentStatus = \"IN_TRANSIT\";\n\n        emit TransportStatusChanged(mineralId, \"IN_TRANSIT\", block.timestamp);\n    }\n\n    /**\n     * @dev Complete transport (Transporter only)\n     */\n    function completeTransport(\n        string memory mineralId\n    ) external onlyTransporterOrAdmin onlyValidTransportRequest(mineralId) {\n        TransportDetails storage details = transportDetails[mineralId];\n        if (details.transporter != msg.sender && !hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\n            revert NotAssignedTransporter(mineralId, msg.sender);\n        }\n\n        details.actualArrival = block.timestamp;\n        details.currentStatus = \"DELIVERED\";\n\n        // Update mineral location in parent contract\n        _updateMineralLocation(mineralId, details.destination);\n\n        emit TransportCompleted(mineralId, msg.sender, block.timestamp);\n        emit TransportStatusChanged(mineralId, \"DELIVERED\", block.timestamp);\n    }\n\n    /*////////////////////////////////////////////////\n                    INTERNAL FUNCTIONS\n    ////////////////////////////////////////////////*/\n    function _updateMineralLocation(string memory mineralId, string memory newLocation) internal {\n        // This would call a function in RolesManager to update mineral location\n        // Implementation depends on your base contract structure\n    }\n\n    /*////////////////////////////////////////////////\n                    VIEW FUNCTIONS\n    ////////////////////////////////////////////////*/\n    function getTransportDetails(string memory mineralId) public view returns (TransportDetails memory) {\n        return transportDetails[mineralId];\n    }\n\n    function getTransporterAssignments(address transporter) public view returns (string[] memory) {\n        return transporterAssignments[transporter];\n    }\n\n    function getTransportStatus(string memory mineralId) public view returns (string memory) {\n        return transportDetails[mineralId].currentStatus;\n    }\n}\n"
    },
    "contracts/modules/MineralRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title MineralRegistry contract\n * @author @0xJonaseb11\n * @dev It is a mineral factory contract. It is where new minerals are registered, updated and gotten till next step\n * @dev Minerals are gotten from mineral registry contract and all other operations proceed right from there!!\n * @notice It is the base contract of the supplychain\n */\n\nimport { RolesManager } from \"../core/RolesManager.sol\";\n\ncontract MineralRegistry is RolesManager {\n    RolesManager private rolesManager;\n    // uint256 private nextMineralId = 1;\n\n    // Events for transparency\n    event MineralUpdated(\n        string mineralId,\n        string updatedField,\n        string newValue,\n        address indexed updatedBy,\n        uint256 updatedAt\n    );\n    event MineralLocationUpdated(\n        string mineralId,\n        string previousLocation,\n        string newLocation,\n        address indexed tranporter\n    );\n\n    /**\n     * @dev connects RolesManager contract\n     */\n    constructor(address rolesManagerAddress) {\n        rolesManager = RolesManager(rolesManagerAddress);\n    }\n\n    /**\n     * @dev Restrict actions to specific roles\n     */\n    modifier onlyAuthorized(bytes32 role) {\n        if (!hasRole(role, msg.sender)) {\n            revert InsufficientPermissionsToPerformAction(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @dev Updates mineral details - only by authorized roles\n     * @param mineralId The ID of the mineral under update\n     * @param newStatus New status of the mineral\n     * @notice Emits MineralUpdated event on successful updation\n     */\n    function updateMineralStatus(string memory mineralId, string memory newStatus) public {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n        if (bytes(newStatus).length == 0) revert MineralRegistry__InvalidMineralStatus();\n\n        if (\n            !hasRole(REFINER_ROLE, msg.sender) ||\n            !hasRole(TRANSPORTER_ROLE, msg.sender) ||\n            !hasRole(AUDITOR_ROLE, msg.sender) ||\n            !hasRole(INSPECTOR_ROLE, msg.sender)\n        ) {\n            revert InsufficientPermissionsToPerformAction(msg.sender);\n        }\n\n        mineralDetails[mineralId].currentStatus = newStatus;\n        mineralDetails[mineralId].timestamp = block.timestamp;\n\n        // record mineral history\n        mineralHistories[mineralId].push(\n            MineralHistory({\n                id: mineralId,\n                fieldChanged: \"Status\",\n                newValue: newStatus,\n                updatedBy: msg.sender,\n                timestamp: block.timestamp\n            })\n        );\n\n        emit MineralUpdated(mineralId, \"Status\", newStatus, msg.sender, block.timestamp);\n    }\n\n    /*////////////////////////////////////////////////////////////\n        =============================================================\n                       TRANSPORTATION ENTERPRISE\n        =============================================================               \n        ////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev updates the location of the mineral\n     * @param mineralId the ID of the mineral to update\n     * @param newLocation The new location of the mineral\n     * @notice Emits MineralLocationUpdated event on successful location update!\n     */\n    function updateMineralLocation(\n        string memory mineralId,\n        string memory newLocation\n    ) public onlyAuthorized(TRANSPORTER_ROLE) {\n        // custom error handling\n\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n\n        if (bytes(newLocation).length == 0) {\n            revert MineralRegistry__InvalidMineralLocation();\n        }\n\n        string memory previousLocation = mineralDetails[mineralId].currentLocation;\n        mineralDetails[mineralId].currentLocation = newLocation;\n\n        emit MineralLocationUpdated(mineralId, previousLocation, newLocation, msg.sender);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n        ===============================================================\n                     SUPPLYCHAIN VALIDATION PORTAL\n        ===============================================================\n        //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev retrieves mineral details of specified mineralId\n     * @return mineral details of specified mineralId\n     */\n    function getMineralDetails(string memory mineralId) public view virtual returns (MineralDetails memory) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n        return mineralDetails[mineralId];\n    }\n\n    /**\n     * @dev retrieves fll history of a mineral (for audit retail)\n     * @return history of specified mineral sing its mineralId\n     */\n    function _getMineralHistory(string memory mineralId /*override*/) public view returns (MineralHistory[] memory) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n        return mineralHistories[mineralId];\n    }\n\n    /**\n     * @dev checks if a mineral with the given ID is registered\n     * @param mineralId the ID of the mineral to check\n     * @return A boolean indicating whether the mineral is registered or not\n     */\n\n    function isMineralAudited(string memory mineralId) public view returns (bool) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n\n        return mineralDetails[mineralId].isAudited;\n    }\n\n    function isMineralInspected(string memory mineralId) public view returns (bool) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n\n        return mineralDetails[mineralId].isInspected;\n    }\n\n    /*///////////////////////////////////////////////\n                         AUDITOR\n        ///////////////////////////////////////////////*/\n\n    /**\n     * @dev enables an auditor to audit a mineral\n     * @notice Emits MineralAudited event on successful auditing of a mineral\n     */\n\n    /*///////////////////////////////////////////////////////\n                          INSPECTOR\n        ///////////////////////////////////////////////////////*/\n\n    /**\n     * @dev enables only the inspector to audit a mineralDetails\n     * @notice Emits MineralInspected even\n     */\n\n    /**\n     * @dev checks audit and inspection status\n     * Returns the status of both audit and inspection of mineral according to mineralId\n     */\n    function _checkAuditAndInspectionStatus(\n        string memory mineralId\n    ) public /*override*/ onlyAuthorized(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\n            emit MineralReadyToTrade(mineralId, msg.sender, \"TradingReady\", block.timestamp);\n        } else {\n            revert MineralNotReadyToTrade(mineralId);\n        }\n\n        // explicitly return audit and inspection results\n        return (mineralDetails[mineralId].isAudited, mineralDetails[mineralId].isInspected);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            HELPER FUNCTIONS\n        //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev helper function to convert address to string\n     * @return string of address\n     */\n    function addressToString(address _address) internal pure returns (string memory) {\n        bytes32 value = bytes32(uint256(uint160(_address)));\n        bytes memory characters = \"ABACDEFGHIJ1245678909876\";\n\n        bytes memory str = new bytes(42);\n        str[0] = \"0\";\n        str[1] = \"x\";\n\n        for (uint256 i = 0; i < 20; i++) {\n            str[2 + i * 2] = characters[uint8(value[i + 12] >> 4)];\n            str[3 + i * 2] = characters[uint8(value[i + 12] & 0x0f)];\n        }\n\n        return string(str);\n    }\n}\n"
    },
    "contracts/modules/MineralWarehouse.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @author @0xJonaseb11\n * title MineralWarehouse contract\n * @dev It is a mineral warehouse contract. Minerals are stored here after refinery and can be listed for sale\n * @notice It is the base contract of the supplychain\n */\nimport { RolesManager } from \"../core/RolesManager.sol\";\nimport { MineralRegistry } from \"../modules/MineralRegistry.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract MineralWarehouse is RolesManager, MineralRegistry {\n    MineralRegistry private mineralRegistry;\n    RolesManager private rolesManager;\n\n    enum PaymentMethod {\n        ETH,\n        TOKEN\n    }\n\n    struct MineralSaleInfo {\n        string price;\n        uint256 priceETH;\n        mapping(address => uint256) tokenPrices;\n    }\n\n    struct StoredMineral {\n        string mineralId;\n        address refiner;\n        uint256 storedAt;\n        uint256 soldAt;\n        bool isStored;\n        bool isSold;\n        bool isForSale;\n        address buyer;\n        bool isMarketReady;\n        MineralSaleInfo saleInfo;\n    }\n\n    mapping(string => StoredMineral) private warehouse;\n    string[] private storedMineralIds;\n    mapping(address => bool) public acceptedTokens;\n\n    event MineralStored(string mineralId, address indexed refiner, uint256 storedAt);\n    event MineralListedForSale(string mineralId, string price, address indexed lister);\n    event MineralSold(string mineralId, address indexed buyer, address seller, uint256 soldAt);\n\n    constructor(address rolesManagerAddress, address mineralRegistryAddress) MineralRegistry(rolesManagerAddress) {\n        rolesManager = RolesManager(rolesManagerAddress);\n        mineralRegistry = MineralRegistry(mineralRegistryAddress);\n    }\n\n    function addAcceptedToken(address _token) external restrictedToRole(DEFAULT_ADMIN_ROLE) {\n        require(_token != address(0), \"Invalid token address\");\n        acceptedTokens[_token] = true;\n    }\n\n    function store_refined_mineral_to_warehouse(\n        string memory _mineralId,\n        uint256 _priceETH,\n        address[] memory tokens,\n        uint256[] memory prices\n    ) public restrictedToRole(REFINER_ROLE) {\n        require(getMineralDetails(_mineralId).isRefined, \"Mineral not refined\");\n        require(tokens.length == prices.length, \"Mismatched arrays\");\n        require(_priceETH > 0, \"Invalid ETH price\");\n\n        StoredMineral storage mineral = warehouse[_mineralId];\n        mineral.mineralId = _mineralId;\n        mineral.refiner = msg.sender;\n        mineral.isStored = true;\n        mineral.storedAt = block.timestamp;\n        mineral.isMarketReady = true;\n        mineral.saleInfo.priceETH = _priceETH;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(acceptedTokens[tokens[i]], \"Token not accepted\");\n            mineral.saleInfo.tokenPrices[tokens[i]] = prices[i];\n        }\n\n        storedMineralIds.push(_mineralId);\n        emit MineralStored(_mineralId, msg.sender, block.timestamp);\n    }\n\n    function list_Mineral_ForSale(\n        string memory _mineralId,\n        string memory _price\n    ) public restrictedToRole(REFINER_ROLE) {\n        StoredMineral storage mineral = warehouse[_mineralId];\n        require(mineral.isStored, \"Mineral not stored\");\n        require(!mineral.isSold, \"Already sold\");\n        require(msg.sender == mineral.refiner, \"Not owner\");\n        require(mineral.isMarketReady, \"Not market ready\");\n\n        mineral.isForSale = true;\n        mineral.saleInfo.price = _price;\n        emit MineralListedForSale(_mineralId, _price, msg.sender);\n    }\n\n    function purchase_mineral(\n        string memory _mineralId,\n        PaymentMethod method,\n        address token,\n        uint256 amount\n    ) public payable restrictedToRole(BUYER_ROLE) {\n        StoredMineral storage mineral = warehouse[_mineralId];\n\n        // require(mineral.isStored, \"Mineral not found\");\n        require(!mineral.isSold, \"Already sold\");\n        // require(mineral.isForSale, \"Not for sale\");\n        // require(mineral.isMarketReady, \"Not market ready\");\n\n        if (method == PaymentMethod.ETH) {\n            require(msg.value == mineral.saleInfo.priceETH, \"Incorrect ETH amount\");\n            payable(mineral.refiner).transfer(msg.value);\n        } else {\n            // require(acceptedTokens[token], \"Token not accepted\");\n            require(amount == mineral.saleInfo.tokenPrices[token], \"Incorrect token amount\");\n            IERC20(token).transferFrom(msg.sender, mineral.refiner, amount);\n        }\n\n        mineral.isSold = true;\n        mineral.isForSale = false;\n        mineral.soldAt = block.timestamp;\n        mineral.buyer = msg.sender;\n\n        emit MineralSold(_mineralId, msg.sender, mineral.refiner, block.timestamp);\n    }\n\n    function getMineralPriceInToken(string memory _mineralId, address token) public view returns (uint256) {\n        require(acceptedTokens[token], \"Token not accepted\");\n        return warehouse[_mineralId].saleInfo.tokenPrices[token];\n    }\n\n    function isMineralMarketReady(string memory _mineralId) public view returns (bool) {\n        return warehouse[_mineralId].isMarketReady;\n    }\n}\n"
    },
    "contracts/tokens/Tokenization.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { RolesManager } from \"../core/RolesManager.sol\";\n\ncontract Tokenization is ERC721, RolesManager {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER\");\n\n    struct MineralToken {\n        string mineralId;\n        string details;\n        address owner;\n        uint8 flags; // bit 0: minted, 1: audited, 2: inspected, 3: purchased\n    }\n\n    uint256 private nextTokenId = 1;\n    mapping(uint256 => MineralToken) private _tokens;\n    mapping(string => uint256) public mineralToToken;\n\n    event Minted(uint256 indexed tokenId, string mineralId, address indexed to);\n    event Transferred(uint256 indexed tokenId, address indexed from, address indexed to);\n    event Updated(uint256 indexed tokenId);\n    event Revoked(uint256 indexed tokenId, string reason);\n    event MetadataUpdated(uint256 indexed tokenId);\n\n    constructor() ERC721(\"MineralToken\", \"MTKN\") {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(MINTER_ROLE, msg.sender);\n    }\n\n    // Remove the onlyRole modifier since it's inherited from AccessControl\n    // Keep onlySpecificRole if needed from RolesManager\n\n    function mintToken(address to, string calldata mineralId, string calldata details) external {\n        require(hasRole(MINTER_ROLE, msg.sender), \"Unauthorized\");\n        uint256 tokenId = nextTokenId++;\n\n        require(!_exists(tokenId), \"Exists\");\n        require(mineralToToken[mineralId] == 0, \"MineralUsed\");\n\n        _mint(to, tokenId);\n\n        _tokens[tokenId] = MineralToken({ mineralId: mineralId, details: details, owner: msg.sender, flags: 0x01 });\n\n        mineralToToken[mineralId] = tokenId;\n        emit Minted(tokenId, mineralId, to);\n    }\n\n    function updateToken(uint256 tokenId, string calldata, bool audited, bool inspected, bool purchased) external {\n        address owner = ownerOf(tokenId);\n        require(\n            owner == msg.sender || getApproved(tokenId) == msg.sender || isApprovedForAll(owner, msg.sender),\n            \"NotOwner\"\n        );\n\n        MineralToken storage t = _tokens[tokenId];\n        t.flags = _setFlag(t.flags, 1, audited);\n        t.flags = _setFlag(t.flags, 2, inspected);\n        t.flags = _setFlag(t.flags, 3, purchased);\n\n        emit Updated(tokenId);\n    }\n\n    function updateMetadata(uint256 tokenId, string calldata newDetails) external {\n        address owner = ownerOf(tokenId);\n        require(\n            owner == msg.sender || getApproved(tokenId) == msg.sender || isApprovedForAll(owner, msg.sender),\n            \"NotOwner\"\n        );\n        _tokens[tokenId].details = newDetails;\n        emit MetadataUpdated(tokenId);\n    }\n\n    function transferOwnership(uint256 tokenId, address newOwner) external {\n        require(hasRole(BUYER_ROLE, msg.sender), \"Unauthorized\");\n        address owner = ownerOf(tokenId);\n        require(\n            owner == msg.sender || getApproved(tokenId) == msg.sender || isApprovedForAll(owner, msg.sender),\n            \"NotOwner\"\n        );\n\n        _transfer(owner, newOwner, tokenId);\n        _tokens[tokenId].owner = newOwner;\n\n        emit Transferred(tokenId, owner, newOwner);\n    }\n\n    function revokeToken(uint256 tokenId, string calldata reason) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Unauthorized\");\n        require(_exists(tokenId), \"Invalid\");\n        _burn(tokenId);\n        delete _tokens[tokenId];\n        emit Revoked(tokenId, reason);\n    }\n\n    function getTokenDetails(\n        uint256 tokenId\n    )\n        external\n        view\n        returns (\n            uint256 id,\n            string memory mineralId,\n            string memory details,\n            bool isMinted,\n            bool isAudited,\n            bool isInspected,\n            bool isPurchased,\n            address owner\n        )\n    {\n        require(_exists(tokenId), \"Invalid\");\n        MineralToken memory t = _tokens[tokenId];\n        return (\n            tokenId,\n            t.mineralId,\n            t.details,\n            (t.flags & 0x01) != 0,\n            (t.flags & 0x02) != 0,\n            (t.flags & 0x04) != 0,\n            (t.flags & 0x08) != 0,\n            t.owner\n        );\n    }\n\n    function _setFlag(uint8 flags, uint8 bit, bool value) private pure returns (uint8) {\n        return value ? uint8(flags | (1 << bit)) : uint8(flags & ~(1 << bit));\n    }\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _tokens[tokenId].owner != address(0);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, AccessControl) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function getTokenIdByMineralId(string calldata mineralId) external view returns (uint256) {\n        uint256 tokenId = mineralToToken[mineralId];\n        require(_exists(tokenId), \"Invalid\");\n        return tokenId;\n    }\n}\n"
    },
    "contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract Errors {\n    /*//////////////////////////////////////////////////////////////\n                        MINERALREGISTRY__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n\n    error MineralRegistry__MineralNotRegistered(string mineralId);\n    error MineralRegistry__MineralAlreadyPurchased();\n    error MineralRegistry__MineralAlreadyAudited();\n    error MineralRegistry__MineralAlreadyInspected();\n    error MineralRegistry__MineralNotAudited();\n    error MineralRegistry__MineralNotInspected();\n\n    error MineralRegistry__InvalidMineralDetails();\n    error MineralRegistry__InvalidMineralIdOrNotFound(string mineralId);\n    error MineralRegistry__InvalidMineralStatus();\n    error MineralRegistry__InvalidMineralName();\n    error MineralRegistry__InvalidMineralOrigin();\n    error MineralRegistry__InvalidMineralType();\n    error MineralRegistry__InvalidMineralWeight();\n    error MineralRegistry__InvalidMineralPurityPercentage();\n    error MineralRegistry__InvalidMineralStorageConditions();\n    error MineralRegistry__InvalidMineralLocation();\n    error MineralRegistry__InvalidReceivingPartyAddress();\n    error MineralRegistry__InvalidMineralDestination();\n\n    error MineralNotReadyToTrade(string mineralId);\n\n    /*//////////////////////////////////////////////////////////////\n                            ROLESMANAGER__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n    error RolesManager__MineralAlreadyRefined(string mineralId);\n    error RolesManager__MineralAlreadyPurchased(string mineralId);\n    error RolesManager__MineralAlreadyInspected(string mineralId);\n    error RolesManager__MineralAlreadyAudited(string mineralId);\n    error RolesManager__NotTheAssignedBuyer(address caller);\n\n    error RolesManager__InvalidMineralName();\n    error RolesManager__InvalidMineralOrigin();\n    error RolesManager__InvalidMineralDestination();\n\n    error RolesManager__MineralNotMarketReady(string mineralId);\n\n    error RolesManager__InvalidMineralIdOrNotFound();\n    error RolesManager__InvalidMineralType();\n    error RolesManager__InvalidReceivingPartyAddress();\n    error RolesManager__InvalidMineralStorageConditions();\n    error RolesManager__InvalidMineralPurityPercentage();\n    error RolesManager__MineralPurityPercentageTooLowToRegister(uint256 purityPercentage);\n    error RolesManager__InvalidMineralWeight();\n\n    error RolesManager__InvalidAddress();\n    error RolesManager__InvalidRole();\n\n    // Roles Assignment and revocation\n    error RolesManager__AccountAlreadyHasRole();\n    error RolesManager__AccountDoesNotHaveRole();\n\n    /*//////////////////////////////////////////////////////////////\n                            DISPUTERESOLUTION__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n    error DisputeResolution__InvalidMineralIdOrNotFound();\n    error DisputeResolution__InvalidDisputeDefendantAddress();\n    error DisputeResolution__InvalidDisputeDetails();\n    error DisputeResolution__InvalidDisputeEvidence();\n    error DisputeResolution__InvalidDisputeIdOrNotFound();\n    error DisputeResolution__InvalidResolutionDetails();\n    error DisputeResolution__DisputeStatusNotPendingOrEscalated();\n    error DisputeResolution__DisputeStatusNotPending(uint256 disputeId);\n    error DisputeResolution__NotEligibleToVote(address caller);\n    error DisputeResolution__AlreadyVoted(address caller);\n    error DisputeResolution__DisputeEscalated_UnableToVote(uint256 disputeId);\n    error DisputeResolution__VotingPeriodStillActive();\n    error DisputeResolution__DisputeNotEscalated(uint256 disputeId);\n\n    /*//////////////////////////////////////////////////////////////\n                            MINERALWAREHOUSE__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n\n    error MineralWarehouse__InvalidTokenAddress(address tokenAddress);\n    error MineralWarehouse__MineralNotRefined(string mineralId);\n    error MineralWarehouse__InvalidNumberOfPrices();\n    error MineralWarehouse__UnacceptedToken(address tokenAddress);\n    error MineralWarehouse__UnacceptedTokens(address[] tokenAddresses);\n    error MineralWarehouse__MineralNotMarketReady(string mineralId);\n    error MineralWarehouse__InvalidMineralPrice();\n    error MineralWarehouse__MineralAlreadySold(string mineralId);\n    error MineralWarehouse__UnauthorizedSeller(address seller);\n    error MineralNotMarketReady(string mineralId);\n    error MineralWarehouse__IncorrectETHAmount();\n    error MineralWarehouse__ETHTransferFailed();\n    error MineralWarehouse__InvalidTokenPrice();\n\n    error MineralWarehouse__MineralNotFoundInWarehouse(string mineralId);\n\n    /*//////////////////////////////////////////////////////////////\n                            TOKENISATION__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n\n    error Tokenization__TokenAlreadyExists(uint256 tokenId);\n    error Tokenization__TokenIsAlreadyMinted(uint256 tokenId);\n    error Tokenization__InvalidTokenIdOrNotFound(uint256 tokenId);\n    error Tokenization__CallerNotMineralTokenOwner(uint256 tokenId, address caller);\n    error Tokenization__InvalidTokenId(uint256 tokenId);\n\n    /*//////////////////////////////////////////////////////////////\n                            TRANSACTIONlOG__CUSTOM ERRORS\n       //////////////////////////////////////////////////////////////*/\n    error TransactionLog__InvalidOperationType();\n    error TransactionLog__InvalidOperationIndex(uint256 index);\n    error TransactionLog__InvalidTransactionIdOrNotFound(uint256 transactionId);\n\n    /*//////////////////////////////////////////////////////////////\n                        SUPPLYCHAINVALIDATOR__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n\n    error SupplychainValidator__InvalidMineralIdOrNotFound(string mineralId);\n    error SupplychainValidator__InvalidMineralTransactionHistory();\n    error SupplychainValidator__InvalidMineralOwnershipChain();\n\n    /*//////////////////////////////////////////////////////////////\n                             GLOBAL ERRORS\n    //////////////////////////////////////////////////////////////*/\n    error InvalidAccountAddress();\n    error ERC20TokenTransferFailed(address token, uint256 tokenAmount);\n    error InvalidPaymentMethods();\n    error InvalidMineralIdOrNotFound(string mineralId);\n    error InsufficientPermissionsToPerformAction(address caller);\n\n    /////////////////////////////////////\n    // LOGISTICS MANAGER ERRORS /////////\n    /////////////////////////////////////\n    error TransportRequestAlreadyExists(string mineralId);\n    error AddressDoesNotHaveRequiredRole(address caller, bytes32 role);\n    error NotAssignedTransporter(string mineralId, address caller);\n    error InvalidTransportStateTransition(string currentStatus, string attemptedStatus);\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}