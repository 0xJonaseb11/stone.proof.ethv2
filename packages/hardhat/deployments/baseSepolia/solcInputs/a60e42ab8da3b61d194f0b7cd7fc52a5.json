{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/core/RolesManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title RolesManager contract\n * @author @0xJonaseb11\n * It acts as the factory of all the roles in the whole supplychain\n * It is where all the roles in the chain are assigned and granted. No any other contract can handle that\n *\n * It is a Modular contract\n */\n\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\n\ncontract RolesManager is AccessControl, Errors {\n    /*/////////////////////////////////////////////////////\n                           SUPPLYCHAIN ROLES\n            /////////////////////////////////////////////////////*/\n    bytes32 public constant MINER_ROLE = keccak256(\"MINER_ROLE\");\n    bytes32 public constant REFINER_ROLE = keccak256(\"REFINER_ROLE\");\n    bytes32 public constant TRANSPORTER_ROLE = keccak256(\"TRANSPORTER_ROLE\");\n    bytes32 public constant AUDITOR_ROLE = keccak256(\"AUDITOR_ROLE\");\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\"INSPECTOR_ROLE\");\n    bytes32 public constant BUYER_ROLE = keccak256(\"BUYER_ROLE\");\n\n    /*//////////////////////////////////////////////////////\n                                 EVENTS\n        //////////////////////////////////////////////////////*/\n    event RoleAssigned(address indexed account, bytes32 indexed role, uint256 roleAssignedAt);\n    event RoleRevoked(bytes32 role, address account, address revoker, uint256 roleRevokedAt);\n\n    event MineralRegistered(\n        string mineralId,\n        string mineralName,\n        string mineralType,\n        string origin,\n        uint256 weight,\n        uint256 purityPercentage,\n        address indexed miner,\n        uint256 registeredAt\n    );\n    event MineralRefined(string mineralId, string refineryReport, address indexed refiner, uint256 refinedAt);\n    event MineralTransported(\n        string mineralId,\n        address indexed transporter,\n        address receivingParty,\n        string origin,\n        string destination,\n        uint256 transportedAt\n    );\n    event MineralInspected(string mineralId, string mineralStatus, address indexed inspector, uint256 inspectedAt);\n    event MineralAudited(string mineralId, string status, address indexed auditor, uint256 auditedAt);\n    event MineralPurchased(string mineralId, address indexed buyer, uint256 purchasedAt);\n    event MineralReadyToTrade(string mineralId, address indexed ApprovedBy, string status, uint256 inspectionDate);\n\n    // For every assigned role\n    event MinerRoleAssigned(address indexed assignee, uint256 timestamp);\n    event RefinerRoleAssigned(address indexed assignee, uint256 timestamp);\n    event TransporterRoleAssigned(address indexed assignee, uint256 timestamp);\n    event AuditorRoleAssigned(address indexed assignee, uint256 timestamp);\n    event InspectorRoleAssigned(address indexed assignee, uint256 timestamp);\n    event BuyerRoleAssigned(address indexed assignee, uint256 timestamp);\n    event AdminRoleAssigned(address indexed assignee, uint256 timestamp);\n    // For every revoked role\n    event MinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event RefinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event TransporterRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event AuditorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event InspectorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event BuyerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n    event AdminRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\n\n    struct MineralDetails {\n        string id;\n        string name;\n        string origin;\n        string mineralType;\n        uint256 weight;\n        uint256 purityPercentage;\n        string storageConditions;\n        address registeredBy;\n        string currentStatus;\n        string currentLocation;\n        address currentHandler;\n        bool isPurchased;\n        bool isRefined;\n        bool isAudited;\n        bool isInspected;\n        uint256 timestamp;\n    }\n\n    struct MineralHistory {\n        string id;\n        string fieldChanged;\n        string newValue;\n        address updatedBy;\n        uint256 timestamp;\n    }\n\n    uint256 private nonce = block.timestamp + block.number;\n    mapping(string => MineralDetails) public mineralDetails;\n    mapping(string => MineralHistory[]) public mineralHistories;\n    mapping(bytes32 => uint256) public roleMemberCount;\n\n    // Set the deployer as the admin\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        roleMemberCount[DEFAULT_ADMIN_ROLE] = 1;\n        emit AdminRoleAssigned(msg.sender, block.timestamp);\n\n        _setupRole(MINER_ROLE, msg.sender);\n        roleMemberCount[MINER_ROLE] = 1;\n        emit MinerRoleAssigned(msg.sender, block.timestamp);\n\n        _setupRole(AUDITOR_ROLE, msg.sender);\n        roleMemberCount[AUDITOR_ROLE] = 1;\n        emit AuditorRoleAssigned(msg.sender, block.timestamp);\n\n        _setupRole(INSPECTOR_ROLE, msg.sender);\n        roleMemberCount[INSPECTOR_ROLE] = 1;\n        emit InspectorRoleAssigned(msg.sender, block.timestamp);\n\n        _setupRole(BUYER_ROLE, msg.sender);\n        roleMemberCount[BUYER_ROLE] = 1;\n        emit BuyerRoleAssigned(msg.sender, block.timestamp);\n\n        _setupRole(REFINER_ROLE, msg.sender);\n        roleMemberCount[REFINER_ROLE] = 1;\n        emit RefinerRoleAssigned(msg.sender, block.timestamp);\n\n        _setupRole(TRANSPORTER_ROLE, msg.sender);\n        roleMemberCount[TRANSPORTER_ROLE] = 1;\n        emit TransporterRoleAssigned(msg.sender, block.timestamp);\n    }\n\n    /**\n     * @dev checks if sender has specific role\n     */\n    modifier restrictedToRole(bytes32 role) {\n        if (!hasRole(role, msg.sender)) {\n            revert InsufficientPermissionsToPerformAction(msg.sender);\n        }\n        _;\n    }\n\n    modifier onlyNonZeroAddress(address account) {\n        if (account == address(0)) {\n            revert InvalidAccountAddress();\n        }\n        _;\n    }\n\n    modifier onlyValidMineralId(string memory mineralId) {\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\n            revert InvalidMineralIdOrNotFound(mineralId);\n        }\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ATTENTION HERE - CHECKING VALIDITY OF A MINERAL\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\        \n    //////////////////////////////////////////////////////////////*/\n    modifier onlyValidMineral(string memory mineralId) virtual {\n        if (!isMineralRegistered(mineralId) || bytes(mineralId).length == 0) {\n            revert InvalidMineralIdOrNotFound(mineralId);\n        }\n        _;\n    }\n\n    /*////////////////////////////////////////////////////\n            =====================================================\n            ///////// ROLE-BASED FUNCTIONALITY FUNCTIONS ////////\n            ====================================================\n            //////////////////////////////////////////////////*/\n\n    /*//////////////////////////////////////////////////////////////\n        ================================================================\n                              MINING ENTERPRISE PORTAL\n        =================================================================\n       //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Register a new mineral - only by miner.\n     * @dev Every mineral is assigned a unique mineralId.\n     * @param _name Mineral name.\n     * @param _mineralType The type of a mineral.\n     * @param _weight Mineral weight in uint256.\n     * @param _origin Mineral Origin.\n     * @param _purityPercentage Mineral purity in percentage.\n     * @param _storageConditions Mineral Storage conditions.\n     * @notice Emits MineralRegistered event on successful registration.\n     */\n    function registerMineral(\n        string memory _name,\n        string memory _mineralType,\n        uint256 _weight,\n        string memory _origin,\n        uint256 _purityPercentage,\n        string memory _storageConditions\n    ) external virtual restrictedToRole(MINER_ROLE) returns (string memory) {\n        if (bytes(_name).length == 0) revert RolesManager__InvalidMineralName();\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\n\n        if (bytes(_mineralType).length == 0) revert RolesManager__InvalidMineralType();\n\n        if (_weight == 0) revert RolesManager__InvalidMineralWeight();\n\n        if (_purityPercentage == 0 || _purityPercentage > 100) revert RolesManager__InvalidMineralPurityPercentage();\n\n        if (_purityPercentage <= 80) revert RolesManager__MineralPurityPercentageTooLowToRegister(_purityPercentage);\n\n        if (bytes(_storageConditions).length == 0) revert RolesManager__InvalidMineralStorageConditions();\n\n        string memory mineralId = _generateHashedMineralId(_mineralType);\n\n        mineralDetails[mineralId] = MineralDetails({\n            id: mineralId,\n            name: _name,\n            origin: _origin,\n            mineralType: _mineralType,\n            weight: _weight,\n            purityPercentage: _purityPercentage,\n            storageConditions: _storageConditions,\n            registeredBy: msg.sender,\n            currentStatus: \"Raw\",\n            currentLocation: \"Mining Center\",\n            currentHandler: msg.sender,\n            isPurchased: false,\n            isRefined: false,\n            isAudited: false,\n            isInspected: false,\n            timestamp: block.timestamp\n        });\n\n        // record initial mineral history\n        mineralHistories[mineralId].push(\n            MineralHistory({\n                id: mineralId,\n                fieldChanged: \"Registered\",\n                newValue: string(abi.encodePacked(\"Origin: \", _origin)),\n                updatedBy: msg.sender,\n                timestamp: block.timestamp\n            })\n        );\n\n        emit MineralRegistered(\n            mineralId,\n            _name,\n            _mineralType,\n            _origin,\n            _weight,\n            _purityPercentage,\n            msg.sender,\n            block.timestamp\n        );\n\n        return mineralId;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n        ===============================================================\n                              PROCESSING ENTERPRISE\n        ===============================================================                    \n        //////////////////////////////////////////////////////////////*/\n\n    /*///////////////////////////////////////////////\n                              REFINER\n        ///////////////////////////////////////////////*/\n\n    /**\n     * @dev only the refiner can refiner a mineral\n     * @param mineralId The ID of the mineral under refinery\n     * @notice Emits MineralRefined event on successfl refining process\n     */\n    function refineMineral(string memory mineralId, string memory report) public restrictedToRole(REFINER_ROLE) {\n        // if (\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n        //     bytes(mineralId).length == 0\n        // ) {\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\n        // }\n\n        if (mineralDetails[mineralId].isRefined == true) revert RolesManager__MineralAlreadyRefined(mineralId);\n\n        mineralDetails[mineralId].isRefined = true;\n\n        emit MineralRefined(mineralId, report, msg.sender, block.timestamp);\n    }\n\n    /*////////////////////////////////////////////////\n                              TRANSPORTER\n          ///////////////////////////////////////////////*/\n\n    /**\n     * @dev only the transporter can transport mineralDetails\n     * @param mineralId The ID of the mineral under transportation\n     * @param _receivingParty The address of the destination portal\n     * @param _origin The Original location of the mineral under transportation\n     * @param _destination The Destination area of the mineral(string)\n     * @notice Emits MineralTransported on successful transportation\n     */\n    function transferMineral(\n        string memory mineralId,\n        address _receivingParty,\n        string memory _origin,\n        string memory _destination\n    ) public virtual restrictedToRole(TRANSPORTER_ROLE) {\n        // if (\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n        //     bytes(mineralId).length == 0\n        // ) {\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\n        // }\n\n        if (_receivingParty == address(0)) revert RolesManager__InvalidReceivingPartyAddress();\n\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\n\n        if (bytes(_destination).length == 0) revert RolesManager__InvalidMineralDestination();\n\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\n\n        mineralDetails[mineralId].currentHandler = msg.sender;\n\n        emit MineralTransported(mineralId, msg.sender, _receivingParty, _origin, _destination, block.timestamp);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n        ===============================================================\n                     SUPPLYCHAIN VALIDATION PORTAL\n        ===============================================================\n        //////////////////////////////////////////////////////////////*/\n\n    /*///////////////////////////////////////////////\n                               INSPECTOR\n            ///////////////////////////////////////////////*/\n\n    /**\n     * @dev only the inspector can inspect mineralDetails\n     * @param mineralId The ID of the mineral under inspection\n     * @param report The inspection status report of the mineral under inspection\n     * @notice Emits MineralInspected event on successful inspection\n     * @dev Logs audit report on every successful inspection\n     */\n    function inspectMineral(string memory mineralId, string memory report) public restrictedToRole(INSPECTOR_ROLE) {\n        // if (\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n        //     bytes(mineralId).length == 0\n        // ) {\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\n        // }\n\n        if (mineralDetails[mineralId].isInspected == true) revert RolesManager__MineralAlreadyInspected(mineralId);\n\n        mineralDetails[mineralId].isInspected = true;\n\n        emit MineralInspected(mineralId, report, msg.sender, block.timestamp);\n\n        /*//////////////////////////////////////////////////\n                          HANDLE INSPECTION REPORTING\n           ///////////////////////////////////////////////////*/\n    }\n\n    /*/////////////////////////////////////////////\n                               AUDITOR\n            ////////////////////////////////////////////*/\n\n    /**\n     * @dev only the auditor can audit mineralDetails.\n     * @dev Logs audit report on every successful audit.\n     * @param mineralId The ID of the mineral under audition.\n     * @param report The audit status report of the mineral under audition.\n     * @notice Emits MineralAudited event.\n     */\n    function _auditMineral(\n        string memory mineralId,\n        string memory report\n    ) public /*virtual*/ restrictedToRole(AUDITOR_ROLE) {\n        // if (\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n        //     bytes(mineralId).length == 0\n        // ) {\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\n        // }\n\n        if (mineralDetails[mineralId].isAudited == true) revert RolesManager__MineralAlreadyAudited(mineralId);\n\n        mineralDetails[mineralId].isAudited = true;\n\n        emit MineralAudited(mineralId, report, msg.sender, block.timestamp);\n\n        /*//////////////////////////////////////////////////\n                          HANDLE AUDIT REPORTING\n           ///////////////////////////////////////////////////*/\n    }\n\n    /**\n     * @dev Only the buyer can purchase mineralDetails\n     * @param mineralId The ID of the mineral under purchase\n     * @notice Emits MineralPurchased event on successful purchase\n     */\n    function purchaseMineral(string memory mineralId) public restrictedToRole(BUYER_ROLE) {\n        // if (\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n        //     bytes(mineralId).length == 0\n        // ) {\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\n        // }\n\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\n\n        (bool isAudited, bool isInspected) = checkAuditAndInspectionStatus(mineralId);\n\n        if (!(isAudited && isInspected)) revert RolesManager__MineralNotMarketReady(mineralId);\n\n        // require(mineralDetails[mineralId].currentHandler == msg.sender, \"You are not the assigned buyer for this mineral!!\");\n\n        mineralDetails[mineralId].isPurchased = true;\n        mineralDetails[mineralId].currentHandler = msg.sender;\n\n        emit MineralPurchased(mineralId, msg.sender, block.timestamp);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     ROLESMANAGER HELPER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /*//////////////////////////////////////////////////////////////\n                            ADMIN FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    ////////////////////////////////////////////////\n    /////// ROLEMANAGEMENT FUNCTIONS ////////////////\n    ////////////////////////////////////////////////\n\n    /////////////////////////////////\n    ////// ROLE GRANTING ////////////\n    /////////////////////////////////\n\n    /*////////////////////////////////////////////////////\n                  ROLE MANAGEMENT FUNCTIONS\n    ////////////////////////////////////////////////////*/\n\n    function assignMiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasMinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(MINER_ROLE, account);\n        roleMemberCount[MINER_ROLE]++;\n        emit MinerRoleAssigned(account, block.timestamp);\n    }\n\n    function assignRefiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasRefinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(REFINER_ROLE, account);\n        roleMemberCount[REFINER_ROLE]++;\n        emit RefinerRoleAssigned(account, block.timestamp);\n    }\n\n    function assignTransporter(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasTransporterRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(TRANSPORTER_ROLE, account);\n        roleMemberCount[TRANSPORTER_ROLE]++;\n        emit TransporterRoleAssigned(account, block.timestamp);\n    }\n\n    function assignAuditor(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasAuditorRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(AUDITOR_ROLE, account);\n        roleMemberCount[AUDITOR_ROLE]++;\n        emit AuditorRoleAssigned(account, block.timestamp);\n    }\n\n    function assignInspector(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasInspectorRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(INSPECTOR_ROLE, account);\n        roleMemberCount[INSPECTOR_ROLE]++;\n        emit InspectorRoleAssigned(account, block.timestamp);\n    }\n\n    function assignBuyer(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (hasBuyerRole(account)) revert RolesManager__AccountAlreadyHasRole();\n        _grantRole(BUYER_ROLE, account);\n        roleMemberCount[BUYER_ROLE]++;\n        emit BuyerRoleAssigned(account, block.timestamp);\n    }\n\n    /////////////////////////////////\n    // ROLE REVOKATION /////////////\n    ////////////////////////////////\n\n    function revokeMiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasMinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(MINER_ROLE, account);\n        if (roleMemberCount[MINER_ROLE] > 0) {\n            roleMemberCount[MINER_ROLE]--;\n        }\n        emit MinerRoleRevoked(account, reason, block.timestamp);\n    }\n\n    function revokeRefiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasRefinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(REFINER_ROLE, account);\n\n        if (roleMemberCount[REFINER_ROLE] > 0) {\n            roleMemberCount[REFINER_ROLE]--;\n        }\n        emit RefinerRoleRevoked(account, reason, block.timestamp);\n    }\n\n    function revokeTransporter(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasTransporterRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(TRANSPORTER_ROLE, account);\n        if (roleMemberCount[TRANSPORTER_ROLE] > 0) {\n            roleMemberCount[TRANSPORTER_ROLE]--;\n        }\n        emit TransporterRoleRevoked(account, reason, block.timestamp);\n    }\n\n    function revokeInspector(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasInspectorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(INSPECTOR_ROLE, account);\n        if (roleMemberCount[INSPECTOR_ROLE] > 0) {\n            roleMemberCount[INSPECTOR_ROLE]--;\n        }\n        emit InspectorRoleRevoked(account, reason, block.timestamp);\n    }\n\n    function revokeAuditor(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasAuditorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(AUDITOR_ROLE, account);\n        if (roleMemberCount[AUDITOR_ROLE] > 0) {\n            roleMemberCount[AUDITOR_ROLE]--;\n        }\n        emit AuditorRoleRevoked(account, reason, block.timestamp);\n    }\n\n    function revokeBuyer(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasBuyerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\n        revokeRole(BUYER_ROLE, account);\n        if (roleMemberCount[BUYER_ROLE] > 0) {\n            roleMemberCount[BUYER_ROLE]--;\n        }\n        emit BuyerRoleRevoked(account, reason, block.timestamp);\n    }\n\n    /*/////////////////////////////////////////////////////\n                  NEW ROLE COUNT FUNCTIONS\n    /////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Returns the number of accounts that have a specific role\n     * @param role The role to query member count for\n     * @return count The number of accounts with the role\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256 count) {\n        if (!isValidRole(role)) revert RolesManager__InvalidRole();\n        return roleMemberCount[role];\n    }\n\n    /**\n     * @dev Returns all role counts in a single call\n     * @return minerCount Number of miners\n     * @return refinerCount Number of refiners\n     * @return transporterCount Number of transporters\n     * @return auditorCount Number of auditors\n     * @return inspectorCount Number of inspectors\n     * @return buyerCount Number of buyers\n     */\n    function getAllRoleCounts()\n        public\n        view\n        returns (\n            uint256 minerCount,\n            uint256 refinerCount,\n            uint256 transporterCount,\n            uint256 auditorCount,\n            uint256 inspectorCount,\n            uint256 buyerCount\n        )\n    {\n        return (\n            roleMemberCount[MINER_ROLE],\n            roleMemberCount[REFINER_ROLE],\n            roleMemberCount[TRANSPORTER_ROLE],\n            roleMemberCount[AUDITOR_ROLE],\n            roleMemberCount[INSPECTOR_ROLE],\n            roleMemberCount[BUYER_ROLE]\n        );\n    }\n\n    // ... (keep all your existing functions below this point) ...\n    // Only modification needed is to ensure the _setupRole function also increments counters:\n    function _setupRole(bytes32 role, address account) internal {\n        _grantRole(role, account);\n\n        roleMemberCount[role]++;\n    }\n\n    /**\n     * @dev Revokes role from an account - onlydmin\n     * @param account The address of the account to be revoked role by the admin\n     * @notice Emits event of the revoked role\n     */\n\n    /*/////////////////////////////////////////////////////\n   ====================================================\n            HELPER FUNCTIONS SECTION\n   ====================================================\n   /////////////////////////////////////////////////////*/\n\n    /////////////////////////////////////////////////\n    //////// ROLE OWNERSHIP CHECKS //////////////////\n    /////////////////////////////////////////////////\n\n    /**\n     * @dev Returns all roles assigned to a given address\n     * @param account The address to check roles for\n     * @return roles An array of role names the address has\n     */\n    function getRolesForAddress(\n        address account\n    ) public view onlyNonZeroAddress(account) returns (string[] memory roles) {\n        // Count how many roles the address has\n        uint256 roleCount = 0;\n\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) roleCount++;\n        if (hasRole(MINER_ROLE, account)) roleCount++;\n        if (hasRole(REFINER_ROLE, account)) roleCount++;\n        if (hasRole(TRANSPORTER_ROLE, account)) roleCount++;\n        if (hasRole(AUDITOR_ROLE, account)) roleCount++;\n        if (hasRole(INSPECTOR_ROLE, account)) roleCount++;\n        if (hasRole(BUYER_ROLE, account)) roleCount++;\n\n        // Initialize array with the counted size\n        roles = new string[](roleCount);\n        uint256 index = 0;\n\n        // Populate the array with role names\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) {\n            roles[index] = \"ADMIN\";\n            index++;\n        }\n        if (hasRole(MINER_ROLE, account)) {\n            roles[index] = \"MINER\";\n            index++;\n        }\n        if (hasRole(REFINER_ROLE, account)) {\n            roles[index] = \"REFINER\";\n            index++;\n        }\n        if (hasRole(TRANSPORTER_ROLE, account)) {\n            roles[index] = \"TRANSPORTER\";\n            index++;\n        }\n        if (hasRole(AUDITOR_ROLE, account)) {\n            roles[index] = \"AUDITOR\";\n            index++;\n        }\n        if (hasRole(INSPECTOR_ROLE, account)) {\n            roles[index] = \"INSPECTOR\";\n            index++;\n        }\n        if (hasRole(BUYER_ROLE, account)) {\n            roles[index] = \"BUYER\";\n            index++;\n        }\n\n        return roles;\n    }\n\n    // function _setupRole(bytes32 role, address account) internal virtual {\n    //     __grantRole(role, account);\n    // }\n\n    /**\n     ** @dev Roles helper functions\n     * @dev checks if an account has a specific role\n     * @param account The address of the account to checked with role association\n     */\n    function hasMinerRole(address account) public view returns (bool) {\n        return hasRole(MINER_ROLE, account);\n    }\n    function hasRefinerRole(address account) public view returns (bool) {\n        return hasRole(REFINER_ROLE, account);\n    }\n    function hasTransporterRole(address account) public view returns (bool) {\n        return hasRole(TRANSPORTER_ROLE, account);\n    }\n    function hasInspectorRole(address account) public view returns (bool) {\n        return hasRole(INSPECTOR_ROLE, account);\n    }\n    function hasAuditorRole(address account) public view returns (bool) {\n        return hasRole(AUDITOR_ROLE, account);\n    }\n    function hasBuyerRole(address account) public view returns (bool) {\n        return hasRole(BUYER_ROLE, account);\n    }\n    function hasAdminRole(address account) public view returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    // Helper function to validate the role\n    function isValidRole(bytes32 role) private pure returns (bool) {\n        return\n            role == MINER_ROLE ||\n            role == REFINER_ROLE ||\n            role == TRANSPORTER_ROLE ||\n            role == AUDITOR_ROLE ||\n            role == INSPECTOR_ROLE ||\n            role == BUYER_ROLE;\n    }\n\n    /**\n    * @dev checks audit and inspection status\n    * @param mineralId The ID of the mineral to check for audit and inspection status\n\n    * Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\n    */\n    function checkAuditAndInspectionStatus(\n        string memory mineralId\n    ) public virtual restrictedToRole(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert RolesManager__InvalidMineralIdOrNotFound();\n        }\n\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\n            emit MineralReadyToTrade(mineralId, msg.sender, \"TradingReady\", block.timestamp);\n        } else {\n            revert RolesManager__MineralNotMarketReady(mineralId);\n        }\n\n        isAudited = mineralDetails[mineralId].isAudited;\n        isInspected = mineralDetails[mineralId].isInspected;\n\n        return (isAudited, isInspected);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            GETTERS - For Traceability\n    //////////////////////////////////////////////////////////////*/\n\n    function getMineralHistory(string memory mineralId) public view virtual returns (MineralHistory[] memory) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert RolesManager__InvalidMineralIdOrNotFound();\n        }\n\n        return mineralHistories[mineralId];\n    }\n\n    /*///////////////////////////////////////////////////////////////\n    ===============================================================\n         MINERAL REGISTRATION HELPER FUNCTIONS SECTION\n    ===============================================================\n    ////////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev checks if a mineral with the given ID is registered\n     * @param mineralId the ID of the mineral to check\n     * @return A boolean indicating whether the mineral is registered or not\n     */\n    function isMineralRegistered(string memory mineralId) public virtual returns (bool) {\n        if (bytes(mineralId).length == 0) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\n            revert MineralRegistry__MineralNotRegistered(mineralId);\n        }\n\n        return true;\n    }\n\n    //////////////////////////////////////////////////////\n    //////// GENERATE HASHED MINERALID FOR UNIQUENESS/////\n    //////////////////////////////////////////////////////\n    function _generateHashedMineralId(string memory mineralType) internal returns (string memory) {\n        bytes32 fullHash = keccak256(abi.encodePacked(mineralType, msg.sender, block.timestamp, nonce++));\n\n        // Convert first 4 bytes (8 hex characters) into hex string with \"0x\"\n        bytes memory shortHex = new bytes(10); // 2 for \"0x\", 8 for hex chars\n        shortHex[0] = \"0\";\n        shortHex[1] = \"x\";\n        for (uint i = 0; i < 4; i++) {\n            shortHex[2 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] >> 4));\n            shortHex[3 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] & 0x0f));\n        }\n\n        return string(abi.encodePacked(mineralType, \"-\", string(shortHex)));\n    }\n\n    // helper: convert nibble to hex char (0-9, a-f)\n    function _nibbleToHexChar(uint8 nibble) internal pure returns (bytes1) {\n        return nibble < 10 ? bytes1(nibble + 0x30) : bytes1(nibble + 0x61 - 10);\n    }\n\n    ///////////////////////////////////////////////\n    //////// getting all registered minerals /////\n    // //////////////////////////////////////////////\n    // function getAllRegisteredMineral() public view returns(MineralDetails[] memory mineralDetails) {\n    //     return mineralDetails;\n\n    // }\n}\n"
    },
    "contracts/modules/MineralRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title MineralRegistry contract\n * @author @0xJonaseb11\n * @dev It is a mineral factory contract. It is where new minerals are registered, updated and gotten till next step\n * @dev Minerals are gotten from mineral registry contract and all other operations proceed right from there!!\n * @notice It is the base contract of the supplychain\n */\n\nimport { RolesManager } from \"../core/RolesManager.sol\";\n\ncontract MineralRegistry is RolesManager {\n    RolesManager private rolesManager;\n    // uint256 private nextMineralId = 1;\n\n    // Events for transparency\n    event MineralUpdated(\n        string mineralId,\n        string updatedField,\n        string newValue,\n        address indexed updatedBy,\n        uint256 updatedAt\n    );\n    event MineralLocationUpdated(\n        string mineralId,\n        string previousLocation,\n        string newLocation,\n        address indexed tranporter\n    );\n\n    /**\n     * @dev connects RolesManager contract\n     */\n    constructor(address rolesManagerAddress) {\n        rolesManager = RolesManager(rolesManagerAddress);\n    }\n\n    /**\n     * @dev Restrict actions to specific roles\n     */\n    modifier onlyAuthorized(bytes32 role) {\n        if (!hasRole(role, msg.sender)) {\n            revert InsufficientPermissionsToPerformAction(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @dev Updates mineral details - only by authorized roles\n     * @param mineralId The ID of the mineral under update\n     * @param newStatus New status of the mineral\n     * @notice Emits MineralUpdated event on successful updation\n     */\n    function updateMineralStatus(string memory mineralId, string memory newStatus) public {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n        if (bytes(newStatus).length == 0) revert MineralRegistry__InvalidMineralStatus();\n\n        if (\n            !hasRole(REFINER_ROLE, msg.sender) ||\n            !hasRole(TRANSPORTER_ROLE, msg.sender) ||\n            !hasRole(AUDITOR_ROLE, msg.sender) ||\n            !hasRole(INSPECTOR_ROLE, msg.sender)\n        ) {\n            revert InsufficientPermissionsToPerformAction(msg.sender);\n        }\n\n        mineralDetails[mineralId].currentStatus = newStatus;\n        mineralDetails[mineralId].timestamp = block.timestamp;\n\n        // record mineral history\n        mineralHistories[mineralId].push(\n            MineralHistory({\n                id: mineralId,\n                fieldChanged: \"Status\",\n                newValue: newStatus,\n                updatedBy: msg.sender,\n                timestamp: block.timestamp\n            })\n        );\n\n        emit MineralUpdated(mineralId, \"Status\", newStatus, msg.sender, block.timestamp);\n    }\n\n    /*////////////////////////////////////////////////////////////\n        =============================================================\n                       TRANSPORTATION ENTERPRISE\n        =============================================================               \n        ////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev updates the location of the mineral\n     * @param mineralId the ID of the mineral to update\n     * @param newLocation The new location of the mineral\n     * @notice Emits MineralLocationUpdated event on successful location update!\n     */\n    function updateMineralLocation(\n        string memory mineralId,\n        string memory newLocation\n    ) public onlyAuthorized(TRANSPORTER_ROLE) {\n        // custom error handling\n\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n\n        if (bytes(newLocation).length == 0) {\n            revert MineralRegistry__InvalidMineralLocation();\n        }\n\n        string memory previousLocation = mineralDetails[mineralId].currentLocation;\n        mineralDetails[mineralId].currentLocation = newLocation;\n\n        emit MineralLocationUpdated(mineralId, previousLocation, newLocation, msg.sender);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n        ===============================================================\n                     SUPPLYCHAIN VALIDATION PORTAL\n        ===============================================================\n        //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev retrieves mineral details of specified mineralId\n     * @return mineral details of specified mineralId\n     */\n    function getMineralDetails(string memory mineralId) public view virtual returns (MineralDetails memory) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n        return mineralDetails[mineralId];\n    }\n\n    /**\n     * @dev retrieves fll history of a mineral (for audit retail)\n     * @return history of specified mineral sing its mineralId\n     */\n    function _getMineralHistory(string memory mineralId /*override*/) public view returns (MineralHistory[] memory) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n        return mineralHistories[mineralId];\n    }\n\n    /**\n     * @dev checks if a mineral with the given ID is registered\n     * @param mineralId the ID of the mineral to check\n     * @return A boolean indicating whether the mineral is registered or not\n     */\n\n    function isMineralAudited(string memory mineralId) public view returns (bool) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n\n        return mineralDetails[mineralId].isAudited;\n    }\n\n    function isMineralInspected(string memory mineralId) public view returns (bool) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n\n        return mineralDetails[mineralId].isInspected;\n    }\n\n    /*///////////////////////////////////////////////\n                         AUDITOR\n        ///////////////////////////////////////////////*/\n\n    /**\n     * @dev enables an auditor to audit a mineral\n     * @notice Emits MineralAudited event on successful auditing of a mineral\n     */\n\n    /*///////////////////////////////////////////////////////\n                          INSPECTOR\n        ///////////////////////////////////////////////////////*/\n\n    /**\n     * @dev enables only the inspector to audit a mineralDetails\n     * @notice Emits MineralInspected even\n     */\n\n    /**\n     * @dev checks audit and inspection status\n     * Returns the status of both audit and inspection of mineral according to mineralId\n     */\n    function _checkAuditAndInspectionStatus(\n        string memory mineralId\n    ) public /*override*/ onlyAuthorized(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\n        if (\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\n            bytes(mineralId).length == 0\n        ) {\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\n        }\n\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\n            emit MineralReadyToTrade(mineralId, msg.sender, \"TradingReady\", block.timestamp);\n        } else {\n            revert MineralNotReadyToTrade(mineralId);\n        }\n\n        // explicitly return audit and inspection results\n        return (mineralDetails[mineralId].isAudited, mineralDetails[mineralId].isInspected);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            HELPER FUNCTIONS\n        //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev helper function to convert address to string\n     * @return string of address\n     */\n    function addressToString(address _address) internal pure returns (string memory) {\n        bytes32 value = bytes32(uint256(uint160(_address)));\n        bytes memory characters = \"ABACDEFGHIJ1245678909876\";\n\n        bytes memory str = new bytes(42);\n        str[0] = \"0\";\n        str[1] = \"x\";\n\n        for (uint256 i = 0; i < 20; i++) {\n            str[2 + i * 2] = characters[uint8(value[i + 12] >> 4)];\n            str[3 + i * 2] = characters[uint8(value[i + 12] & 0x0f)];\n        }\n\n        return string(str);\n    }\n}\n"
    },
    "contracts/modules/MineralWarehouse.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @author @0xJonaseb11\n * title MineralWarehouse contract\n * @dev It is a mineral warehouse contract. Minerals are stored here after refinery and can be listed for sale\n * @notice It is the base contract of the supplychain\n */\nimport { RolesManager } from \"../core/RolesManager.sol\";\nimport { MineralRegistry } from \"../modules/MineralRegistry.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract MineralWarehouse is RolesManager, MineralRegistry {\n    MineralRegistry private mineralRegistry;\n    RolesManager private rolesManager;\n\n    enum PaymentMethod {\n        ETH,\n        TOKEN\n    }\n\n    struct MineralSaleInfo {\n        string price;\n        uint256 priceETH;\n        mapping(address => uint256) tokenPrices;\n    }\n\n    struct StoredMineral {\n        string mineralId;\n        address refiner;\n        uint256 storedAt;\n        uint256 soldAt;\n        bool isStored;\n        bool isSold;\n        bool isForSale;\n        address buyer;\n        bool isMarketReady;\n        MineralSaleInfo saleInfo;\n    }\n\n    mapping(string => StoredMineral) private warehouse;\n    string[] private storedMineralIds;\n    mapping(address => bool) public acceptedTokens;\n\n    event MineralStored(string mineralId, address indexed refiner, uint256 storedAt);\n    event MineralListedForSale(string mineralId, string price, address indexed lister);\n    event MineralSold(string mineralId, address indexed buyer, address seller, uint256 soldAt);\n\n    constructor(address rolesManagerAddress, address mineralRegistryAddress) MineralRegistry(rolesManagerAddress) {\n        rolesManager = RolesManager(rolesManagerAddress);\n        mineralRegistry = MineralRegistry(mineralRegistryAddress);\n    }\n\n    function addAcceptedToken(address _token) external restrictedToRole(DEFAULT_ADMIN_ROLE) {\n        require(_token != address(0), \"Invalid token address\");\n        acceptedTokens[_token] = true;\n    }\n\n    function store_refined_mineral_to_warehouse(\n        string memory _mineralId,\n        uint256 _priceETH,\n        address[] memory tokens,\n        uint256[] memory prices\n    ) public restrictedToRole(REFINER_ROLE) {\n        require(getMineralDetails(_mineralId).isRefined, \"Mineral not refined\");\n        require(tokens.length == prices.length, \"Mismatched arrays\");\n        require(_priceETH > 0, \"Invalid ETH price\");\n\n        StoredMineral storage mineral = warehouse[_mineralId];\n        mineral.mineralId = _mineralId;\n        mineral.refiner = msg.sender;\n        mineral.isStored = true;\n        mineral.storedAt = block.timestamp;\n        mineral.isMarketReady = true;\n        mineral.saleInfo.priceETH = _priceETH;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(acceptedTokens[tokens[i]], \"Token not accepted\");\n            mineral.saleInfo.tokenPrices[tokens[i]] = prices[i];\n        }\n\n        storedMineralIds.push(_mineralId);\n        emit MineralStored(_mineralId, msg.sender, block.timestamp);\n    }\n\n    function list_Mineral_ForSale(\n        string memory _mineralId,\n        string memory _price\n    ) public restrictedToRole(REFINER_ROLE) {\n        StoredMineral storage mineral = warehouse[_mineralId];\n        require(mineral.isStored, \"Mineral not stored\");\n        require(!mineral.isSold, \"Already sold\");\n        require(msg.sender == mineral.refiner, \"Not owner\");\n        require(mineral.isMarketReady, \"Not market ready\");\n\n        mineral.isForSale = true;\n        mineral.saleInfo.price = _price;\n        emit MineralListedForSale(_mineralId, _price, msg.sender);\n    }\n\n    function purchase_mineral(\n        string memory _mineralId,\n        PaymentMethod method,\n        address token,\n        uint256 amount\n    ) public payable restrictedToRole(BUYER_ROLE) {\n        StoredMineral storage mineral = warehouse[_mineralId];\n\n        // require(mineral.isStored, \"Mineral not found\");\n        require(!mineral.isSold, \"Already sold\");\n        // require(mineral.isForSale, \"Not for sale\");\n        // require(mineral.isMarketReady, \"Not market ready\");\n\n        if (method == PaymentMethod.ETH) {\n            require(msg.value == mineral.saleInfo.priceETH, \"Incorrect ETH amount\");\n            payable(mineral.refiner).transfer(msg.value);\n        } else {\n            // require(acceptedTokens[token], \"Token not accepted\");\n            require(amount == mineral.saleInfo.tokenPrices[token], \"Incorrect token amount\");\n            IERC20(token).transferFrom(msg.sender, mineral.refiner, amount);\n        }\n\n        mineral.isSold = true;\n        mineral.isForSale = false;\n        mineral.soldAt = block.timestamp;\n        mineral.buyer = msg.sender;\n\n        emit MineralSold(_mineralId, msg.sender, mineral.refiner, block.timestamp);\n    }\n\n    function getMineralPriceInToken(string memory _mineralId, address token) public view returns (uint256) {\n        require(acceptedTokens[token], \"Token not accepted\");\n        return warehouse[_mineralId].saleInfo.tokenPrices[token];\n    }\n\n    function isMineralMarketReady(string memory _mineralId) public view returns (bool) {\n        return warehouse[_mineralId].isMarketReady;\n    }\n}\n"
    },
    "contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract Errors {\n    /*//////////////////////////////////////////////////////////////\n                        MINERALREGISTRY__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n\n    error MineralRegistry__MineralNotRegistered(string mineralId);\n    error MineralRegistry__MineralAlreadyPurchased();\n    error MineralRegistry__MineralAlreadyAudited();\n    error MineralRegistry__MineralAlreadyInspected();\n    error MineralRegistry__MineralNotAudited();\n    error MineralRegistry__MineralNotInspected();\n\n    error MineralRegistry__InvalidMineralDetails();\n    error MineralRegistry__InvalidMineralIdOrNotFound(string mineralId);\n    error MineralRegistry__InvalidMineralStatus();\n    error MineralRegistry__InvalidMineralName();\n    error MineralRegistry__InvalidMineralOrigin();\n    error MineralRegistry__InvalidMineralType();\n    error MineralRegistry__InvalidMineralWeight();\n    error MineralRegistry__InvalidMineralPurityPercentage();\n    error MineralRegistry__InvalidMineralStorageConditions();\n    error MineralRegistry__InvalidMineralLocation();\n    error MineralRegistry__InvalidReceivingPartyAddress();\n    error MineralRegistry__InvalidMineralDestination();\n\n    error MineralNotReadyToTrade(string mineralId);\n\n    /*//////////////////////////////////////////////////////////////\n                            ROLESMANAGER__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n    error RolesManager__MineralAlreadyRefined(string mineralId);\n    error RolesManager__MineralAlreadyPurchased(string mineralId);\n    error RolesManager__MineralAlreadyInspected(string mineralId);\n    error RolesManager__MineralAlreadyAudited(string mineralId);\n    error RolesManager__NotTheAssignedBuyer(address caller);\n\n    error RolesManager__InvalidMineralName();\n    error RolesManager__InvalidMineralOrigin();\n    error RolesManager__InvalidMineralDestination();\n\n    error RolesManager__MineralNotMarketReady(string mineralId);\n\n    error RolesManager__InvalidMineralIdOrNotFound();\n    error RolesManager__InvalidMineralType();\n    error RolesManager__InvalidReceivingPartyAddress();\n    error RolesManager__InvalidMineralStorageConditions();\n    error RolesManager__InvalidMineralPurityPercentage();\n    error RolesManager__MineralPurityPercentageTooLowToRegister(uint256 purityPercentage);\n    error RolesManager__InvalidMineralWeight();\n\n    error RolesManager__InvalidAddress();\n    error RolesManager__InvalidRole();\n\n    // Roles Assignment and revocation\n    error RolesManager__AccountAlreadyHasRole();\n    error RolesManager__AccountDoesNotHaveRole();\n\n    /*//////////////////////////////////////////////////////////////\n                            DISPUTERESOLUTION__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n    error DisputeResolution__InvalidMineralIdOrNotFound();\n    error DisputeResolution__InvalidDisputeDefendantAddress();\n    error DisputeResolution__InvalidDisputeDetails();\n    error DisputeResolution__InvalidDisputeEvidence();\n    error DisputeResolution__InvalidDisputeIdOrNotFound();\n    error DisputeResolution__InvalidResolutionDetails();\n    error DisputeResolution__DisputeStatusNotPendingOrEscalated();\n    error DisputeResolution__DisputeStatusNotPending(uint256 disputeId);\n    error DisputeResolution__NotEligibleToVote(address caller);\n    error DisputeResolution__AlreadyVoted(address caller);\n    error DisputeResolution__DisputeEscalated_UnableToVote(uint256 disputeId);\n    error DisputeResolution__VotingPeriodStillActive();\n    error DisputeResolution__DisputeNotEscalated(uint256 disputeId);\n\n    /*//////////////////////////////////////////////////////////////\n                            MINERALWAREHOUSE__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n\n    error MineralWarehouse__InvalidTokenAddress(address tokenAddress);\n    error MineralWarehouse__MineralNotRefined(string mineralId);\n    error MineralWarehouse__InvalidNumberOfPrices();\n    error MineralWarehouse__UnacceptedToken(address tokenAddress);\n    error MineralWarehouse__UnacceptedTokens(address[] tokenAddresses);\n    error MineralWarehouse__MineralNotMarketReady(string mineralId);\n    error MineralWarehouse__InvalidMineralPrice();\n    error MineralWarehouse__MineralAlreadySold(string mineralId);\n    error MineralWarehouse__UnauthorizedSeller(address seller);\n    error MineralNotMarketReady(string mineralId);\n    error MineralWarehouse__IncorrectETHAmount();\n    error MineralWarehouse__ETHTransferFailed();\n    error MineralWarehouse__InvalidTokenPrice();\n\n    error MineralWarehouse__MineralNotFoundInWarehouse(string mineralId);\n\n    /*//////////////////////////////////////////////////////////////\n                            TOKENISATION__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n\n    error Tokenization__TokenAlreadyExists(uint256 tokenId);\n    error Tokenization__TokenIsAlreadyMinted(uint256 tokenId);\n    error Tokenization__InvalidTokenIdOrNotFound(uint256 tokenId);\n    error Tokenization__CallerNotMineralTokenOwner(uint256 tokenId, address caller);\n    error Tokenization__InvalidTokenId(uint256 tokenId);\n\n    /*//////////////////////////////////////////////////////////////\n                            TRANSACTIONlOG__CUSTOM ERRORS\n       //////////////////////////////////////////////////////////////*/\n    error TransactionLog__InvalidOperationType();\n    error TransactionLog__InvalidOperationIndex(uint256 index);\n    error TransactionLog__InvalidTransactionIdOrNotFound(uint256 transactionId);\n\n    /*//////////////////////////////////////////////////////////////\n                        SUPPLYCHAINVALIDATOR__CUSTOM ERRORS\n        //////////////////////////////////////////////////////////////*/\n\n    error SupplychainValidator__InvalidMineralIdOrNotFound(string mineralId);\n    error SupplychainValidator__InvalidMineralTransactionHistory();\n    error SupplychainValidator__InvalidMineralOwnershipChain();\n\n    /*//////////////////////////////////////////////////////////////\n                             GLOBAL ERRORS\n    //////////////////////////////////////////////////////////////*/\n    error InvalidAccountAddress();\n    error ERC20TokenTransferFailed(address token, uint256 tokenAmount);\n    error InvalidPaymentMethods();\n    error InvalidMineralIdOrNotFound(string mineralId);\n    error InsufficientPermissionsToPerformAction(address caller);\n\n    /////////////////////////////////////\n    // LOGISTICS MANAGER ERRORS /////////\n    /////////////////////////////////////\n    error TransportRequestAlreadyExists(string mineralId);\n    error AddressDoesNotHaveRequiredRole(address caller, bytes32 role);\n    error NotAssignedTransporter(string mineralId, address caller);\n    error InvalidTransportStateTransition(string currentStatus, string attemptedStatus);\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}