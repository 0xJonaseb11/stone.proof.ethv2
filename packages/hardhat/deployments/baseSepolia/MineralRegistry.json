{
  "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rolesManagerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "AddressDoesNotHaveRequiredRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DisputeResolution__AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeEscalated_UnableToVote",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeNotEscalated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "DisputeResolution__DisputeStatusNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__DisputeStatusNotPendingOrEscalated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeDefendantAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeDetails",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeEvidence",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidDisputeIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__InvalidResolutionDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DisputeResolution__NotEligibleToVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeResolution__VotingPeriodStillActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "ERC20TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "InsufficientPermissionsToPerformAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccountAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPaymentMethods",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "currentStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attemptedStatus",
          "type": "string"
        }
      ],
      "name": "InvalidTransportStateTransition",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralNotReadyToTrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralRegistry__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralLocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralPurityPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralStorageConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidMineralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__InvalidReceivingPartyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyAudited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyInspected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralAlreadyPurchased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralNotAudited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralRegistry__MineralNotInspected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralRegistry__MineralNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__IncorrectETHAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidETHPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidMineralPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidNumberOfPrices",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__InvalidTokenPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralAlreadySold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotFoundInWarehouse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "MineralWarehouse__MineralNotRefined",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MineralWarehouse__MismatchedArrays",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__TokenNotAccepted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__UnacceptedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "MineralWarehouse__UnacceptedTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "MineralWarehouse__UnauthorizedSeller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NotAssignedTransporter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AccountAlreadyHasRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AccountDoesNotHaveRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralPurityPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralStorageConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidMineralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidReceivingPartyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyAudited",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyInspected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyPurchased",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralAlreadyRefined",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "RolesManager__MineralNotMarketReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        }
      ],
      "name": "RolesManager__MineralPurityPercentageTooLowToRegister",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RolesManager__NotTheAssignedBuyer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "SupplychainValidator__InvalidMineralIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplychainValidator__InvalidMineralOwnershipChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplychainValidator__InvalidMineralTransactionHistory",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Tokenization__CallerNotMineralTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__InvalidTokenIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__TokenAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Tokenization__TokenIsAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "TransactionLog__InvalidOperationIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionLog__InvalidOperationType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "TransactionLog__InvalidTransactionIdOrNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "TransportRequestAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuditorRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuditorRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectorRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectorRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auditedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralStatus",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralInspected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "previousLocation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newLocation",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tranporter",
          "type": "address"
        }
      ],
      "name": "MineralLocationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchasedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ApprovedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectionDate",
          "type": "uint256"
        }
      ],
      "name": "MineralReadyToTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "refineryReport",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "refiner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refinedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralRefined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "miner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registeredAt",
          "type": "uint256"
        }
      ],
      "name": "MineralRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "transporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivingParty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "destination",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transportedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralTransported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "updatedField",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "MineralUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RefinerRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RefinerRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roleAssignedAt",
          "type": "uint256"
        }
      ],
      "name": "RoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "revoker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roleRevokedAt",
          "type": "uint256"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransporterRoleAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revokee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransporterRoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BUYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSPECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSPORTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "_auditMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "_checkAuditAndInspectionStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "_getMineralHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fieldChanged",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "updatedBy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct RolesManager.MineralHistory[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignRefiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "assignTransporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "checkAuditAndInspectionStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRoleCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refinerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transporterCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auditorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inspectorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyerCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "getMineralDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "origin",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "mineralType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purityPercentage",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "storageConditions",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "registeredBy",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "currentStatus",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "currentLocation",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "currentHandler",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPurchased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRefined",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isAudited",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isInspected",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct RolesManager.MineralDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "getMineralHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fieldChanged",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "updatedBy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct RolesManager.MineralHistory[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRolesForAddress",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "roles",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAuditorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasBuyerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasInspectorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasMinerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRefinerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasTransporterRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "inspectMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "isMineralAudited",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "isMineralInspected",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "isMineralRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "mineralDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mineralType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "storageConditions",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "registeredBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "currentStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "currentLocation",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "currentHandler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRefined",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAudited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspected",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mineralHistories",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fieldChanged",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        }
      ],
      "name": "purchaseMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "report",
          "type": "string"
        }
      ],
      "name": "refineMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_mineralType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_origin",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_purityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_storageConditions",
          "type": "string"
        }
      ],
      "name": "registerMineral",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeRefiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeTransporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receivingParty",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_destination",
          "type": "string"
        }
      ],
      "name": "transferMineral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newLocation",
          "type": "string"
        }
      ],
      "name": "updateMineralLocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mineralId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newStatus",
          "type": "string"
        }
      ],
      "name": "updateMineralStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
  "receipt": {
    "to": null,
    "from": "0x0dfDb5bBaEeCE3871f826DF1C6Fe24a2772f5d38",
    "contractAddress": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
    "transactionIndex": 16,
    "gasUsed": "5064753",
    "logsBloom": "0x008000040000000000000000000240000000000000040000100000100000005040102000000000000000800000004000010000000064000000000000000000000000000000000000000000000200000000000000000000004000000000200000000000800a1000000000000000000800000000000040100000000000008000000000000400000000000000000000000000000000000000000000000004220000000000020800004000100000000010000100000100000000001000000000400000800000000000000000000000000000000040000000000100000000000020000042000000000000000000000000000000000000000300000000000000000000",
    "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443",
    "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 142,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x458ea7e03b3466b3cf9bc2d66ddea8b11fe9469982816f42666888e6c8c6e664",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359f2",
        "logIndex": 143,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e72",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 144,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf559",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359f2",
        "logIndex": 145,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 146,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb3",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359f2",
        "logIndex": 147,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 148,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e092",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359f2",
        "logIndex": 149,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90e",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 150,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0xf8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e97505",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359f2",
        "logIndex": 151,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4d",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 152,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be751",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359f2",
        "logIndex": 153,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 154,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 33029513,
        "transactionHash": "0xd46f2916257dec6c26a2c81df2bf33c38b29d9d0f6e9b46a341da5208adc618b",
        "address": "0xB2B9627d52DA8e87057F9cB74C87F13D6C610381",
        "topics": [
          "0x964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a6",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000690359f2",
        "logIndex": 155,
        "blockHash": "0x64467af805fdcbbc053969b344d8b9a21d2c8675a964c907a684063ca4bad443"
      }
    ],
    "blockNumber": 33029513,
    "cumulativeGasUsed": "9168606",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67580b5841b0305329A925a38880e7C23208d0CA"
  ],
  "numDeployments": 1,
  "solcInputHash": "7c3d72a177373b46b126c9cb9d71da65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rolesManagerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"AddressDoesNotHaveRequiredRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DisputeResolution__AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeEscalated_UnableToVote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeNotEscalated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolution__DisputeStatusNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__DisputeStatusNotPendingOrEscalated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeDefendantAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeDetails\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeEvidence\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidDisputeIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__InvalidResolutionDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DisputeResolution__NotEligibleToVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeResolution__VotingPeriodStillActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InsufficientPermissionsToPerformAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccountAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentMethods\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attemptedStatus\",\"type\":\"string\"}],\"name\":\"InvalidTransportStateTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralNotReadyToTrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralRegistry__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralLocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralPurityPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralStorageConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidMineralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__InvalidReceivingPartyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyAudited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyInspected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralNotAudited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralRegistry__MineralNotInspected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralRegistry__MineralNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__IncorrectETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidETHPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidMineralPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidNumberOfPrices\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__InvalidTokenPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralAlreadySold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotFoundInWarehouse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"MineralWarehouse__MineralNotRefined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MineralWarehouse__MismatchedArrays\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__TokenNotAccepted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__UnacceptedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"MineralWarehouse__UnacceptedTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"MineralWarehouse__UnauthorizedSeller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotAssignedTransporter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AccountAlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AccountDoesNotHaveRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralPurityPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralStorageConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidMineralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidReceivingPartyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyAudited\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyInspected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralAlreadyRefined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"RolesManager__MineralNotMarketReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"}],\"name\":\"RolesManager__MineralPurityPercentageTooLowToRegister\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RolesManager__NotTheAssignedBuyer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"SupplychainValidator__InvalidMineralIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplychainValidator__InvalidMineralOwnershipChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplychainValidator__InvalidMineralTransactionHistory\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Tokenization__CallerNotMineralTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__InvalidTokenIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Tokenization__TokenIsAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TransactionLog__InvalidOperationIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionLog__InvalidOperationType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionLog__InvalidTransactionIdOrNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"TransportRequestAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuditorRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuditorRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectorRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectorRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auditedAt\",\"type\":\"uint256\"}],\"name\":\"MineralAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralStatus\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"}],\"name\":\"MineralInspected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"previousLocation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newLocation\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tranporter\",\"type\":\"address\"}],\"name\":\"MineralLocationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"name\":\"MineralPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ApprovedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectionDate\",\"type\":\"uint256\"}],\"name\":\"MineralReadyToTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"refineryReport\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refiner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refinedAt\",\"type\":\"uint256\"}],\"name\":\"MineralRefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"}],\"name\":\"MineralRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingParty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transportedAt\",\"type\":\"uint256\"}],\"name\":\"MineralTransported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"updatedField\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"MineralUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefinerRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefinerRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleAssignedAt\",\"type\":\"uint256\"}],\"name\":\"RoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleRevokedAt\",\"type\":\"uint256\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransporterRoleAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransporterRoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSPORTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"_auditMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"_checkAuditAndInspectionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"_getMineralHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RolesManager.MineralHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignRefiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"assignTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"checkAuditAndInspectionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRoleCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refinerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transporterCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auditorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inspectorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"getMineralDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"storageConditions\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"currentLocation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentHandler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefined\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RolesManager.MineralDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"getMineralHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RolesManager.MineralHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRolesForAddress\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasBuyerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasMinerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRefinerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasTransporterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"inspectMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"isMineralAudited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"isMineralInspected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"isMineralRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mineralDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"storageConditions\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"currentStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"currentLocation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentHandler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefined\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAudited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mineralHistories\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fieldChanged\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"}],\"name\":\"purchaseMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"report\",\"type\":\"string\"}],\"name\":\"refineMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mineralType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_origin\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_purityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_storageConditions\",\"type\":\"string\"}],\"name\":\"registerMineral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeRefiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receivingParty\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_destination\",\"type\":\"string\"}],\"name\":\"transferMineral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newLocation\",\"type\":\"string\"}],\"name\":\"updateMineralLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mineralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newStatus\",\"type\":\"string\"}],\"name\":\"updateMineralStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"_auditMineral(string,string)\":{\"details\":\"only the auditor can audit mineralDetails.Logs audit report on every successful audit.\",\"params\":{\"mineralId\":\"The ID of the mineral under audition.\",\"report\":\"The audit status report of the mineral under audition.\"}},\"_checkAuditAndInspectionStatus(string)\":{\"details\":\"checks audit and inspection status Returns the status of both audit and inspection of mineral according to mineralId\"},\"_getMineralHistory(string)\":{\"details\":\"retrieves fll history of a mineral (for audit retail)\",\"returns\":{\"_0\":\"history of specified mineral sing its mineralId\"}},\"checkAuditAndInspectionStatus(string)\":{\"details\":\"checks audit and inspection status\",\"params\":{\"mineralId\":\"The ID of the mineral to check for audit and inspection status Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\"}},\"constructor\":{\"details\":\"connects RolesManager contract\"},\"getAllRoleCounts()\":{\"details\":\"Returns all role counts in a single call\",\"returns\":{\"auditorCount\":\"Number of auditors\",\"buyerCount\":\"Number of buyers\",\"inspectorCount\":\"Number of inspectors\",\"minerCount\":\"Number of miners\",\"refinerCount\":\"Number of refiners\",\"transporterCount\":\"Number of transporters\"}},\"getMineralDetails(string)\":{\"details\":\"retrieves mineral details of specified mineralId\",\"returns\":{\"_0\":\"mineral details of specified mineralId\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have a specific role\",\"params\":{\"role\":\"The role to query member count for\"},\"returns\":{\"count\":\"The number of accounts with the role\"}},\"getRolesForAddress(address)\":{\"details\":\"Returns all roles assigned to a given address\",\"params\":{\"account\":\"The address to check roles for\"},\"returns\":{\"roles\":\"An array of role names the address has\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasMinerRole(address)\":{\"details\":\"Roles helper functionschecks if an account has a specific role\",\"params\":{\"account\":\"The address of the account to checked with role association\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"inspectMineral(string,string)\":{\"details\":\"only the inspector can inspect mineralDetailsLogs audit report on every successful inspection\",\"params\":{\"mineralId\":\"The ID of the mineral under inspection\",\"report\":\"The inspection status report of the mineral under inspection\"}},\"isMineralAudited(string)\":{\"details\":\"checks if a mineral with the given ID is registered\",\"params\":{\"mineralId\":\"the ID of the mineral to check\"},\"returns\":{\"_0\":\"A boolean indicating whether the mineral is registered or not\"}},\"isMineralRegistered(string)\":{\"details\":\"checks if a mineral with the given ID is registered\",\"params\":{\"mineralId\":\"the ID of the mineral to check\"},\"returns\":{\"_0\":\"A boolean indicating whether the mineral is registered or not\"}},\"purchaseMineral(string)\":{\"details\":\"Only the buyer can purchase mineralDetails\",\"params\":{\"mineralId\":\"The ID of the mineral under purchase\"}},\"refineMineral(string,string)\":{\"details\":\"only the refiner can refiner a mineral\",\"params\":{\"mineralId\":\"The ID of the mineral under refinery\"}},\"registerMineral(string,string,uint256,string,uint256,string)\":{\"details\":\"Register a new mineral - only by miner.Every mineral is assigned a unique mineralId.\",\"params\":{\"_mineralType\":\"The type of a mineral.\",\"_name\":\"Mineral name.\",\"_origin\":\"Mineral Origin.\",\"_purityPercentage\":\"Mineral purity in percentage.\",\"_storageConditions\":\"Mineral Storage conditions.\",\"_weight\":\"Mineral weight in uint256.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferMineral(string,address,string,string)\":{\"details\":\"only the transporter can transport mineralDetails\",\"params\":{\"_destination\":\"The Destination area of the mineral(string)\",\"_origin\":\"The Original location of the mineral under transportation\",\"_receivingParty\":\"The address of the destination portal\",\"mineralId\":\"The ID of the mineral under transportation\"}},\"updateMineralLocation(string,string)\":{\"details\":\"updates the location of the mineral\",\"params\":{\"mineralId\":\"the ID of the mineral to update\",\"newLocation\":\"The new location of the mineral\"}},\"updateMineralStatus(string,string)\":{\"details\":\"Updates mineral details - only by authorized roles\",\"params\":{\"mineralId\":\"The ID of the mineral under update\",\"newStatus\":\"New status of the mineral\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_auditMineral(string,string)\":{\"notice\":\"Emits MineralAudited event.\"},\"inspectMineral(string,string)\":{\"notice\":\"Emits MineralInspected event on successful inspection\"},\"purchaseMineral(string)\":{\"notice\":\"Emits MineralPurchased event on successful purchase\"},\"refineMineral(string,string)\":{\"notice\":\"Emits MineralRefined event on successfl refining process\"},\"registerMineral(string,string,uint256,string,uint256,string)\":{\"notice\":\"Emits MineralRegistered event on successful registration.\"},\"transferMineral(string,address,string,string)\":{\"notice\":\"Emits MineralTransported on successful transportation\"},\"updateMineralLocation(string,string)\":{\"notice\":\"Emits MineralLocationUpdated event on successful location update!\"},\"updateMineralStatus(string,string)\":{\"notice\":\"Emits MineralUpdated event on successful updation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/MineralRegistry.sol\":\"MineralRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title RolesManager contract\\n * @author @0xJonaseb11\\n * It acts as the factory of all the roles in the whole supplychain\\n * It is where all the roles in the chain are assigned and granted. No any other contract can handle that\\n *\\n * It is a Modular contract\\n */\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\n\\ncontract RolesManager is AccessControl, Errors {\\n    /*/////////////////////////////////////////////////////\\n                           SUPPLYCHAIN ROLES\\n            /////////////////////////////////////////////////////*/\\n    bytes32 public constant MINER_ROLE = keccak256(\\\"MINER_ROLE\\\");\\n    bytes32 public constant REFINER_ROLE = keccak256(\\\"REFINER_ROLE\\\");\\n    bytes32 public constant TRANSPORTER_ROLE = keccak256(\\\"TRANSPORTER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTOR_ROLE\\\");\\n    bytes32 public constant BUYER_ROLE = keccak256(\\\"BUYER_ROLE\\\");\\n\\n    /*//////////////////////////////////////////////////////\\n                                 EVENTS\\n        //////////////////////////////////////////////////////*/\\n    event RoleAssigned(address indexed account, bytes32 indexed role, uint256 roleAssignedAt);\\n    event RoleRevoked(bytes32 role, address account, address revoker, uint256 roleRevokedAt);\\n\\n    event MineralRegistered(\\n        string mineralId,\\n        string mineralName,\\n        string mineralType,\\n        string origin,\\n        uint256 weight,\\n        uint256 purityPercentage,\\n        address indexed miner,\\n        uint256 registeredAt\\n    );\\n    event MineralRefined(string mineralId, string refineryReport, address indexed refiner, uint256 refinedAt);\\n    event MineralTransported(\\n        string mineralId,\\n        address indexed transporter,\\n        address receivingParty,\\n        string origin,\\n        string destination,\\n        uint256 transportedAt\\n    );\\n    event MineralInspected(string mineralId, string mineralStatus, address indexed inspector, uint256 inspectedAt);\\n    event MineralAudited(string mineralId, string status, address indexed auditor, uint256 auditedAt);\\n    event MineralPurchased(string mineralId, address indexed buyer, uint256 purchasedAt);\\n    event MineralReadyToTrade(string mineralId, address indexed ApprovedBy, string status, uint256 inspectionDate);\\n\\n    // For every assigned role\\n    event MinerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event RefinerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event TransporterRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event AuditorRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event InspectorRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event BuyerRoleAssigned(address indexed assignee, uint256 timestamp);\\n    event AdminRoleAssigned(address indexed assignee, uint256 timestamp);\\n    // For every revoked role\\n    event MinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event RefinerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event TransporterRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event AuditorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event InspectorRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event BuyerRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n    event AdminRoleRevoked(address indexed revokee, string reason, uint256 timestamp);\\n\\n    struct MineralDetails {\\n        string id;\\n        string name;\\n        string origin;\\n        string mineralType;\\n        uint256 weight;\\n        uint256 purityPercentage;\\n        string storageConditions;\\n        address registeredBy;\\n        string currentStatus;\\n        string currentLocation;\\n        address currentHandler;\\n        bool isPurchased;\\n        bool isRefined;\\n        bool isAudited;\\n        bool isInspected;\\n        uint256 timestamp;\\n    }\\n\\n    struct MineralHistory {\\n        string id;\\n        string fieldChanged;\\n        string newValue;\\n        address updatedBy;\\n        uint256 timestamp;\\n    }\\n\\n    uint256 private nonce = block.timestamp + block.number;\\n    mapping(string => MineralDetails) public mineralDetails;\\n    mapping(string => MineralHistory[]) public mineralHistories;\\n    mapping(bytes32 => uint256) public roleMemberCount;\\n\\n    // Set the deployer as the admin\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        roleMemberCount[DEFAULT_ADMIN_ROLE] = 1;\\n        emit AdminRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(MINER_ROLE, msg.sender);\\n        roleMemberCount[MINER_ROLE] = 1;\\n        emit MinerRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(AUDITOR_ROLE, msg.sender);\\n        roleMemberCount[AUDITOR_ROLE] = 1;\\n        emit AuditorRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(INSPECTOR_ROLE, msg.sender);\\n        roleMemberCount[INSPECTOR_ROLE] = 1;\\n        emit InspectorRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(BUYER_ROLE, msg.sender);\\n        roleMemberCount[BUYER_ROLE] = 1;\\n        emit BuyerRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(REFINER_ROLE, msg.sender);\\n        roleMemberCount[REFINER_ROLE] = 1;\\n        emit RefinerRoleAssigned(msg.sender, block.timestamp);\\n\\n        _setupRole(TRANSPORTER_ROLE, msg.sender);\\n        roleMemberCount[TRANSPORTER_ROLE] = 1;\\n        emit TransporterRoleAssigned(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev checks if sender has specific role\\n     */\\n    modifier restrictedToRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) {\\n            revert InsufficientPermissionsToPerformAction(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyNonZeroAddress(address account) {\\n        if (account == address(0)) {\\n            revert InvalidAccountAddress();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyValidMineralId(string memory mineralId) {\\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\\n            revert InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ATTENTION HERE - CHECKING VALIDITY OF A MINERAL\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\        \\n    //////////////////////////////////////////////////////////////*/\\n    modifier onlyValidMineral(string memory mineralId) virtual {\\n        if (!isMineralRegistered(mineralId) || bytes(mineralId).length == 0) {\\n            revert InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        _;\\n    }\\n\\n    /*////////////////////////////////////////////////////\\n            =====================================================\\n            ///////// ROLE-BASED FUNCTIONALITY FUNCTIONS ////////\\n            ====================================================\\n            //////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ================================================================\\n                              MINING ENTERPRISE PORTAL\\n        =================================================================\\n       //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Register a new mineral - only by miner.\\n     * @dev Every mineral is assigned a unique mineralId.\\n     * @param _name Mineral name.\\n     * @param _mineralType The type of a mineral.\\n     * @param _weight Mineral weight in uint256.\\n     * @param _origin Mineral Origin.\\n     * @param _purityPercentage Mineral purity in percentage.\\n     * @param _storageConditions Mineral Storage conditions.\\n     * @notice Emits MineralRegistered event on successful registration.\\n     */\\n    function registerMineral(\\n        string memory _name,\\n        string memory _mineralType,\\n        uint256 _weight,\\n        string memory _origin,\\n        uint256 _purityPercentage,\\n        string memory _storageConditions\\n    ) external virtual restrictedToRole(MINER_ROLE) returns (string memory) {\\n        if (bytes(_name).length == 0) revert RolesManager__InvalidMineralName();\\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\\n\\n        if (bytes(_mineralType).length == 0) revert RolesManager__InvalidMineralType();\\n\\n        if (_weight == 0) revert RolesManager__InvalidMineralWeight();\\n\\n        if (_purityPercentage == 0 || _purityPercentage > 100) revert RolesManager__InvalidMineralPurityPercentage();\\n\\n        if (_purityPercentage <= 80) revert RolesManager__MineralPurityPercentageTooLowToRegister(_purityPercentage);\\n\\n        if (bytes(_storageConditions).length == 0) revert RolesManager__InvalidMineralStorageConditions();\\n\\n        string memory mineralId = _generateHashedMineralId(_mineralType);\\n\\n        mineralDetails[mineralId] = MineralDetails({\\n            id: mineralId,\\n            name: _name,\\n            origin: _origin,\\n            mineralType: _mineralType,\\n            weight: _weight,\\n            purityPercentage: _purityPercentage,\\n            storageConditions: _storageConditions,\\n            registeredBy: msg.sender,\\n            currentStatus: \\\"Raw\\\",\\n            currentLocation: \\\"Mining Center\\\",\\n            currentHandler: msg.sender,\\n            isPurchased: false,\\n            isRefined: false,\\n            isAudited: false,\\n            isInspected: false,\\n            timestamp: block.timestamp\\n        });\\n\\n        // record initial mineral history\\n        mineralHistories[mineralId].push(\\n            MineralHistory({\\n                id: mineralId,\\n                fieldChanged: \\\"Registered\\\",\\n                newValue: string(abi.encodePacked(\\\"Origin: \\\", _origin)),\\n                updatedBy: msg.sender,\\n                timestamp: block.timestamp\\n            })\\n        );\\n\\n        emit MineralRegistered(\\n            mineralId,\\n            _name,\\n            _mineralType,\\n            _origin,\\n            _weight,\\n            _purityPercentage,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        return mineralId;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                              PROCESSING ENTERPRISE\\n        ===============================================================                    \\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*///////////////////////////////////////////////\\n                              REFINER\\n        ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the refiner can refiner a mineral\\n     * @param mineralId The ID of the mineral under refinery\\n     * @notice Emits MineralRefined event on successfl refining process\\n     */\\n    function refineMineral(string memory mineralId, string memory report) public restrictedToRole(REFINER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isRefined == true) revert RolesManager__MineralAlreadyRefined(mineralId);\\n\\n        mineralDetails[mineralId].isRefined = true;\\n\\n        emit MineralRefined(mineralId, report, msg.sender, block.timestamp);\\n    }\\n\\n    /*////////////////////////////////////////////////\\n                              TRANSPORTER\\n          ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the transporter can transport mineralDetails\\n     * @param mineralId The ID of the mineral under transportation\\n     * @param _receivingParty The address of the destination portal\\n     * @param _origin The Original location of the mineral under transportation\\n     * @param _destination The Destination area of the mineral(string)\\n     * @notice Emits MineralTransported on successful transportation\\n     */\\n    function transferMineral(\\n        string memory mineralId,\\n        address _receivingParty,\\n        string memory _origin,\\n        string memory _destination\\n    ) public virtual restrictedToRole(TRANSPORTER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (_receivingParty == address(0)) revert RolesManager__InvalidReceivingPartyAddress();\\n\\n        if (bytes(_origin).length == 0) revert RolesManager__InvalidMineralOrigin();\\n\\n        if (bytes(_destination).length == 0) revert RolesManager__InvalidMineralDestination();\\n\\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\\n\\n        mineralDetails[mineralId].currentHandler = msg.sender;\\n\\n        emit MineralTransported(mineralId, msg.sender, _receivingParty, _origin, _destination, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                     SUPPLYCHAIN VALIDATION PORTAL\\n        ===============================================================\\n        //////////////////////////////////////////////////////////////*/\\n\\n    /*///////////////////////////////////////////////\\n                               INSPECTOR\\n            ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the inspector can inspect mineralDetails\\n     * @param mineralId The ID of the mineral under inspection\\n     * @param report The inspection status report of the mineral under inspection\\n     * @notice Emits MineralInspected event on successful inspection\\n     * @dev Logs audit report on every successful inspection\\n     */\\n    function inspectMineral(string memory mineralId, string memory report) public restrictedToRole(INSPECTOR_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isInspected == true) revert RolesManager__MineralAlreadyInspected(mineralId);\\n\\n        mineralDetails[mineralId].isInspected = true;\\n\\n        emit MineralInspected(mineralId, report, msg.sender, block.timestamp);\\n\\n        /*//////////////////////////////////////////////////\\n                          HANDLE INSPECTION REPORTING\\n           ///////////////////////////////////////////////////*/\\n    }\\n\\n    /*/////////////////////////////////////////////\\n                               AUDITOR\\n            ////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev only the auditor can audit mineralDetails.\\n     * @dev Logs audit report on every successful audit.\\n     * @param mineralId The ID of the mineral under audition.\\n     * @param report The audit status report of the mineral under audition.\\n     * @notice Emits MineralAudited event.\\n     */\\n    function _auditMineral(\\n        string memory mineralId,\\n        string memory report\\n    ) public /*virtual*/ restrictedToRole(AUDITOR_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isAudited == true) revert RolesManager__MineralAlreadyAudited(mineralId);\\n\\n        mineralDetails[mineralId].isAudited = true;\\n\\n        emit MineralAudited(mineralId, report, msg.sender, block.timestamp);\\n\\n        /*//////////////////////////////////////////////////\\n                          HANDLE AUDIT REPORTING\\n           ///////////////////////////////////////////////////*/\\n    }\\n\\n    /**\\n     * @dev Only the buyer can purchase mineralDetails\\n     * @param mineralId The ID of the mineral under purchase\\n     * @notice Emits MineralPurchased event on successful purchase\\n     */\\n    function purchaseMineral(string memory mineralId) public restrictedToRole(BUYER_ROLE) {\\n        // if (\\n        //     keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n        //     bytes(mineralId).length == 0\\n        // ) {\\n        //     revert RolesManager__InvalidMineralIdOrNotFound();\\n        // }\\n\\n        if (mineralDetails[mineralId].isPurchased == true) revert RolesManager__MineralAlreadyPurchased(mineralId);\\n\\n        (bool isAudited, bool isInspected) = checkAuditAndInspectionStatus(mineralId);\\n\\n        if (!(isAudited && isInspected)) revert RolesManager__MineralNotMarketReady(mineralId);\\n\\n        // require(mineralDetails[mineralId].currentHandler == msg.sender, \\\"You are not the assigned buyer for this mineral!!\\\");\\n\\n        mineralDetails[mineralId].isPurchased = true;\\n        mineralDetails[mineralId].currentHandler = msg.sender;\\n\\n        emit MineralPurchased(mineralId, msg.sender, block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     ROLESMANAGER HELPER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ADMIN FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ////////////////////////////////////////////////\\n    /////// ROLEMANAGEMENT FUNCTIONS ////////////////\\n    ////////////////////////////////////////////////\\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n\\n    /*////////////////////////////////////////////////////\\n                  ROLE MANAGEMENT FUNCTIONS\\n    ////////////////////////////////////////////////////*/\\n\\n    function assignMiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasMinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(MINER_ROLE, account);\\n        roleMemberCount[MINER_ROLE]++;\\n        emit MinerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignRefiner(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasRefinerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(REFINER_ROLE, account);\\n        roleMemberCount[REFINER_ROLE]++;\\n        emit RefinerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignTransporter(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasTransporterRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(TRANSPORTER_ROLE, account);\\n        roleMemberCount[TRANSPORTER_ROLE]++;\\n        emit TransporterRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignAuditor(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasAuditorRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(AUDITOR_ROLE, account);\\n        roleMemberCount[AUDITOR_ROLE]++;\\n        emit AuditorRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignInspector(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasInspectorRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(INSPECTOR_ROLE, account);\\n        roleMemberCount[INSPECTOR_ROLE]++;\\n        emit InspectorRoleAssigned(account, block.timestamp);\\n    }\\n\\n    function assignBuyer(address account) external onlyNonZeroAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (hasBuyerRole(account)) revert RolesManager__AccountAlreadyHasRole();\\n        _grantRole(BUYER_ROLE, account);\\n        roleMemberCount[BUYER_ROLE]++;\\n        emit BuyerRoleAssigned(account, block.timestamp);\\n    }\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n\\n    function revokeMiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasMinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(MINER_ROLE, account);\\n        if (roleMemberCount[MINER_ROLE] > 0) {\\n            roleMemberCount[MINER_ROLE]--;\\n        }\\n        emit MinerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeRefiner(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRefinerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(REFINER_ROLE, account);\\n\\n        if (roleMemberCount[REFINER_ROLE] > 0) {\\n            roleMemberCount[REFINER_ROLE]--;\\n        }\\n        emit RefinerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeTransporter(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasTransporterRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(TRANSPORTER_ROLE, account);\\n        if (roleMemberCount[TRANSPORTER_ROLE] > 0) {\\n            roleMemberCount[TRANSPORTER_ROLE]--;\\n        }\\n        emit TransporterRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeInspector(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasInspectorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(INSPECTOR_ROLE, account);\\n        if (roleMemberCount[INSPECTOR_ROLE] > 0) {\\n            roleMemberCount[INSPECTOR_ROLE]--;\\n        }\\n        emit InspectorRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeAuditor(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasAuditorRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(AUDITOR_ROLE, account);\\n        if (roleMemberCount[AUDITOR_ROLE] > 0) {\\n            roleMemberCount[AUDITOR_ROLE]--;\\n        }\\n        emit AuditorRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    function revokeBuyer(address account, string memory reason) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasBuyerRole(account)) revert RolesManager__AccountDoesNotHaveRole();\\n        revokeRole(BUYER_ROLE, account);\\n        if (roleMemberCount[BUYER_ROLE] > 0) {\\n            roleMemberCount[BUYER_ROLE]--;\\n        }\\n        emit BuyerRoleRevoked(account, reason, block.timestamp);\\n    }\\n\\n    /*/////////////////////////////////////////////////////\\n                  NEW ROLE COUNT FUNCTIONS\\n    /////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the number of accounts that have a specific role\\n     * @param role The role to query member count for\\n     * @return count The number of accounts with the role\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256 count) {\\n        if (!isValidRole(role)) revert RolesManager__InvalidRole();\\n        return roleMemberCount[role];\\n    }\\n\\n    /**\\n     * @dev Returns all role counts in a single call\\n     * @return minerCount Number of miners\\n     * @return refinerCount Number of refiners\\n     * @return transporterCount Number of transporters\\n     * @return auditorCount Number of auditors\\n     * @return inspectorCount Number of inspectors\\n     * @return buyerCount Number of buyers\\n     */\\n    function getAllRoleCounts()\\n        public\\n        view\\n        returns (\\n            uint256 minerCount,\\n            uint256 refinerCount,\\n            uint256 transporterCount,\\n            uint256 auditorCount,\\n            uint256 inspectorCount,\\n            uint256 buyerCount\\n        )\\n    {\\n        return (\\n            roleMemberCount[MINER_ROLE],\\n            roleMemberCount[REFINER_ROLE],\\n            roleMemberCount[TRANSPORTER_ROLE],\\n            roleMemberCount[AUDITOR_ROLE],\\n            roleMemberCount[INSPECTOR_ROLE],\\n            roleMemberCount[BUYER_ROLE]\\n        );\\n    }\\n\\n    // ... (keep all your existing functions below this point) ...\\n    // Only modification needed is to ensure the _setupRole function also increments counters:\\n    function _setupRole(bytes32 role, address account) internal override {\\n        _grantRole(role, account);\\n\\n        roleMemberCount[role]++;\\n    }\\n\\n    /**\\n     * @dev Revokes role from an account - onlydmin\\n     * @param account The address of the account to be revoked role by the admin\\n     * @notice Emits event of the revoked role\\n     */\\n\\n    /*/////////////////////////////////////////////////////\\n   ====================================================\\n            HELPER FUNCTIONS SECTION\\n   ====================================================\\n   /////////////////////////////////////////////////////*/\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE OWNERSHIP CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Returns all roles assigned to a given address\\n     * @param account The address to check roles for\\n     * @return roles An array of role names the address has\\n     */\\n    function getRolesForAddress(\\n        address account\\n    ) public view onlyNonZeroAddress(account) returns (string[] memory roles) {\\n        // Count how many roles the address has\\n        uint256 roleCount = 0;\\n\\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) roleCount++;\\n        if (hasRole(MINER_ROLE, account)) roleCount++;\\n        if (hasRole(REFINER_ROLE, account)) roleCount++;\\n        if (hasRole(TRANSPORTER_ROLE, account)) roleCount++;\\n        if (hasRole(AUDITOR_ROLE, account)) roleCount++;\\n        if (hasRole(INSPECTOR_ROLE, account)) roleCount++;\\n        if (hasRole(BUYER_ROLE, account)) roleCount++;\\n\\n        // Initialize array with the counted size\\n        roles = new string[](roleCount);\\n        uint256 index = 0;\\n\\n        // Populate the array with role names\\n        if (hasRole(DEFAULT_ADMIN_ROLE, account)) {\\n            roles[index] = \\\"ADMIN\\\";\\n            index++;\\n        }\\n        if (hasRole(MINER_ROLE, account)) {\\n            roles[index] = \\\"MINER\\\";\\n            index++;\\n        }\\n        if (hasRole(REFINER_ROLE, account)) {\\n            roles[index] = \\\"REFINER\\\";\\n            index++;\\n        }\\n        if (hasRole(TRANSPORTER_ROLE, account)) {\\n            roles[index] = \\\"TRANSPORTER\\\";\\n            index++;\\n        }\\n        if (hasRole(AUDITOR_ROLE, account)) {\\n            roles[index] = \\\"AUDITOR\\\";\\n            index++;\\n        }\\n        if (hasRole(INSPECTOR_ROLE, account)) {\\n            roles[index] = \\\"INSPECTOR\\\";\\n            index++;\\n        }\\n        if (hasRole(BUYER_ROLE, account)) {\\n            roles[index] = \\\"BUYER\\\";\\n            index++;\\n        }\\n\\n        return roles;\\n    }\\n\\n    // function _setupRole(bytes32 role, address account) internal virtual {\\n    //     __grantRole(role, account);\\n    // }\\n\\n    /**\\n     ** @dev Roles helper functions\\n     * @dev checks if an account has a specific role\\n     * @param account The address of the account to checked with role association\\n     */\\n    function hasMinerRole(address account) public view returns (bool) {\\n        return hasRole(MINER_ROLE, account);\\n    }\\n    function hasRefinerRole(address account) public view returns (bool) {\\n        return hasRole(REFINER_ROLE, account);\\n    }\\n    function hasTransporterRole(address account) public view returns (bool) {\\n        return hasRole(TRANSPORTER_ROLE, account);\\n    }\\n    function hasInspectorRole(address account) public view returns (bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n    function hasAuditorRole(address account) public view returns (bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n    function hasBuyerRole(address account) public view returns (bool) {\\n        return hasRole(BUYER_ROLE, account);\\n    }\\n    function hasAdminRole(address account) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    // Helper function to validate the role\\n    function isValidRole(bytes32 role) private pure returns (bool) {\\n        return\\n            role == MINER_ROLE ||\\n            role == REFINER_ROLE ||\\n            role == TRANSPORTER_ROLE ||\\n            role == AUDITOR_ROLE ||\\n            role == INSPECTOR_ROLE ||\\n            role == BUYER_ROLE;\\n    }\\n\\n    /**\\n    * @dev checks audit and inspection status\\n    * @param mineralId The ID of the mineral to check for audit and inspection status\\n\\n    * Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId\\n    */\\n    function checkAuditAndInspectionStatus(\\n        string memory mineralId\\n    ) public virtual restrictedToRole(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert RolesManager__InvalidMineralIdOrNotFound();\\n        }\\n\\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\\n            emit MineralReadyToTrade(mineralId, msg.sender, \\\"TradingReady\\\", block.timestamp);\\n        } else {\\n            revert RolesManager__MineralNotMarketReady(mineralId);\\n        }\\n\\n        isAudited = mineralDetails[mineralId].isAudited;\\n        isInspected = mineralDetails[mineralId].isInspected;\\n\\n        return (isAudited, isInspected);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            GETTERS - For Traceability\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getMineralHistory(string memory mineralId) public view virtual returns (MineralHistory[] memory) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert RolesManager__InvalidMineralIdOrNotFound();\\n        }\\n\\n        return mineralHistories[mineralId];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n    ===============================================================\\n         MINERAL REGISTRATION HELPER FUNCTIONS SECTION\\n    ===============================================================\\n    ////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev checks if a mineral with the given ID is registered\\n     * @param mineralId the ID of the mineral to check\\n     * @return A boolean indicating whether the mineral is registered or not\\n     */\\n    function isMineralRegistered(string memory mineralId) public virtual returns (bool) {\\n        if (bytes(mineralId).length == 0) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        if (keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId))) {\\n            revert MineralRegistry__MineralNotRegistered(mineralId);\\n        }\\n\\n        return true;\\n    }\\n\\n    //////////////////////////////////////////////////////\\n    //////// GENERATE HASHED MINERALID FOR UNIQUENESS/////\\n    //////////////////////////////////////////////////////\\n    function _generateHashedMineralId(string memory mineralType) internal returns (string memory) {\\n        bytes32 fullHash = keccak256(abi.encodePacked(mineralType, msg.sender, block.timestamp, nonce++));\\n\\n        // Convert first 4 bytes (8 hex characters) into hex string with \\\"0x\\\"\\n        bytes memory shortHex = new bytes(10); // 2 for \\\"0x\\\", 8 for hex chars\\n        shortHex[0] = \\\"0\\\";\\n        shortHex[1] = \\\"x\\\";\\n        for (uint i = 0; i < 4; i++) {\\n            shortHex[2 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] >> 4));\\n            shortHex[3 + i * 2] = _nibbleToHexChar(uint8(fullHash[i] & 0x0f));\\n        }\\n\\n        return string(abi.encodePacked(mineralType, \\\"-\\\", string(shortHex)));\\n    }\\n\\n    // helper: convert nibble to hex char (0-9, a-f)\\n    function _nibbleToHexChar(uint8 nibble) internal pure returns (bytes1) {\\n        return nibble < 10 ? bytes1(nibble + 0x30) : bytes1(nibble + 0x61 - 10);\\n    }\\n\\n    ///////////////////////////////////////////////\\n    //////// getting all registered minerals /////\\n    // //////////////////////////////////////////////\\n    // function getAllRegisteredMineral() public view returns(MineralDetails[] memory mineralDetails) {\\n    //     return mineralDetails;\\n\\n    // }\\n}\\n\",\"keccak256\":\"0x987f06a5daf816abdb2f33f8ff50dcf18b6f1f6e557580abd2745b9af333f490\",\"license\":\"MIT\"},\"contracts/modules/MineralRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title MineralRegistry contract\\n * @author @0xJonaseb11\\n * @dev It is a mineral factory contract. It is where new minerals are registered, updated and gotten till next step\\n * @dev Minerals are gotten from mineral registry contract and all other operations proceed right from there!!\\n * @notice It is the base contract of the supplychain\\n */\\n\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\n\\ncontract MineralRegistry is RolesManager {\\n    RolesManager private rolesManager;\\n    // uint256 private nextMineralId = 1;\\n\\n    // Events for transparency\\n    event MineralUpdated(\\n        string mineralId,\\n        string updatedField,\\n        string newValue,\\n        address indexed updatedBy,\\n        uint256 updatedAt\\n    );\\n    event MineralLocationUpdated(\\n        string mineralId,\\n        string previousLocation,\\n        string newLocation,\\n        address indexed tranporter\\n    );\\n\\n    /**\\n     * @dev connects RolesManager contract\\n     */\\n    constructor(address rolesManagerAddress) {\\n        rolesManager = RolesManager(rolesManagerAddress);\\n    }\\n\\n    /**\\n     * @dev Restrict actions to specific roles\\n     */\\n    modifier onlyAuthorized(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) {\\n            revert InsufficientPermissionsToPerformAction(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Updates mineral details - only by authorized roles\\n     * @param mineralId The ID of the mineral under update\\n     * @param newStatus New status of the mineral\\n     * @notice Emits MineralUpdated event on successful updation\\n     */\\n    function updateMineralStatus(string memory mineralId, string memory newStatus) public {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        if (bytes(newStatus).length == 0) revert MineralRegistry__InvalidMineralStatus();\\n\\n        if (\\n            !hasRole(REFINER_ROLE, msg.sender) ||\\n            !hasRole(TRANSPORTER_ROLE, msg.sender) ||\\n            !hasRole(AUDITOR_ROLE, msg.sender) ||\\n            !hasRole(INSPECTOR_ROLE, msg.sender)\\n        ) {\\n            revert InsufficientPermissionsToPerformAction(msg.sender);\\n        }\\n\\n        mineralDetails[mineralId].currentStatus = newStatus;\\n        mineralDetails[mineralId].timestamp = block.timestamp;\\n\\n        // record mineral history\\n        mineralHistories[mineralId].push(\\n            MineralHistory({\\n                id: mineralId,\\n                fieldChanged: \\\"Status\\\",\\n                newValue: newStatus,\\n                updatedBy: msg.sender,\\n                timestamp: block.timestamp\\n            })\\n        );\\n\\n        emit MineralUpdated(mineralId, \\\"Status\\\", newStatus, msg.sender, block.timestamp);\\n    }\\n\\n    /*////////////////////////////////////////////////////////////\\n        =============================================================\\n                       TRANSPORTATION ENTERPRISE\\n        =============================================================               \\n        ////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev updates the location of the mineral\\n     * @param mineralId the ID of the mineral to update\\n     * @param newLocation The new location of the mineral\\n     * @notice Emits MineralLocationUpdated event on successful location update!\\n     */\\n    function updateMineralLocation(\\n        string memory mineralId,\\n        string memory newLocation\\n    ) public onlyAuthorized(TRANSPORTER_ROLE) {\\n        // custom error handling\\n\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        if (bytes(newLocation).length == 0) {\\n            revert MineralRegistry__InvalidMineralLocation();\\n        }\\n\\n        string memory previousLocation = mineralDetails[mineralId].currentLocation;\\n        mineralDetails[mineralId].currentLocation = newLocation;\\n\\n        emit MineralLocationUpdated(mineralId, previousLocation, newLocation, msg.sender);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        ===============================================================\\n                     SUPPLYCHAIN VALIDATION PORTAL\\n        ===============================================================\\n        //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev retrieves mineral details of specified mineralId\\n     * @return mineral details of specified mineralId\\n     */\\n    function getMineralDetails(string memory mineralId) public view virtual returns (MineralDetails memory) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        return mineralDetails[mineralId];\\n    }\\n\\n    /**\\n     * @dev retrieves fll history of a mineral (for audit retail)\\n     * @return history of specified mineral sing its mineralId\\n     */\\n    function _getMineralHistory(string memory mineralId /*override*/) public view returns (MineralHistory[] memory) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n        return mineralHistories[mineralId];\\n    }\\n\\n    /**\\n     * @dev checks if a mineral with the given ID is registered\\n     * @param mineralId the ID of the mineral to check\\n     * @return A boolean indicating whether the mineral is registered or not\\n     */\\n\\n    function isMineralAudited(string memory mineralId) public view returns (bool) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        return mineralDetails[mineralId].isAudited;\\n    }\\n\\n    function isMineralInspected(string memory mineralId) public view returns (bool) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        return mineralDetails[mineralId].isInspected;\\n    }\\n\\n    /*///////////////////////////////////////////////\\n                         AUDITOR\\n        ///////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev enables an auditor to audit a mineral\\n     * @notice Emits MineralAudited event on successful auditing of a mineral\\n     */\\n\\n    /*///////////////////////////////////////////////////////\\n                          INSPECTOR\\n        ///////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev enables only the inspector to audit a mineralDetails\\n     * @notice Emits MineralInspected even\\n     */\\n\\n    /**\\n     * @dev checks audit and inspection status\\n     * Returns the status of both audit and inspection of mineral according to mineralId\\n     */\\n    function _checkAuditAndInspectionStatus(\\n        string memory mineralId\\n    ) public /*override*/ onlyAuthorized(DEFAULT_ADMIN_ROLE) returns (bool isAudited, bool isInspected) {\\n        if (\\n            keccak256(bytes(mineralDetails[mineralId].id)) != keccak256(bytes(mineralId)) ||\\n            bytes(mineralId).length == 0\\n        ) {\\n            revert MineralRegistry__InvalidMineralIdOrNotFound(mineralId);\\n        }\\n\\n        if (mineralDetails[mineralId].isAudited && mineralDetails[mineralId].isInspected) {\\n            emit MineralReadyToTrade(mineralId, msg.sender, \\\"TradingReady\\\", block.timestamp);\\n        } else {\\n            revert MineralNotReadyToTrade(mineralId);\\n        }\\n\\n        // explicitly return audit and inspection results\\n        return (mineralDetails[mineralId].isAudited, mineralDetails[mineralId].isInspected);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            HELPER FUNCTIONS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev helper function to convert address to string\\n     * @return string of address\\n     */\\n    function addressToString(address _address) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(_address)));\\n        bytes memory characters = \\\"ABACDEFGHIJ1245678909876\\\";\\n\\n        bytes memory str = new bytes(42);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            str[2 + i * 2] = characters[uint8(value[i + 12] >> 4)];\\n            str[3 + i * 2] = characters[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x95f7962555c34f590a380365b7c100e7a24ce3006d0c78b47a48c5a60ee27a73\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract Errors {\\n    /*//////////////////////////////////////////////////////////////\\n                        MINERALREGISTRY__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error MineralRegistry__MineralNotRegistered(string mineralId);\\n    error MineralRegistry__MineralAlreadyPurchased();\\n    error MineralRegistry__MineralAlreadyAudited();\\n    error MineralRegistry__MineralAlreadyInspected();\\n    error MineralRegistry__MineralNotAudited();\\n    error MineralRegistry__MineralNotInspected();\\n\\n    error MineralRegistry__InvalidMineralDetails();\\n    error MineralRegistry__InvalidMineralIdOrNotFound(string mineralId);\\n    error MineralRegistry__InvalidMineralStatus();\\n    error MineralRegistry__InvalidMineralName();\\n    error MineralRegistry__InvalidMineralOrigin();\\n    error MineralRegistry__InvalidMineralType();\\n    error MineralRegistry__InvalidMineralWeight();\\n    error MineralRegistry__InvalidMineralPurityPercentage();\\n    error MineralRegistry__InvalidMineralStorageConditions();\\n    error MineralRegistry__InvalidMineralLocation();\\n    error MineralRegistry__InvalidReceivingPartyAddress();\\n    error MineralRegistry__InvalidMineralDestination();\\n\\n    error MineralNotReadyToTrade(string mineralId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ROLESMANAGER__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n    error RolesManager__MineralAlreadyRefined(string mineralId);\\n    error RolesManager__MineralAlreadyPurchased(string mineralId);\\n    error RolesManager__MineralAlreadyInspected(string mineralId);\\n    error RolesManager__MineralAlreadyAudited(string mineralId);\\n    error RolesManager__NotTheAssignedBuyer(address caller);\\n\\n    error RolesManager__InvalidMineralName();\\n    error RolesManager__InvalidMineralOrigin();\\n    error RolesManager__InvalidMineralDestination();\\n\\n    error RolesManager__MineralNotMarketReady(string mineralId);\\n\\n    error RolesManager__InvalidMineralIdOrNotFound();\\n    error RolesManager__InvalidMineralType();\\n    error RolesManager__InvalidReceivingPartyAddress();\\n    error RolesManager__InvalidMineralStorageConditions();\\n    error RolesManager__InvalidMineralPurityPercentage();\\n    error RolesManager__MineralPurityPercentageTooLowToRegister(uint256 purityPercentage);\\n    error RolesManager__InvalidMineralWeight();\\n\\n    error RolesManager__InvalidAddress();\\n    error RolesManager__InvalidRole();\\n\\n    // Roles Assignment and revocation\\n    error RolesManager__AccountAlreadyHasRole();\\n    error RolesManager__AccountDoesNotHaveRole();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            DISPUTERESOLUTION__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n    error DisputeResolution__InvalidMineralIdOrNotFound();\\n    error DisputeResolution__InvalidDisputeDefendantAddress();\\n    error DisputeResolution__InvalidDisputeDetails();\\n    error DisputeResolution__InvalidDisputeEvidence();\\n    error DisputeResolution__InvalidDisputeIdOrNotFound();\\n    error DisputeResolution__InvalidResolutionDetails();\\n    error DisputeResolution__DisputeStatusNotPendingOrEscalated();\\n    error DisputeResolution__DisputeStatusNotPending(uint256 disputeId);\\n    error DisputeResolution__NotEligibleToVote(address caller);\\n    error DisputeResolution__AlreadyVoted(address caller);\\n    error DisputeResolution__DisputeEscalated_UnableToVote(uint256 disputeId);\\n    error DisputeResolution__VotingPeriodStillActive();\\n    error DisputeResolution__DisputeNotEscalated(uint256 disputeId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MINERALWAREHOUSE__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error MineralWarehouse__InvalidTokenAddress(address tokenAddress);\\n    error MineralWarehouse__MineralNotRefined(string mineralId);\\n    error MineralWarehouse__InvalidNumberOfPrices();\\n    error MineralWarehouse__UnacceptedToken(address tokenAddress);\\n    error MineralWarehouse__UnacceptedTokens(address[] tokenAddresses);\\n    error MineralWarehouse__MineralNotMarketReady(string mineralId);\\n    error MineralWarehouse__InvalidMineralPrice();\\n    error MineralWarehouse__MineralAlreadySold(string mineralId);\\n    error MineralWarehouse__UnauthorizedSeller(address seller);\\n    error MineralNotMarketReady(string mineralId);\\n    error MineralWarehouse__IncorrectETHAmount();\\n    error MineralWarehouse__ETHTransferFailed();\\n    error MineralWarehouse__InvalidTokenPrice();\\n\\n    error MineralWarehouse__MismatchedArrays();\\n    error MineralWarehouse__InvalidETHPrice();\\n    error MineralWarehouse__TokenNotAccepted(address tokenAddress);\\n\\n    error MineralWarehouse__MineralNotFoundInWarehouse(string mineralId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            TOKENISATION__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error Tokenization__TokenAlreadyExists(uint256 tokenId);\\n    error Tokenization__TokenIsAlreadyMinted(uint256 tokenId);\\n    error Tokenization__InvalidTokenIdOrNotFound(uint256 tokenId);\\n    error Tokenization__CallerNotMineralTokenOwner(uint256 tokenId, address caller);\\n    error Tokenization__InvalidTokenId(uint256 tokenId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            TRANSACTIONlOG__CUSTOM ERRORS\\n       //////////////////////////////////////////////////////////////*/\\n    error TransactionLog__InvalidOperationType();\\n    error TransactionLog__InvalidOperationIndex(uint256 index);\\n    error TransactionLog__InvalidTransactionIdOrNotFound(uint256 transactionId);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        SUPPLYCHAINVALIDATOR__CUSTOM ERRORS\\n        //////////////////////////////////////////////////////////////*/\\n\\n    error SupplychainValidator__InvalidMineralIdOrNotFound(string mineralId);\\n    error SupplychainValidator__InvalidMineralTransactionHistory();\\n    error SupplychainValidator__InvalidMineralOwnershipChain();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             GLOBAL ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n    error InvalidAccountAddress();\\n    error ERC20TokenTransferFailed(address token, uint256 tokenAmount);\\n    error InvalidPaymentMethods();\\n    error InvalidMineralIdOrNotFound(string mineralId);\\n    error InsufficientPermissionsToPerformAction(address caller);\\n\\n    /////////////////////////////////////\\n    // LOGISTICS MANAGER ERRORS /////////\\n    /////////////////////////////////////\\n    error TransportRequestAlreadyExists(string mineralId);\\n    error AddressDoesNotHaveRequiredRole(address caller, bytes32 role);\\n    error NotAssignedTransporter(string mineralId, address caller);\\n    error InvalidTransportStateTransition(string currentStatus, string attemptedStatus);\\n}\\n\",\"keccak256\":\"0x9b1b8d0828a0d7960988398eef2b8605af3485151b661a3bc695eb4362b00e38\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620005fa57601f6200597938819003918201601f1916830192916001600160401b03841183851017620005ff5780839260409586528339602092839181010312620005fa57516001600160a01b0381169190829003620005fa57434201804211620005e45760019081556000808052808352848120338252835260ff80868320541615620005ad575b818052600490818552868320805490600019918281146200059a5786019055838052828652848885205587514281527f458ea7e03b3466b3cf9bc2d66ddea8b11fe9469982816f42666888e6c8c6e664873392a27fa952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7280855284875288852033865287528289862054161562000563575b80855283875288852080548381146200047457870190558452828652848885205587514281527f593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf559873392a27f59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f58085528487528885203386528752828986205416156200052c575b80855283875288852080548381146200047457870190558452828652848885205587514281527f4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb3873392a27f273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0808552848752888520338652875282898620541615620004f5575b80855283875288852080548381146200047457870190558452828652848885205587514281527f49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e092873392a27ff8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90e808552848752888520338652875282898620541615620004be575b80855283875288852080548381146200047457870190558452828652848885205587514281527ff8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e97505873392a27fa977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4d80855284875288852033865287528289862054161562000487575b80855283875288852080548381146200047457870190558452828652848885205587514281527f4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be751873392a27fddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb39182855284875288852033865287528885205416156200043d575b8184528286528784209081549081146200042a57850190558252835284902055825142815233917f964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a691a2600580546001600160a01b031916919091179055516153439081620006168239f35b634e487b7160e01b855260118452602485fd5b81845283865287842033855286528784208560ff19825416179055333383600080516020620059598339815191528780a4620003be565b634e487b7160e01b875260118652602487fd5b80855284875288852033865287528885208660ff19825416179055333382600080516020620059598339815191528880a462000337565b80855284875288852033865287528885208660ff19825416179055333382600080516020620059598339815191528880a4620002b0565b80855284875288852033865287528885208660ff19825416179055333382600080516020620059598339815191528880a462000229565b80855284875288852033865287528885208660ff19825416179055333382600080516020620059598339815191528880a4620001a2565b80855284875288852033865287528885208660ff19825416179055333382600080516020620059598339815191528880a46200011b565b634e487b7160e01b865260118552602486fd5b81805281845285822033835284528582208360ff19825416179055333383600080516020620059598339815191528180a46200008b565b634e487b7160e01b600052601160045260246000fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146143b1575080630958fc2d146143085780630dacad2e1461425f578063126ee33814613f58578063129b5c4514613cca5780631c7588fc14613b7b578063248a9ca314613b4c5780632f2ff15d14613a99578063309514df14613a255780633499c3a2146139c357806335ba6207146138bd57806336568abe1461382b5780633a7adea5146129fd578063480d1dd3146129545780634e2a3109146128495780634eabbe77146128205780635aee1b15146125fd5780636377741d146125545780636394f6e61461252b5780636e1d616e1461250257806370e22e42146124a057806375a2b0d4146122e757806379451cd7146122be5780637a01a1da146122955780637ae9c160146122215780637cde2b9914612116578063826fe0f514611fb65780638850845f14611f5457806391d1485414611f07578063981642c614611e5f5780639969119414611d4f5780639b188dd614611cdb578063a217fddf14611cbf578063a354aec71461191d578063a672d98714611578578063a917601b146114cf578063abaa536f1461146d578063ac851dfd146113db578063b6ba1ca7146113af578063b9c5b8331461128a578063beae461514611228578063c395fcb3146111c6578063ca15c873146110dc578063cc82b09014610fc5578063d547741f14610f84578063de7ce39114610f22578063df422bf2146109fb578063e2e3edeb1461091a578063e3a3c522146108f1578063e438fdf81461087d578063f17f352314610679578063f5716a8514610554578063f6e2314b146103b95763fc1032eb1461027157600080fd5b346103b45761027f3661455a565b6102876148ec565b610290826147f8565b156103a2576103387f93e936184fad9f80c7000aa987f91be0cd621bacde11839fdc7139f3d9c2407b916000805160206152ce83398151915280600052602090600082526102e5600160406000200154614ae1565b600081815280835260408082206001600160a01b0390981680835297845290205460ff16610355575b600052600481526040600020805480610343575b50506040519283926040845260408401906146a8565b9042908301520390a2005b61034c90614c65565b90553880610322565b80600052600082526040600020866000528252604060002060ff1981541690553386827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b600080a461030e565b604051632ac1560560e21b8152600490fd5b600080fd5b346103b4576020806003193601126103b4576004356001600160401b0381116103b4576103ea9036906004016144be565b906040519082519261042261042983830195610407818789614599565b85019484816002978881520301902060405192838092614612565b038261449d565b828151910120815190818620149081159161054b575b506105245761045660405194859251928391614599565b83019281816003958681520301902080549161047183615155565b9361047f604051958661449d565b8385526000928352818320908286015b8585106104a857604051806104a489826146cd565b0390f35b6005846001926040516104ba8161444c565b6040516104cb81610422818b614612565b81526040516104e08161042281898c01614612565b838201526040516104f781610422818a8c01614612565b6040820152848060a01b038c8801541660608201526004870154608082015281520193019401939161048f565b9061054760405192839263f855236d60e01b8452600484015260248301906146a8565b0390fd5b9050158561043f565b346103b4576105623661455a565b61056a6148ec565b61057382614835565b156103a2576103387f4614600adaea632b1e4c381ad24471dab7b587dca104c8dd4da76bc64f19716f916000805160206152ee83398151915280600052602090600082526105c8600160406000200154614ae1565b600081815280835260408082206001600160a01b0390981680835297845290205460ff1661062c575b60005260048152604060002080548061061a5750506040519283926040845260408401906146a8565b61062390614c65565b90558580610322565b80600052600082526040600020866000528252604060002060ff1981541690553386827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b600080a46105f1565b346103b45760803660031901126103b4576001600160401b036004358181116103b4576106aa9036906004016144be565b906106b361441a565b906044358181116103b4576106cc9036906004016144be565b906064359081116103b4576106e59036906004016144be565b9060008051602061524e83398151915260005260209260008452604060002033600052845260ff6040600020541615610865576001600160a01b03168015610853578151156108415782511561082f57604051600160ff600a8851938881818c019661075281838a614599565b81016002815203019020015460a01c1615151461080d57936107fe93926107f092600a6107ad847f55b00b3c29344a545244b18d70b135e423405427088bd5425f13d690b82310b4998b604051938492839251928391614599565b8101600281520301902001336001600160601b0360a01b8254161790556107df6040519860a08a5260a08a01906146a8565b9288015286820360408801526146a8565b9084820360608601526146a8565b914260808201528033930390a2005b604051632072bb0160e11b8152600481018690528061054760248201896146a8565b604051635dbef47560e01b8152600490fd5b6040516326813e6f60e01b8152600490fd5b60405163bea3fd2f60e01b8152600490fd5b604051630568555f60e41b8152336004820152602490fd5b346103b45761088b3661455a565b6108936148ec565b61089c826148af565b156103a2576103387f352e14c53d161e2481e65145b53265d1608f979a93a06df66d4c99b2a84ddc639160008051602061526e83398151915280600052602090600082526105c8600160406000200154614ae1565b346103b45760003660031901126103b457602060405160008051602061526e8339815191528152f35b346103b4576020806003193601126103b4576004356001600160401b0381116103b45761094b9036906004016144be565b9060405161042261097f845192848181880195610969818389614599565b8101600281520301902060405192838092614612565b82815191012083519081832014908115916109f2575b506109cf57600a6109b58360ff9386604051938492839251928391614599565b81016002815203019020015460b81c166040519015158152f35b5061054760405192839263f855236d60e01b8452600484015260248301906146a8565b90501584610995565b346103b4576020806003193601126103b4576001600160a01b03610a1d614404565b168015610f10576000906000805260008352604060002081600052835260ff8060406000205416610f07575b6000805160206152ae83398151915291826000526000855260406000208160005285528160406000205416610ef7575b6000805160206152ee833981519152806000526000865260406000208260005286528260406000205416610ee7575b60008051602061524e833981519152806000526000875260406000208360005287528360406000205416610ed7575b6000805160206152ce833981519152806000526000885260406000208460005288528460406000205416610ec7575b60008051602061526e83398151915291826000526000895260406000208560005289528560406000205416610eb7575b60008051602061528e833981519152938460005260008a526040600020866000528a528660406000205416610ea7575b610b6f89615155565b98610b7d6040519a8b61449d565b808a52610b8c601f1991615155565b018a8a60005b838110610e9657505050506000976000805260008b526040600020876000528b528760406000205416610e5b575b60005260008a526040600020866000528a528660406000205416610e1e575b6000526000895260406000208560005289528560406000205416610ddf575b6000526000885260406000208460005288528460406000205416610d9c575b6000526000875260406000208360005287528360406000205416610d5d575b6000526000865260406000208260005286528260406000205416610d1c575b60005260008552604060002090600052845260406000205416610cd9575b506040519082820192808352815180945260408301938160408260051b8601019301916000955b828710610cad5785850386f35b909192938280610cc9600193603f198a820301865288516146a8565b9601920196019592919092610ca0565b610d1590604051610ce981614467565b6005815264212aaca2a960d91b85820152610d048285615179565b52610d0f8184615179565b50615146565b5082610c79565b92610d5790604051610d2d81614467565b600981526824a729a822a1aa27a960b91b88820152610d4c8288615179565b52610d0f8187615179565b92610c5b565b93610d9690604051610d6e81614467565b600781526620aaa224aa27a960c91b89820152610d8b8289615179565b52610d0f8188615179565b93610c3c565b94610dd990604051610dad81614467565b600b81526a2a2920a729a827a92a22a960a91b8a820152610dce828a615179565b52610d0f8189615179565b94610c1d565b95610e1890604051610df081614467565b60078152662922a324a722a960c91b8b820152610e0d828b615179565b52610d0f818a615179565b95610bfe565b96610e5590604051610e2f81614467565b600581526426a4a722a960d91b8c820152610e4a828c615179565b52610d0f818b615179565b96610bdf565b9750604051610e6981614467565b600581526420a226a4a760d91b8b820152610e838a61516c565b52610e8d8961516c565b50600197610bc0565b606083828194010152018b90610b92565b97610eb190615146565b97610b66565b96610ec190615146565b96610b36565b95610ed190615146565b95610b06565b94610ee190615146565b94610ad7565b93610ef190615146565b93610aa8565b92610f0190615146565b92610a79565b60019250610a49565b60405163200db56f60e11b8152600490fd5b346103b45760203660031901126103b457610f3b614404565b6001600160a01b031660009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602090815260409182902054915160ff9092161515825290f35b346103b45760403660031901126103b457610fc3600435610fa361441a565b90806000526000602052610fbe600160406000200154614ae1565b614be0565b005b346103b4576020806003193601126103b457610fdf614404565b6001600160a01b03811691908215610f105761100290610ffd6148ec565b6148af565b6110ca577f49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e0929060008051602061526e8339815191528060005260008252604060002084600052825260ff604060002054161561107a575b60005260048152604060002061106f8154615146565b9055604051428152a2005b806000526000825260406000208460005282526040600020600160ff198254161790553384827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4611059565b6040516314726de560e21b8152600490fd5b346103b45760203660031901126103b4576004356000805160206152ae833981519152811480156111af575b8015611198575b8015611181575b801561116a575b8015611153575b156111415760005260046020526020604060002054604051908152f35b604051636b9c461160e01b8152600490fd5b5060008051602061528e8339815191528114611124565b5060008051602061526e833981519152811461111d565b506000805160206152ce8339815191528114611116565b5060008051602061524e833981519152811461110f565b506000805160206152ee8339815191528114611108565b346103b45760203660031901126103b4576111df614404565b6001600160a01b031660009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602090815260409182902054915160ff9092161515825290f35b346103b45760203660031901126103b457611241614404565b6001600160a01b031660009081527ff3fa603c74bfe2a4719960e47343678c3dc690d2b27a2295acc6fc430833aaf9602090815260409182902054915160ff9092161515825290f35b346103b45760003660031901126103b457600460209081527f973ccc145476ef147b966a44694f8b2d26bac5a3d44a844fec6be696fe5fea70547f02ff85b9f193a3a7824cbaf5a79db262c0bac955152adf2752c6413d76b2d3c7547f0e08e55c6329ca2d4f38429c472032b4e97537c869a64c376bb7e702721eb8c3547fa792fa383e6bd9c6b4465bbfd8031f4b47377210fa121067c03906e9afac6246547f9d423956391424a558206d539d4c7b96f2596f9d71b6fe92efe1f071a870ba945460008051602061528e8339815191526000527f5455ba4b8a75b33fa0f1f7affd9817680912f06b7b194bcf9ac01183c4930020546040805196875296860194909452948401919091526060830152608082019290925260a081019190915260c090f35b346103b45760203660031901126103b45760043560005260046020526020604060002054604051908152f35b346103b4576020806003193601126103b4576004356001600160401b0381116103b45761140c9036906004016144be565b80511561052457604051610422611430835192858181870195610969818389614599565b83815191012090825190200361144a575060405160018152f35b906105476040519283926311bb0bc960e31b8452600484015260248301906146a8565b346103b45760203660031901126103b457611486614404565b6001600160a01b031660009081527f0d2d6a5d08cb5d871289c0a3ca855d9da72909a111c24cce2d5c2b34a20daa54602090815260409182902054915160ff9092161515825290f35b346103b4576020806003193601126103b4576114e9614404565b6001600160a01b03811691908215610f105761150c906115076148ec565b614872565b6110ca577f964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a69060008051602061524e8339815191528060005260008252604060002084600052825260ff604060002054161561107a5760005260048152604060002061106f8154615146565b346103b45760203660031901126103b4576004356001600160401b0381116103b4576115a89036906004016144be565b60006101e06040516115b981614430565b6060815260606020820152606060408201526060808201528260808201528260a0820152606060c08201528260e082015260606101008201526060610120820152826101408201528261016082015282610180820152826101a0820152826101c082015201526040519061042261163e8251936020818186019661096981838a614599565b602081519101208151908184201490811591611914575b506118ef5761167291602091604051938492839251928391614599565b81016002815203019020600b6040519161168b83614430565b60405161169c816104228185614612565b83526040516116b2816104228160018601614612565b60208401526040516116cb816104228160028601614612565b60408401526040516116e4816104228160038601614612565b606084015260048101546080840152600581015460a0840152604051611711816104228160068601614612565b60c084015260078101546001600160a01b031660e084015260405161173d816104228160088601614612565b610100840152604051611757816104228160098601614612565b61012084015260ff600a82015460018060a01b038116610140860152818160a01c161515610160860152818160a81c161515610180860152818160b01c1615156101a086015260b81c1615156101c084015201546101e08201526040518091602082526101e06118986118806118536118296118136117fd6117e7885161020060208c01526102208b01906146a8565b60208901518a8203601f190160408c01526146a8565b6040880151898203601f190160608b01526146a8565b6060870151888203601f190160808a01526146a8565b608086015160a088015260a086015160c088015260c0860151601f198883030160e08901526146a8565b60e08501516001600160a01b031661010087810191909152850151868203601f19016101208801526146a8565b610120840151858203601f19016101408701526146a8565b9160018060a01b0361014082015116610160850152610160810151151561018085015261018081015115156101a08501526101a081015115156101c08501526101c081015115158285015201516102008301520390f35b60405163f855236d60e01b8152602060048201529081906105479060248301906146a8565b90501583611655565b346103b45761192b36614514565b90604051815161042261194b602093848181880195610969818389614599565b8281519101208351908183201490811591611cb6575b506109cf57835115611ca4576000805160206152ee83398151915260005260008252604060002033600052825260ff60406000205416158015611c73575b8015611c42575b8015611c11575b610865576008604051838186516119c5818388614599565b810160028152030190200184516001600160401b038111611bfb576119ea82546145d8565b601f8111611bb5575b5083601f8211600114611b2257611a81857fae67159e13d82231d3f408edcc7f75fa4e81aeacf670d6bcc87883e5c6a9935397989560409585611b0899968896600091611b17575b508160011b916000199060031b1c19161790555b8351600b8b51611a60818486614599565b82019160028352848142940301902001558351809381928c51928391614599565b8101600381520301902091611ad78251611a9a8161444c565b898152835194611aa986614467565b600686526553746174757360d01b958685820152848301528785830152336060830152426080830152614d6b565b611aeb82519860808a5260808a01906146a8565b928884039182818b015260068552840152018287015201906146a8565b914260608201528033930390a2005b90508901518d611a3b565b601f1982169083600052856000209160005b818110611b9e5750957fae67159e13d82231d3f408edcc7f75fa4e81aeacf670d6bcc87883e5c6a993539798956040956001868896611a81968699611b089d10611b85575b5050811b019055611a4f565b8b015160001960f88460031b161c191690558d80611b79565b91928760018192868d015181550194019201611b34565b8260005284600020601f830160051c810191868410611bf1575b601f0160051c01905b818110611be557506119f3565b60008155600101611bd8565b9091508190611bcf565b634e487b7160e01b600052604160045260246000fd5b5060008051602061526e83398151915260005260008252604060002033600052825260ff60406000205416156119ad565b506000805160206152ce83398151915260005260008252604060002033600052825260ff60406000205416156119a6565b5060008051602061524e83398151915260005260008252604060002033600052825260ff604060002054161561199f565b60405163ab36986360e01b8152600490fd5b90501585611961565b346103b45760003660031901126103b457602060405160008152f35b346103b457611ce93661455a565b611cf16148ec565b611cfa826147bb565b156103a2576103387f69e94e373f69f3f945457a07b335722310788af9cd459a33df6f72cc9e9640439160008051602061528e83398151915280600052602090600082526105c8600160406000200154614ae1565b346103b457611d5d36614514565b3360009081527facfff8a39fb957d9d1c8e3ef9f08385e3fcf7bb23ab7ba0ad0f8df93dbde6a68602090815260409091205491929160ff161561086557604051600160ff600a855193858181890196611db781838a614599565b81016002815203019020015460b81c16151514611e3c5791600a611e0b611e37937f3a9eebd240f4c9f631531ebc672c4c040de483b868ccebe8a3a1fdad70cde0d995604051809381928751928391614599565b8101600281520301902001600160b81b60ff60b81b198254161790556040519182913395429184615118565b0390a2005b50610547604051928392636f5f944160e11b8452600484015260248301906146a8565b346103b4576020806003193601126103b4576004356001600160401b0381116103b457611e909036906004016144be565b90604051610422611eae845192848181880195610969818389614599565b8281519101208351908183201490811591611efe575b506109cf57600a611ee48360ff9386604051938492839251928391614599565b81016002815203019020015460b01c166040519015158152f35b90501584611ec4565b346103b45760403660031901126103b457611f2061441a565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346103b45760203660031901126103b457611f6d614404565b6001600160a01b031660009081527facfff8a39fb957d9d1c8e3ef9f08385e3fcf7bb23ab7ba0ad0f8df93dbde6a68602090815260409182902054915160ff9092161515825290f35b346103b4576020806003193601126103b4576004356001600160401b0381116103b457611fe79036906004016144be565b906040519082519261042261200483830195610407818789614599565b828151910120815190818620149081159161210d575b506120fb5761203160405194859251928391614599565b83019281816003958681520301902080549161204c83615155565b9361205a604051958661449d565b8385526000928352818320908286015b85851061207f57604051806104a489826146cd565b6005846001926040516120918161444c565b6040516120a281610422818b614612565b81526040516120b78161042281898c01614612565b838201526040516120ce81610422818a8c01614612565b6040820152848060a01b038c8801541660608201526004870154608082015281520193019401939161206a565b6040516329d7b10b60e11b8152600490fd5b9050158561201a565b346103b45761212436614514565b3360009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602090815260409091205491929160ff161561086557604051600160ff600a85519385818189019661217e81838a614599565b81016002815203019020015460a81c161515146121fe5791600a6121d2611e37937fa214f45af6d86b0d5ff7bb48f888cf4205e4a383da35fcbebfdbd9bd8e6d5a7c95604051809381928751928391614599565b8101600281520301902001600160a81b60ff60a81b198254161790556040519182913395429184615118565b5061054760405192839263701203b760e01b8452600484015260248301906146a8565b346103b45761222f3661455a565b6122376148ec565b61224082614872565b156103a2576103387f71577b91708c73ee54b43c6709958ff42e4bcc084910648ce7c3d16928b51d529160008051602061524e83398151915280600052602090600082526105c8600160406000200154614ae1565b346103b45760003660031901126103b457602060405160008051602061528e8339815191528152f35b346103b45760003660031901126103b45760206040516000805160206152ee8339815191528152f35b346103b4576020806003193601126103b4576004356001600160401b0381116103b4576123189036906004016144be565b906000805260008152604060002033600052815260ff604060002054161561086557604051610422612357845192848181880195610969818389614599565b8281519101208351908183201490811591612497575b506120fb5760ff600a60405184818751612388818389614599565b81016002815203019020015460b01c168061246b575b156124485761241760ff92600a926040517f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e223391806123de428b8361518d565b0390a2848460405184818a516123f5818389614599565b81016002815203019020015460b01c1695604051938492839251928391614599565b81016002815203019020015460b81c16906104a4604051928392839092916020906040830194151583521515910152565b506105476040519283926348cddbdb60e11b8452600484015260248301906146a8565b5060ff600a60405184818751612482818389614599565b81016002815203019020015460b81c1661239e565b9050158461236d565b346103b45760203660031901126103b4576124b9614404565b6001600160a01b031660009081527fbce5fd3347e0dc338dcc0e895534dd4af2740eec95f56cd4ca4b4b2ada357ca0602090815260409182902054915160ff9092161515825290f35b346103b45760003660031901126103b45760206040516000805160206152ce8339815191528152f35b346103b45760003660031901126103b45760206040516000805160206152ae8339815191528152f35b346103b4576020806003193601126103b45761256e614404565b6001600160a01b03811691908215610f10576125919061258c6148ec565b614835565b6110ca577f4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be751906000805160206152ee8339815191528060005260008252604060002084600052825260ff604060002054161561107a5760005260048152604060002061106f8154615146565b346103b45760203660031901126103b4576004356001600160401b0381116103b45761262d9036906004016144be565b604051818180935160208193019161264492614599565b8101600281520360200190206040518061265e8184614612565b03612669908261449d565b604051918261267b8160018401614612565b03612686908461449d565b604051806126978160028501614612565b036126a2908261449d565b60405191826126b48160038401614612565b036126bf908461449d565b600481015460058201546040519491856126dc8160068701614612565b036126e7908761449d565b60078401546040516001600160a01b039790939188169290918461270e8160088a01614612565b03612719908661449d565b604051958661272b8160098b01614612565b03612736908861449d565b600a88015497600b0154986040519c8d9c8d6102009081815201612759916146a8565b8d810360208f015261276a916146a8565b8c810360408e015261277b916146a8565b8b810360608d015261278c916146a8565b9160808b015260a08a015288810360c08a01526127a8916146a8565b9060e08801528681036101008801526127c0916146a8565b8581036101208701526127d2916146a8565b9281166101408501528060a01c60ff1615156101608501528060a81c60ff1615156101808501528060b01c60ff1615156101a085015260b81c60ff1615156101c08401526101e08301520390f35b346103b45760003660031901126103b457602060405160008051602061524e8339815191528152f35b346103b45761285736614514565b3360009081527f0d2d6a5d08cb5d871289c0a3ca855d9da72909a111c24cce2d5c2b34a20daa54602090815260409091205491929160ff161561086557604051600160ff600a8551938581818901966128b181838a614599565b81016002815203019020015460b01c161515146129315791600a612905611e37937fa9de1934279a83f8cfaaecf6a7002ac10aeaea244c8c763f3752f3fc4c3e631d95604051809381928751928391614599565b8101600281520301902001600160b01b60ff60b01b198254161790556040519182913395429184615118565b5061054760405192839263c817400d60e01b8452600484015260248301906146a8565b346103b4576020806003193601126103b45761296e614404565b6001600160a01b03811691908215610f10576129919061298c6148ec565b6147f8565b6110ca577f4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb3906000805160206152ce8339815191528060005260008252604060002084600052825260ff604060002054161561107a5760005260048152604060002061106f8154615146565b346103b45760c03660031901126103b4576004356001600160401b0381116103b457612a2d9036906004016144be565b6024356001600160401b0381116103b457612a4c9036906004016144be565b6064356001600160401b0381116103b457612a6b9036906004016144be565b9160a4356001600160401b0381116103b457612a8b9036906004016144be565b3360009081527fbb3fcc25fbffa12ea463b3505377899a4d5ddb4858b9c7bd36764686d9425b36602052604090205490939060ff161561086557815115613819578051156108415782511561380757604435156137f5576084351580156137e9575b6137d757605060843511156137bd578351156137ab57600154612b0f81615146565b600155604051612b5560748260208101948851612b30818860208d01614599565b8201903360601b6020830152426034830152605482015203605481018452018261449d565b5190209260405193612b6685614467565b600a8552602036818701378451156137955760306020860153845160011015613795576078602186015360005b60048110613701575050612be8602160405180968451612bba816020850160208901614599565b8201602d60f81b6020820152612bd98251809360208785019101614599565b0103600181018752018561449d565b60405194612bf586614430565b848652836020870152826040870152816060870152604435608087015260843560a087015260c08601523360e0860152604051612c3181614467565b600381526252617760e81b6020820152610100860152604051612c5381614467565b600d81526c26b4b734b7339021b2b73a32b960991b6020820152610120860152336101408601526000610160860152600061018086015260006101a086015260006101c0860152426101e08601526040516020818651612cb68183858b01614599565b8101600281520301902085518051906001600160401b038211611bfb578190612cdf84546145d8565b601f81116136b1575b50602090601f83116001146136455760009261363a575b50508160011b916000199060031b1c19161781555b60208601518051906001600160401b038211611bfb578190612d3960018501546145d8565b601f81116135e7575b50602090601f83116001146135755760009261356a575b50508160011b916000199060031b1c19161760018201555b60408601518051906001600160401b038211611bfb578190612d9660028501546145d8565b601f8111613517575b50602090601f83116001146134a55760009261349a575b50508160011b916000199060031b1c19161760028201555b60608601518051906001600160401b038211611bfb578190612df360038501546145d8565b601f8111613447575b50602090601f83116001146133d5576000926133ca575b50508160011b916000199060031b1c19161760038201555b6080860151600482015560a0860151600582015560c08601518051906001600160401b038211611bfb578190612e6460068501546145d8565b601f8111613377575b50602090601f8311600114613305576000926132fa575b50508160011b916000199060031b1c19161760068201555b6007810160018060a01b0360e0880151166001600160601b0360a01b8254161790556101008601518051906001600160401b038211611bfb578190612ee460088501546145d8565b601f81116132a7575b50602090601f83116001146132355760009261322a575b50508160011b916000199060031b1c19161760088201555b6101208601519586516001600160401b038111611bfb57612f4060098401546145d8565b601f81116131e3575b506020601f82116001146131415792600b6101e06107f0948461310598957f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939a986104a49e600092613136575b50508160011b916000199060031b1c19161760098501555b600a840160018060a01b036101408301511681549060ff60a01b610160850151151560a01b1660ff60a81b610180860151151560a81b169060ff60b01b6101a0870151151560b01b169260ff60b81b6101c0880151151560b81b16946001600160401b0360c01b161717171717905501519101556130d16040516020818161303c8c83815193849201614599565b810160038152030190206040519067027b934b3b4b71d160c51b602083015261308360288388516130738184840160208d01614599565b810103600881018552018361449d565b604051916130908361444c565b8a835260405161309f81614467565b600a815269149959da5cdd195c995960b21b602082015260208401526040830152336060830152426080830152614d6b565b6130f76040519660e088526130e960e089018a6146a8565b9088820360208a01526146a8565b9086820360408801526146a8565b91604435608082015260843560a08201524260c08201528033930390a26040519182916020835260208301906146a8565b015190508e80612f96565b6009840160005260206000209860005b601f19841681106131cb57506101e06107f0946001856104a49d7f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939b9996600b966131059c99601f198116106131b2575b505050811b016009850155612fae565b015160001960f88460031b161c191690558e80806131a2565b828201518b556001909a019960209283019201613151565b600984016000526020600020601f830160051c810160208410613223575b601f830160051c82018110613217575050612f49565b60008155600101613201565b5080613201565b015190508880612f04565b9250600884016000526020600020906000935b601f198416851061328c576001945083601f19811610613273575b505050811b016008820155612f1c565b015160001960f88460031b161c19169055888080613263565b81810151835560209485019460019093019290910190613248565b909150600884016000526020600020601f840160051c8101602085106132f3575b90849392915b601f830160051c820181106132e4575050612eed565b600081558594506001016132ce565b50806132c8565b015190508880612e84565b9250600684016000526020600020906000935b601f198416851061335c576001945083601f19811610613343575b505050811b016006820155612e9c565b015160001960f88460031b161c19169055888080613333565b81810151835560209485019460019093019290910190613318565b909150600684016000526020600020601f840160051c8101602085106133c3575b90849392915b601f830160051c820181106133b4575050612e6d565b6000815585945060010161339e565b5080613398565b015190508880612e13565b9250600384016000526020600020906000935b601f198416851061342c576001945083601f19811610613413575b505050811b016003820155612e2b565b015160001960f88460031b161c19169055888080613403565b818101518355602094850194600190930192909101906133e8565b909150600384016000526020600020601f840160051c810160208510613493575b90849392915b601f830160051c82018110613484575050612dfc565b6000815585945060010161346e565b5080613468565b015190508880612db6565b9250600284016000526020600020906000935b601f19841685106134fc576001945083601f198116106134e3575b505050811b016002820155612dce565b015160001960f88460031b161c191690558880806134d3565b818101518355602094850194600190930192909101906134b8565b909150600284016000526020600020601f840160051c810160208510613563575b90849392915b601f830160051c82018110613554575050612d9f565b6000815585945060010161353e565b5080613538565b015190508880612d59565b9250600184016000526020600020906000935b601f19841685106135cc576001945083601f198116106135b3575b505050811b016001820155612d71565b015160001960f88460031b161c191690558880806135a3565b81810151835560209485019460019093019290910190613588565b909150600184016000526020600020601f840160051c810160208510613633575b90849392915b601f830160051c82018110613624575050612d42565b6000815585945060010161360e565b5080613608565b015190508880612cff565b9250836000526020600020906000935b601f1984168510613696576001945083601f1981161061367d575b505050811b018155612d14565b015160001960f88460031b161c19169055888080613670565b81810151835560209485019460019093019290910190613655565b909150836000526020600020601f840160051c8101602085106136fa575b90849392915b601f830160051c820181106136eb575050612ce8565b600081558594506001016136d5565b50806136cf565b60208110156137955781811a90600f61371e818460041c166151cc565b908260011b93600284860481148515171561377f5785810180911161377f5761374e6137559460001a918c614c54565b53166151cc565b600390838201821161377f5761377a936137749160001a920189614c54565b53615146565b612b93565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60405163bfccc8e960e01b8152600490fd5b60405163d05db01960e01b81526084356004820152602490fd5b604051633abe7db760e21b8152600490fd5b50606460843511612aed565b60405163fd83f8d960e01b8152600490fd5b60405163a765e58f60e01b8152600490fd5b604051630ac6e45360e31b8152600490fd5b346103b45760403660031901126103b45761384461441a565b336001600160a01b0382160361386057610fc390600435614be0565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b346103b45760403660031901126103b4576004356001600160401b0381116103b4576138ed9036906004016144be565b6139096020602435928160405193828580945193849201614599565b8101600381520301902080548210156103b45761399891613929916145bc565b50604051906139438261393c8184614612565b038361449d565b604051613957816104228160018601614612565b6139b460405161396e816104228160028801614612565b6139a6600460018060a01b036003870154169501549360405197889760a0895260a08901906146a8565b9087820360208901526146a8565b9085820360408701526146a8565b91606084015260808301520390f35b346103b45760203660031901126103b4576139dc614404565b6001600160a01b031660009081527fbb3fcc25fbffa12ea463b3505377899a4d5ddb4858b9c7bd36764686d9425b36602090815260409182902054915160ff9092161515825290f35b346103b457613a333661455a565b613a3b6148ec565b613a448261477e565b156103a2576103387f125f88db22967983b401f70f6804d47f43cb545fcb725d0b335fe7d43d9b4a4a916000805160206152ae83398151915280600052602090600082526105c8600160406000200154614ae1565b346103b45760403660031901126103b457600435613ab561441a565b816000526000602052613acf600160406000200154614ae1565b81600052600060205260406000209060018060a01b0316908160005260205260ff6040600020541615613afe57005b8160005260006020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b346103b45760203660031901126103b45760043560005260006020526020600160406000200154604051908152f35b346103b4576020806003193601126103b4576004356001600160401b0381116103b457613bac9036906004016144be565b906000805260008152604060002033600052815260ff604060002054161561086557604051610422613beb845192848181880195610969818389614599565b8281519101208351908183201490811591613cc1575b506109cf5760ff600a60405184818751613c1c818389614599565b81016002815203019020015460b01c1680613c95575b15613c725761241760ff92600a926040517f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e223391806123de428b8361518d565b5061054760405192839263642b2f5b60e11b8452600484015260248301906146a8565b5060ff600a60405184818751613cac818389614599565b81016002815203019020015460b81c16613c32565b90501584613c01565b346103b457613cd836614514565b3360009081527fbce5fd3347e0dc338dcc0e895534dd4af2740eec95f56cd4ca4b4b2ada357ca0602090815260409091205491929160ff161561086557604051610422613d32845192848181880195610969818389614599565b8281519101208351908183201490811591613f4f575b506109cf57835115613f3d576009613da383613d8b93613d928460405184818b51613d74818389614599565b810160028152030190200160405196878092614612565b038661449d565b604051809381928951928391614599565b810160028152030190200184516001600160401b038111611bfb57613dc882546145d8565b601f8111613ef7575b5083601f8211600114613e6657937f81dbbd3ba646453a262e90d0495aadc4d783bab49b0a8be2cd84f220cae608bb9593611e379383613e4c94613e3f98600091613e5b575b508160011b916000199060031b1c19161790555b6040519586956060875260608701906146a8565b91858303908601526146a8565b828103604084015233956146a8565b90508a01518b613e17565b601f1982169083600052856000209160005b818110613ee0575093600184613e3f98947f81dbbd3ba646453a262e90d0495aadc4d783bab49b0a8be2cd84f220cae608bb9a9894613e4c97611e379910613ec7575b5050811b019055613e2b565b8c015160001960f88460031b161c191690558b80613ebb565b91928760018192868d015181550194019201613e78565b8260005284600020601f830160051c810191868410613f33575b601f0160051c01905b818110613f275750613dd1565b60008155600101613f1a565b9091508190613f11565b604051635b6571a560e01b8152600490fd5b90501585613d48565b346103b4576020806003193601126103b4576004356001600160401b0381116103b457613f899036906004016144be565b9060008051602061528e83398151915260005260008152604060002033600052815260ff918260406000205416156108655760405181519383830194613fd0818488614599565b8201906001816002938481528588600a97889303019020015460a01c1615151461423d57600080526000855260406000203360005285528060406000205416156108655761042261404360405187818061402e8c8b51928391614599565b81018781520301902060405192838092614612565b8581519101208451908188201490811591614234575b506120fb5780836040518781806140748c8b51928391614599565b810187815203019020015460b01c1680614209575b156141e7576040517f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e223391806140c042898361518d565b0390a280836040518781806140d98c8b51928391614599565b810187815203019020015460b01c1690836040518781806140fe8c8b51928391614599565b810187815203019020015460b81c16816141df575b50156141bd57837ffed1001c142a7ab386454a2f7d78b013ba7ff40595d10c128f2fb6463ccd7b7a9495614181928460405184818951614154818389614599565b81018581520301902001805460ff60a01b1916600160a01b17905560405186519094859382908590614599565b8201908152030190200180546001600160a01b0319163317905560408051818152916141af918301906146a8565b9242908201528033930390a2005b6040516348cddbdb60e11b8152600481018590528061054760248201866146a8565b905086614113565b6040516348cddbdb60e11b8152600481018690528061054760248201876146a8565b5080836040518781806142208c8b51928391614599565b810187815203019020015460b81c16614089565b90501587614059565b604051632072bb0160e11b8152600481018690528061054760248201876146a8565b346103b4576020806003193601126103b457614279614404565b6001600160a01b03811691908215610f105761429c906142976148ec565b6147bb565b6110ca577ff8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e975059060008051602061528e8339815191528060005260008252604060002084600052825260ff604060002054161561107a5760005260048152604060002061106f8154615146565b346103b4576020806003193601126103b457614322614404565b6001600160a01b03811691908215610f1057614345906143406148ec565b61477e565b6110ca577f593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf559906000805160206152ae8339815191528060005260008252604060002084600052825260ff604060002054161561107a5760005260048152604060002061106f8154615146565b346103b45760203660031901126103b4576004359063ffffffff60e01b82168092036103b457602091637965db0b60e01b81149081156143f3575b5015158152f35b6301ffc9a760e01b149050836143ec565b600435906001600160a01b03821682036103b457565b602435906001600160a01b03821682036103b457565b61020081019081106001600160401b03821117611bfb57604052565b60a081019081106001600160401b03821117611bfb57604052565b604081019081106001600160401b03821117611bfb57604052565b608081019081106001600160401b03821117611bfb57604052565b90601f801991011681019081106001600160401b03821117611bfb57604052565b81601f820112156103b4578035906001600160401b038211611bfb57604051926144f2601f8401601f19166020018561449d565b828452602083830101116103b457816000926020809301838601378301015290565b9060406003198301126103b4576001600160401b036004358181116103b45783614540916004016144be565b926024359182116103b457614557916004016144be565b90565b9060406003198301126103b4576004356001600160a01b03811681036103b45791602435906001600160401b0382116103b457614557916004016144be565b60005b8381106145ac5750506000910152565b818101518382015260200161459c565b8054821015613795576000526005602060002091020190600090565b90600182811c92168015614608575b60208310146145f257565b634e487b7160e01b600052602260045260246000fd5b91607f16916145e7565b9060009291805491614623836145d8565b9182825260019384811690816000146146855750600114614645575b50505050565b90919394506000526020928360002092846000945b83861061467157505050500101903880808061463f565b80548587018301529401938590820161465a565b9294505050602093945060ff191683830152151560051b0101903880808061463f565b906020916146c181518092818552858086019101614599565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410614702575050505050505090565b909192939495968580600192603f198582030187528a5190614752614742614732845160a08086528501906146a8565b85850151848203878601526146a8565b888401518382038a8501526146a8565b916060868060a01b038183015116908301526080809101519101529901940194019295949391906146f1565b6001600160a01b031660009081527fbb3fcc25fbffa12ea463b3505377899a4d5ddb4858b9c7bd36764686d9425b36602052604090205460ff1690565b6001600160a01b031660009081527ff3fa603c74bfe2a4719960e47343678c3dc690d2b27a2295acc6fc430833aaf9602052604090205460ff1690565b6001600160a01b031660009081527f0d2d6a5d08cb5d871289c0a3ca855d9da72909a111c24cce2d5c2b34a20daa54602052604090205460ff1690565b6001600160a01b031660009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602052604090205460ff1690565b6001600160a01b031660009081527fbce5fd3347e0dc338dcc0e895534dd4af2740eec95f56cd4ca4b4b2ada357ca0602052604090205460ff1690565b6001600160a01b031660009081527facfff8a39fb957d9d1c8e3ef9f08385e3fcf7bb23ab7ba0ad0f8df93dbde6a68602052604090205460ff1690565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602090815260408083205490929060ff161561492e57505050565b61493733614c72565b908084519061494582614482565b60428252848201926060368537825115614acd57603084538251600190811015614ab95790607860218501536041915b808311614a5f57505050614a1d576048610547938693614a01936149f2985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a8601526149c9815180928c603789019101614599565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190614599565b0103602881018752018561449d565b5192839262461bcd60e51b8452600484015260248301906146a8565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015614aa557614a9e91906f181899199a1a9b1b9c1cb0b131b232b360811b901a614a948688614c54565b5360041c93614c65565b9190614975565b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b81526032600452602490fd5b600090808252602090828252604092838120338252835260ff848220541615614b0a5750505050565b614b1333614c72565b91845190614b2082614482565b60428252848201926060368537825115614acd57603084538251600190811015614ab95790607860218501536041915b808311614ba457505050614a1d576048610547938693614a01936149f2985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a8601526149c9815180928c603789019101614599565b909192600f81166010811015614aa557614bd991906f181899199a1a9b1b9c1cb0b131b232b360811b901a614a948688614c54565b9190614b50565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416614c1057505050565b80835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b908151811015613795570160200190565b801561377f576000190190565b60405190606082018281106001600160401b03821117611bfb57604052602a82526020820160403682378251156137955760309053815160019081101561379557607860218401536029905b808211614d12575050614cce5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f8116906010821015614d5657614d50916f181899199a1a9b1b9c1cb0b131b232b360811b901a614d468587614c54565b5360041c92614c65565b90614cbe565b60246000634e487b7160e01b81526032600452fd5b90815468010000000000000000811015611bfb57614d909060019384820181556145bc565b929092615102578151908151906001600160401b0391828111611bfb5780614db887546145d8565b94601f958681116150ae575b5060209086831160011461504b57600092615040575b5050600019600383901b1c191690821b1785555b8085016020850151805190848211611bfb578190614e0c84546145d8565b878111614fed575b50602090878311600114614f8a57600092614f7f575b5050600019600383901b1c191690831b1790555b600285019260408501518051938411611bfb57614e5b85546145d8565b828111614f37575b506020918411600114614eca57928060809593819360049896600094614ebf575b50501b916000199060031b1c19161790555b6003840160018060a01b036060830151166001600160601b0360a01b8254161790550151910155565b015192503880614e84565b90601f9392931983169185600052816000209260005b818110614f2157509160049795939185608098969410614f08575b505050811b019055614e96565b015160001960f88460031b161c19169055388080614efb565b8284015185559386019360209384019301614ee0565b8560005260206000208380870160051c82019260208810614f76575b0160051c019084905b828110614f6a575050614e63565b60008155018490614f5c565b92508192614f53565b015190503880614e2a565b90859350601f1983169185600052816000209260005b818110614fd557508411614fbc575b505050811b019055614e3e565b015160001960f88460031b161c19169055388080614faf565b82840151855588969094019360209384019301614fa0565b9091508360005260206000208780850160051c82019260208610615037575b918791869594930160051c01915b828110615028575050614e14565b6000815585945087910161501a565b9250819261500c565b015190503880614dda565b90849350601f1983169189600052816000209260005b8181106150965750841161507d575b505050811b018555614dee565b015160001960f88460031b161c19169055388080615070565b82840151855587969094019360209384019301615061565b9091506000888152602081208780860160051c820193602087106150f9575b91879187969594930160051c01925b8381106150eb57505050614dc4565b8281558695508791016150dc565b935081936150cd565b634e487b7160e01b600052600060045260246000fd5b939291615141906151336040936060885260608801906146a8565b9086820360208801526146a8565b930152565b600019811461377f5760010190565b6001600160401b038111611bfb5760051b60200190565b8051156137955760200190565b80518210156137955760209160051b010190565b92919060406151a581926060875260608701906146a8565b8581036020870152600c81526b54726164696e67526561647960a01b602082015201930152565b60009060ff16600a8110156151f857603091500160ff811161377f5760f81b6001600160f81b03191690565b60610160ff81116152395760ff6009199116019060ff8211615225575060f81b6001600160f81b03191690565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b82526011600452602482fdfeddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0f8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90ea952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5a977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4da26469706673582212204679e8600588cc4b117f120c63b25a7ede3ce4610f68c77f5f6264ba71e04cc364736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146143b1575080630958fc2d146143085780630dacad2e1461425f578063126ee33814613f58578063129b5c4514613cca5780631c7588fc14613b7b578063248a9ca314613b4c5780632f2ff15d14613a99578063309514df14613a255780633499c3a2146139c357806335ba6207146138bd57806336568abe1461382b5780633a7adea5146129fd578063480d1dd3146129545780634e2a3109146128495780634eabbe77146128205780635aee1b15146125fd5780636377741d146125545780636394f6e61461252b5780636e1d616e1461250257806370e22e42146124a057806375a2b0d4146122e757806379451cd7146122be5780637a01a1da146122955780637ae9c160146122215780637cde2b9914612116578063826fe0f514611fb65780638850845f14611f5457806391d1485414611f07578063981642c614611e5f5780639969119414611d4f5780639b188dd614611cdb578063a217fddf14611cbf578063a354aec71461191d578063a672d98714611578578063a917601b146114cf578063abaa536f1461146d578063ac851dfd146113db578063b6ba1ca7146113af578063b9c5b8331461128a578063beae461514611228578063c395fcb3146111c6578063ca15c873146110dc578063cc82b09014610fc5578063d547741f14610f84578063de7ce39114610f22578063df422bf2146109fb578063e2e3edeb1461091a578063e3a3c522146108f1578063e438fdf81461087d578063f17f352314610679578063f5716a8514610554578063f6e2314b146103b95763fc1032eb1461027157600080fd5b346103b45761027f3661455a565b6102876148ec565b610290826147f8565b156103a2576103387f93e936184fad9f80c7000aa987f91be0cd621bacde11839fdc7139f3d9c2407b916000805160206152ce83398151915280600052602090600082526102e5600160406000200154614ae1565b600081815280835260408082206001600160a01b0390981680835297845290205460ff16610355575b600052600481526040600020805480610343575b50506040519283926040845260408401906146a8565b9042908301520390a2005b61034c90614c65565b90553880610322565b80600052600082526040600020866000528252604060002060ff1981541690553386827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b600080a461030e565b604051632ac1560560e21b8152600490fd5b600080fd5b346103b4576020806003193601126103b4576004356001600160401b0381116103b4576103ea9036906004016144be565b906040519082519261042261042983830195610407818789614599565b85019484816002978881520301902060405192838092614612565b038261449d565b828151910120815190818620149081159161054b575b506105245761045660405194859251928391614599565b83019281816003958681520301902080549161047183615155565b9361047f604051958661449d565b8385526000928352818320908286015b8585106104a857604051806104a489826146cd565b0390f35b6005846001926040516104ba8161444c565b6040516104cb81610422818b614612565b81526040516104e08161042281898c01614612565b838201526040516104f781610422818a8c01614612565b6040820152848060a01b038c8801541660608201526004870154608082015281520193019401939161048f565b9061054760405192839263f855236d60e01b8452600484015260248301906146a8565b0390fd5b9050158561043f565b346103b4576105623661455a565b61056a6148ec565b61057382614835565b156103a2576103387f4614600adaea632b1e4c381ad24471dab7b587dca104c8dd4da76bc64f19716f916000805160206152ee83398151915280600052602090600082526105c8600160406000200154614ae1565b600081815280835260408082206001600160a01b0390981680835297845290205460ff1661062c575b60005260048152604060002080548061061a5750506040519283926040845260408401906146a8565b61062390614c65565b90558580610322565b80600052600082526040600020866000528252604060002060ff1981541690553386827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b600080a46105f1565b346103b45760803660031901126103b4576001600160401b036004358181116103b4576106aa9036906004016144be565b906106b361441a565b906044358181116103b4576106cc9036906004016144be565b906064359081116103b4576106e59036906004016144be565b9060008051602061524e83398151915260005260209260008452604060002033600052845260ff6040600020541615610865576001600160a01b03168015610853578151156108415782511561082f57604051600160ff600a8851938881818c019661075281838a614599565b81016002815203019020015460a01c1615151461080d57936107fe93926107f092600a6107ad847f55b00b3c29344a545244b18d70b135e423405427088bd5425f13d690b82310b4998b604051938492839251928391614599565b8101600281520301902001336001600160601b0360a01b8254161790556107df6040519860a08a5260a08a01906146a8565b9288015286820360408801526146a8565b9084820360608601526146a8565b914260808201528033930390a2005b604051632072bb0160e11b8152600481018690528061054760248201896146a8565b604051635dbef47560e01b8152600490fd5b6040516326813e6f60e01b8152600490fd5b60405163bea3fd2f60e01b8152600490fd5b604051630568555f60e41b8152336004820152602490fd5b346103b45761088b3661455a565b6108936148ec565b61089c826148af565b156103a2576103387f352e14c53d161e2481e65145b53265d1608f979a93a06df66d4c99b2a84ddc639160008051602061526e83398151915280600052602090600082526105c8600160406000200154614ae1565b346103b45760003660031901126103b457602060405160008051602061526e8339815191528152f35b346103b4576020806003193601126103b4576004356001600160401b0381116103b45761094b9036906004016144be565b9060405161042261097f845192848181880195610969818389614599565b8101600281520301902060405192838092614612565b82815191012083519081832014908115916109f2575b506109cf57600a6109b58360ff9386604051938492839251928391614599565b81016002815203019020015460b81c166040519015158152f35b5061054760405192839263f855236d60e01b8452600484015260248301906146a8565b90501584610995565b346103b4576020806003193601126103b4576001600160a01b03610a1d614404565b168015610f10576000906000805260008352604060002081600052835260ff8060406000205416610f07575b6000805160206152ae83398151915291826000526000855260406000208160005285528160406000205416610ef7575b6000805160206152ee833981519152806000526000865260406000208260005286528260406000205416610ee7575b60008051602061524e833981519152806000526000875260406000208360005287528360406000205416610ed7575b6000805160206152ce833981519152806000526000885260406000208460005288528460406000205416610ec7575b60008051602061526e83398151915291826000526000895260406000208560005289528560406000205416610eb7575b60008051602061528e833981519152938460005260008a526040600020866000528a528660406000205416610ea7575b610b6f89615155565b98610b7d6040519a8b61449d565b808a52610b8c601f1991615155565b018a8a60005b838110610e9657505050506000976000805260008b526040600020876000528b528760406000205416610e5b575b60005260008a526040600020866000528a528660406000205416610e1e575b6000526000895260406000208560005289528560406000205416610ddf575b6000526000885260406000208460005288528460406000205416610d9c575b6000526000875260406000208360005287528360406000205416610d5d575b6000526000865260406000208260005286528260406000205416610d1c575b60005260008552604060002090600052845260406000205416610cd9575b506040519082820192808352815180945260408301938160408260051b8601019301916000955b828710610cad5785850386f35b909192938280610cc9600193603f198a820301865288516146a8565b9601920196019592919092610ca0565b610d1590604051610ce981614467565b6005815264212aaca2a960d91b85820152610d048285615179565b52610d0f8184615179565b50615146565b5082610c79565b92610d5790604051610d2d81614467565b600981526824a729a822a1aa27a960b91b88820152610d4c8288615179565b52610d0f8187615179565b92610c5b565b93610d9690604051610d6e81614467565b600781526620aaa224aa27a960c91b89820152610d8b8289615179565b52610d0f8188615179565b93610c3c565b94610dd990604051610dad81614467565b600b81526a2a2920a729a827a92a22a960a91b8a820152610dce828a615179565b52610d0f8189615179565b94610c1d565b95610e1890604051610df081614467565b60078152662922a324a722a960c91b8b820152610e0d828b615179565b52610d0f818a615179565b95610bfe565b96610e5590604051610e2f81614467565b600581526426a4a722a960d91b8c820152610e4a828c615179565b52610d0f818b615179565b96610bdf565b9750604051610e6981614467565b600581526420a226a4a760d91b8b820152610e838a61516c565b52610e8d8961516c565b50600197610bc0565b606083828194010152018b90610b92565b97610eb190615146565b97610b66565b96610ec190615146565b96610b36565b95610ed190615146565b95610b06565b94610ee190615146565b94610ad7565b93610ef190615146565b93610aa8565b92610f0190615146565b92610a79565b60019250610a49565b60405163200db56f60e11b8152600490fd5b346103b45760203660031901126103b457610f3b614404565b6001600160a01b031660009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602090815260409182902054915160ff9092161515825290f35b346103b45760403660031901126103b457610fc3600435610fa361441a565b90806000526000602052610fbe600160406000200154614ae1565b614be0565b005b346103b4576020806003193601126103b457610fdf614404565b6001600160a01b03811691908215610f105761100290610ffd6148ec565b6148af565b6110ca577f49cc27c2a068c01cf703c3923dfc679109b5f6c27bd1f61b542c159e3a73e0929060008051602061526e8339815191528060005260008252604060002084600052825260ff604060002054161561107a575b60005260048152604060002061106f8154615146565b9055604051428152a2005b806000526000825260406000208460005282526040600020600160ff198254161790553384827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4611059565b6040516314726de560e21b8152600490fd5b346103b45760203660031901126103b4576004356000805160206152ae833981519152811480156111af575b8015611198575b8015611181575b801561116a575b8015611153575b156111415760005260046020526020604060002054604051908152f35b604051636b9c461160e01b8152600490fd5b5060008051602061528e8339815191528114611124565b5060008051602061526e833981519152811461111d565b506000805160206152ce8339815191528114611116565b5060008051602061524e833981519152811461110f565b506000805160206152ee8339815191528114611108565b346103b45760203660031901126103b4576111df614404565b6001600160a01b031660009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602090815260409182902054915160ff9092161515825290f35b346103b45760203660031901126103b457611241614404565b6001600160a01b031660009081527ff3fa603c74bfe2a4719960e47343678c3dc690d2b27a2295acc6fc430833aaf9602090815260409182902054915160ff9092161515825290f35b346103b45760003660031901126103b457600460209081527f973ccc145476ef147b966a44694f8b2d26bac5a3d44a844fec6be696fe5fea70547f02ff85b9f193a3a7824cbaf5a79db262c0bac955152adf2752c6413d76b2d3c7547f0e08e55c6329ca2d4f38429c472032b4e97537c869a64c376bb7e702721eb8c3547fa792fa383e6bd9c6b4465bbfd8031f4b47377210fa121067c03906e9afac6246547f9d423956391424a558206d539d4c7b96f2596f9d71b6fe92efe1f071a870ba945460008051602061528e8339815191526000527f5455ba4b8a75b33fa0f1f7affd9817680912f06b7b194bcf9ac01183c4930020546040805196875296860194909452948401919091526060830152608082019290925260a081019190915260c090f35b346103b45760203660031901126103b45760043560005260046020526020604060002054604051908152f35b346103b4576020806003193601126103b4576004356001600160401b0381116103b45761140c9036906004016144be565b80511561052457604051610422611430835192858181870195610969818389614599565b83815191012090825190200361144a575060405160018152f35b906105476040519283926311bb0bc960e31b8452600484015260248301906146a8565b346103b45760203660031901126103b457611486614404565b6001600160a01b031660009081527f0d2d6a5d08cb5d871289c0a3ca855d9da72909a111c24cce2d5c2b34a20daa54602090815260409182902054915160ff9092161515825290f35b346103b4576020806003193601126103b4576114e9614404565b6001600160a01b03811691908215610f105761150c906115076148ec565b614872565b6110ca577f964e50cb3bdb84c00a30f56ae15d538d23dc6db14f891d7d819761b161e990a69060008051602061524e8339815191528060005260008252604060002084600052825260ff604060002054161561107a5760005260048152604060002061106f8154615146565b346103b45760203660031901126103b4576004356001600160401b0381116103b4576115a89036906004016144be565b60006101e06040516115b981614430565b6060815260606020820152606060408201526060808201528260808201528260a0820152606060c08201528260e082015260606101008201526060610120820152826101408201528261016082015282610180820152826101a0820152826101c082015201526040519061042261163e8251936020818186019661096981838a614599565b602081519101208151908184201490811591611914575b506118ef5761167291602091604051938492839251928391614599565b81016002815203019020600b6040519161168b83614430565b60405161169c816104228185614612565b83526040516116b2816104228160018601614612565b60208401526040516116cb816104228160028601614612565b60408401526040516116e4816104228160038601614612565b606084015260048101546080840152600581015460a0840152604051611711816104228160068601614612565b60c084015260078101546001600160a01b031660e084015260405161173d816104228160088601614612565b610100840152604051611757816104228160098601614612565b61012084015260ff600a82015460018060a01b038116610140860152818160a01c161515610160860152818160a81c161515610180860152818160b01c1615156101a086015260b81c1615156101c084015201546101e08201526040518091602082526101e06118986118806118536118296118136117fd6117e7885161020060208c01526102208b01906146a8565b60208901518a8203601f190160408c01526146a8565b6040880151898203601f190160608b01526146a8565b6060870151888203601f190160808a01526146a8565b608086015160a088015260a086015160c088015260c0860151601f198883030160e08901526146a8565b60e08501516001600160a01b031661010087810191909152850151868203601f19016101208801526146a8565b610120840151858203601f19016101408701526146a8565b9160018060a01b0361014082015116610160850152610160810151151561018085015261018081015115156101a08501526101a081015115156101c08501526101c081015115158285015201516102008301520390f35b60405163f855236d60e01b8152602060048201529081906105479060248301906146a8565b90501583611655565b346103b45761192b36614514565b90604051815161042261194b602093848181880195610969818389614599565b8281519101208351908183201490811591611cb6575b506109cf57835115611ca4576000805160206152ee83398151915260005260008252604060002033600052825260ff60406000205416158015611c73575b8015611c42575b8015611c11575b610865576008604051838186516119c5818388614599565b810160028152030190200184516001600160401b038111611bfb576119ea82546145d8565b601f8111611bb5575b5083601f8211600114611b2257611a81857fae67159e13d82231d3f408edcc7f75fa4e81aeacf670d6bcc87883e5c6a9935397989560409585611b0899968896600091611b17575b508160011b916000199060031b1c19161790555b8351600b8b51611a60818486614599565b82019160028352848142940301902001558351809381928c51928391614599565b8101600381520301902091611ad78251611a9a8161444c565b898152835194611aa986614467565b600686526553746174757360d01b958685820152848301528785830152336060830152426080830152614d6b565b611aeb82519860808a5260808a01906146a8565b928884039182818b015260068552840152018287015201906146a8565b914260608201528033930390a2005b90508901518d611a3b565b601f1982169083600052856000209160005b818110611b9e5750957fae67159e13d82231d3f408edcc7f75fa4e81aeacf670d6bcc87883e5c6a993539798956040956001868896611a81968699611b089d10611b85575b5050811b019055611a4f565b8b015160001960f88460031b161c191690558d80611b79565b91928760018192868d015181550194019201611b34565b8260005284600020601f830160051c810191868410611bf1575b601f0160051c01905b818110611be557506119f3565b60008155600101611bd8565b9091508190611bcf565b634e487b7160e01b600052604160045260246000fd5b5060008051602061526e83398151915260005260008252604060002033600052825260ff60406000205416156119ad565b506000805160206152ce83398151915260005260008252604060002033600052825260ff60406000205416156119a6565b5060008051602061524e83398151915260005260008252604060002033600052825260ff604060002054161561199f565b60405163ab36986360e01b8152600490fd5b90501585611961565b346103b45760003660031901126103b457602060405160008152f35b346103b457611ce93661455a565b611cf16148ec565b611cfa826147bb565b156103a2576103387f69e94e373f69f3f945457a07b335722310788af9cd459a33df6f72cc9e9640439160008051602061528e83398151915280600052602090600082526105c8600160406000200154614ae1565b346103b457611d5d36614514565b3360009081527facfff8a39fb957d9d1c8e3ef9f08385e3fcf7bb23ab7ba0ad0f8df93dbde6a68602090815260409091205491929160ff161561086557604051600160ff600a855193858181890196611db781838a614599565b81016002815203019020015460b81c16151514611e3c5791600a611e0b611e37937f3a9eebd240f4c9f631531ebc672c4c040de483b868ccebe8a3a1fdad70cde0d995604051809381928751928391614599565b8101600281520301902001600160b81b60ff60b81b198254161790556040519182913395429184615118565b0390a2005b50610547604051928392636f5f944160e11b8452600484015260248301906146a8565b346103b4576020806003193601126103b4576004356001600160401b0381116103b457611e909036906004016144be565b90604051610422611eae845192848181880195610969818389614599565b8281519101208351908183201490811591611efe575b506109cf57600a611ee48360ff9386604051938492839251928391614599565b81016002815203019020015460b01c166040519015158152f35b90501584611ec4565b346103b45760403660031901126103b457611f2061441a565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346103b45760203660031901126103b457611f6d614404565b6001600160a01b031660009081527facfff8a39fb957d9d1c8e3ef9f08385e3fcf7bb23ab7ba0ad0f8df93dbde6a68602090815260409182902054915160ff9092161515825290f35b346103b4576020806003193601126103b4576004356001600160401b0381116103b457611fe79036906004016144be565b906040519082519261042261200483830195610407818789614599565b828151910120815190818620149081159161210d575b506120fb5761203160405194859251928391614599565b83019281816003958681520301902080549161204c83615155565b9361205a604051958661449d565b8385526000928352818320908286015b85851061207f57604051806104a489826146cd565b6005846001926040516120918161444c565b6040516120a281610422818b614612565b81526040516120b78161042281898c01614612565b838201526040516120ce81610422818a8c01614612565b6040820152848060a01b038c8801541660608201526004870154608082015281520193019401939161206a565b6040516329d7b10b60e11b8152600490fd5b9050158561201a565b346103b45761212436614514565b3360009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602090815260409091205491929160ff161561086557604051600160ff600a85519385818189019661217e81838a614599565b81016002815203019020015460a81c161515146121fe5791600a6121d2611e37937fa214f45af6d86b0d5ff7bb48f888cf4205e4a383da35fcbebfdbd9bd8e6d5a7c95604051809381928751928391614599565b8101600281520301902001600160a81b60ff60a81b198254161790556040519182913395429184615118565b5061054760405192839263701203b760e01b8452600484015260248301906146a8565b346103b45761222f3661455a565b6122376148ec565b61224082614872565b156103a2576103387f71577b91708c73ee54b43c6709958ff42e4bcc084910648ce7c3d16928b51d529160008051602061524e83398151915280600052602090600082526105c8600160406000200154614ae1565b346103b45760003660031901126103b457602060405160008051602061528e8339815191528152f35b346103b45760003660031901126103b45760206040516000805160206152ee8339815191528152f35b346103b4576020806003193601126103b4576004356001600160401b0381116103b4576123189036906004016144be565b906000805260008152604060002033600052815260ff604060002054161561086557604051610422612357845192848181880195610969818389614599565b8281519101208351908183201490811591612497575b506120fb5760ff600a60405184818751612388818389614599565b81016002815203019020015460b01c168061246b575b156124485761241760ff92600a926040517f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e223391806123de428b8361518d565b0390a2848460405184818a516123f5818389614599565b81016002815203019020015460b01c1695604051938492839251928391614599565b81016002815203019020015460b81c16906104a4604051928392839092916020906040830194151583521515910152565b506105476040519283926348cddbdb60e11b8452600484015260248301906146a8565b5060ff600a60405184818751612482818389614599565b81016002815203019020015460b81c1661239e565b9050158461236d565b346103b45760203660031901126103b4576124b9614404565b6001600160a01b031660009081527fbce5fd3347e0dc338dcc0e895534dd4af2740eec95f56cd4ca4b4b2ada357ca0602090815260409182902054915160ff9092161515825290f35b346103b45760003660031901126103b45760206040516000805160206152ce8339815191528152f35b346103b45760003660031901126103b45760206040516000805160206152ae8339815191528152f35b346103b4576020806003193601126103b45761256e614404565b6001600160a01b03811691908215610f10576125919061258c6148ec565b614835565b6110ca577f4e3eede475de92d3e23765b737dbb67646352b3328c1a437d7f089766d7be751906000805160206152ee8339815191528060005260008252604060002084600052825260ff604060002054161561107a5760005260048152604060002061106f8154615146565b346103b45760203660031901126103b4576004356001600160401b0381116103b45761262d9036906004016144be565b604051818180935160208193019161264492614599565b8101600281520360200190206040518061265e8184614612565b03612669908261449d565b604051918261267b8160018401614612565b03612686908461449d565b604051806126978160028501614612565b036126a2908261449d565b60405191826126b48160038401614612565b036126bf908461449d565b600481015460058201546040519491856126dc8160068701614612565b036126e7908761449d565b60078401546040516001600160a01b039790939188169290918461270e8160088a01614612565b03612719908661449d565b604051958661272b8160098b01614612565b03612736908861449d565b600a88015497600b0154986040519c8d9c8d6102009081815201612759916146a8565b8d810360208f015261276a916146a8565b8c810360408e015261277b916146a8565b8b810360608d015261278c916146a8565b9160808b015260a08a015288810360c08a01526127a8916146a8565b9060e08801528681036101008801526127c0916146a8565b8581036101208701526127d2916146a8565b9281166101408501528060a01c60ff1615156101608501528060a81c60ff1615156101808501528060b01c60ff1615156101a085015260b81c60ff1615156101c08401526101e08301520390f35b346103b45760003660031901126103b457602060405160008051602061524e8339815191528152f35b346103b45761285736614514565b3360009081527f0d2d6a5d08cb5d871289c0a3ca855d9da72909a111c24cce2d5c2b34a20daa54602090815260409091205491929160ff161561086557604051600160ff600a8551938581818901966128b181838a614599565b81016002815203019020015460b01c161515146129315791600a612905611e37937fa9de1934279a83f8cfaaecf6a7002ac10aeaea244c8c763f3752f3fc4c3e631d95604051809381928751928391614599565b8101600281520301902001600160b01b60ff60b01b198254161790556040519182913395429184615118565b5061054760405192839263c817400d60e01b8452600484015260248301906146a8565b346103b4576020806003193601126103b45761296e614404565b6001600160a01b03811691908215610f10576129919061298c6148ec565b6147f8565b6110ca577f4a02edd19f09212e54b2ac85d7d3a4a2e3fbf424e6710c3f817d9b4cecc9cdb3906000805160206152ce8339815191528060005260008252604060002084600052825260ff604060002054161561107a5760005260048152604060002061106f8154615146565b346103b45760c03660031901126103b4576004356001600160401b0381116103b457612a2d9036906004016144be565b6024356001600160401b0381116103b457612a4c9036906004016144be565b6064356001600160401b0381116103b457612a6b9036906004016144be565b9160a4356001600160401b0381116103b457612a8b9036906004016144be565b3360009081527fbb3fcc25fbffa12ea463b3505377899a4d5ddb4858b9c7bd36764686d9425b36602052604090205490939060ff161561086557815115613819578051156108415782511561380757604435156137f5576084351580156137e9575b6137d757605060843511156137bd578351156137ab57600154612b0f81615146565b600155604051612b5560748260208101948851612b30818860208d01614599565b8201903360601b6020830152426034830152605482015203605481018452018261449d565b5190209260405193612b6685614467565b600a8552602036818701378451156137955760306020860153845160011015613795576078602186015360005b60048110613701575050612be8602160405180968451612bba816020850160208901614599565b8201602d60f81b6020820152612bd98251809360208785019101614599565b0103600181018752018561449d565b60405194612bf586614430565b848652836020870152826040870152816060870152604435608087015260843560a087015260c08601523360e0860152604051612c3181614467565b600381526252617760e81b6020820152610100860152604051612c5381614467565b600d81526c26b4b734b7339021b2b73a32b960991b6020820152610120860152336101408601526000610160860152600061018086015260006101a086015260006101c0860152426101e08601526040516020818651612cb68183858b01614599565b8101600281520301902085518051906001600160401b038211611bfb578190612cdf84546145d8565b601f81116136b1575b50602090601f83116001146136455760009261363a575b50508160011b916000199060031b1c19161781555b60208601518051906001600160401b038211611bfb578190612d3960018501546145d8565b601f81116135e7575b50602090601f83116001146135755760009261356a575b50508160011b916000199060031b1c19161760018201555b60408601518051906001600160401b038211611bfb578190612d9660028501546145d8565b601f8111613517575b50602090601f83116001146134a55760009261349a575b50508160011b916000199060031b1c19161760028201555b60608601518051906001600160401b038211611bfb578190612df360038501546145d8565b601f8111613447575b50602090601f83116001146133d5576000926133ca575b50508160011b916000199060031b1c19161760038201555b6080860151600482015560a0860151600582015560c08601518051906001600160401b038211611bfb578190612e6460068501546145d8565b601f8111613377575b50602090601f8311600114613305576000926132fa575b50508160011b916000199060031b1c19161760068201555b6007810160018060a01b0360e0880151166001600160601b0360a01b8254161790556101008601518051906001600160401b038211611bfb578190612ee460088501546145d8565b601f81116132a7575b50602090601f83116001146132355760009261322a575b50508160011b916000199060031b1c19161760088201555b6101208601519586516001600160401b038111611bfb57612f4060098401546145d8565b601f81116131e3575b506020601f82116001146131415792600b6101e06107f0948461310598957f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939a986104a49e600092613136575b50508160011b916000199060031b1c19161760098501555b600a840160018060a01b036101408301511681549060ff60a01b610160850151151560a01b1660ff60a81b610180860151151560a81b169060ff60b01b6101a0870151151560b01b169260ff60b81b6101c0880151151560b81b16946001600160401b0360c01b161717171717905501519101556130d16040516020818161303c8c83815193849201614599565b810160038152030190206040519067027b934b3b4b71d160c51b602083015261308360288388516130738184840160208d01614599565b810103600881018552018361449d565b604051916130908361444c565b8a835260405161309f81614467565b600a815269149959da5cdd195c995960b21b602082015260208401526040830152336060830152426080830152614d6b565b6130f76040519660e088526130e960e089018a6146a8565b9088820360208a01526146a8565b9086820360408801526146a8565b91604435608082015260843560a08201524260c08201528033930390a26040519182916020835260208301906146a8565b015190508e80612f96565b6009840160005260206000209860005b601f19841681106131cb57506101e06107f0946001856104a49d7f73c819068ba25b88a32cb91f9b552ab50d9cccb7c4abdeb2a04f44373b7153939b9996600b966131059c99601f198116106131b2575b505050811b016009850155612fae565b015160001960f88460031b161c191690558e80806131a2565b828201518b556001909a019960209283019201613151565b600984016000526020600020601f830160051c810160208410613223575b601f830160051c82018110613217575050612f49565b60008155600101613201565b5080613201565b015190508880612f04565b9250600884016000526020600020906000935b601f198416851061328c576001945083601f19811610613273575b505050811b016008820155612f1c565b015160001960f88460031b161c19169055888080613263565b81810151835560209485019460019093019290910190613248565b909150600884016000526020600020601f840160051c8101602085106132f3575b90849392915b601f830160051c820181106132e4575050612eed565b600081558594506001016132ce565b50806132c8565b015190508880612e84565b9250600684016000526020600020906000935b601f198416851061335c576001945083601f19811610613343575b505050811b016006820155612e9c565b015160001960f88460031b161c19169055888080613333565b81810151835560209485019460019093019290910190613318565b909150600684016000526020600020601f840160051c8101602085106133c3575b90849392915b601f830160051c820181106133b4575050612e6d565b6000815585945060010161339e565b5080613398565b015190508880612e13565b9250600384016000526020600020906000935b601f198416851061342c576001945083601f19811610613413575b505050811b016003820155612e2b565b015160001960f88460031b161c19169055888080613403565b818101518355602094850194600190930192909101906133e8565b909150600384016000526020600020601f840160051c810160208510613493575b90849392915b601f830160051c82018110613484575050612dfc565b6000815585945060010161346e565b5080613468565b015190508880612db6565b9250600284016000526020600020906000935b601f19841685106134fc576001945083601f198116106134e3575b505050811b016002820155612dce565b015160001960f88460031b161c191690558880806134d3565b818101518355602094850194600190930192909101906134b8565b909150600284016000526020600020601f840160051c810160208510613563575b90849392915b601f830160051c82018110613554575050612d9f565b6000815585945060010161353e565b5080613538565b015190508880612d59565b9250600184016000526020600020906000935b601f19841685106135cc576001945083601f198116106135b3575b505050811b016001820155612d71565b015160001960f88460031b161c191690558880806135a3565b81810151835560209485019460019093019290910190613588565b909150600184016000526020600020601f840160051c810160208510613633575b90849392915b601f830160051c82018110613624575050612d42565b6000815585945060010161360e565b5080613608565b015190508880612cff565b9250836000526020600020906000935b601f1984168510613696576001945083601f1981161061367d575b505050811b018155612d14565b015160001960f88460031b161c19169055888080613670565b81810151835560209485019460019093019290910190613655565b909150836000526020600020601f840160051c8101602085106136fa575b90849392915b601f830160051c820181106136eb575050612ce8565b600081558594506001016136d5565b50806136cf565b60208110156137955781811a90600f61371e818460041c166151cc565b908260011b93600284860481148515171561377f5785810180911161377f5761374e6137559460001a918c614c54565b53166151cc565b600390838201821161377f5761377a936137749160001a920189614c54565b53615146565b612b93565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60405163bfccc8e960e01b8152600490fd5b60405163d05db01960e01b81526084356004820152602490fd5b604051633abe7db760e21b8152600490fd5b50606460843511612aed565b60405163fd83f8d960e01b8152600490fd5b60405163a765e58f60e01b8152600490fd5b604051630ac6e45360e31b8152600490fd5b346103b45760403660031901126103b45761384461441a565b336001600160a01b0382160361386057610fc390600435614be0565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b346103b45760403660031901126103b4576004356001600160401b0381116103b4576138ed9036906004016144be565b6139096020602435928160405193828580945193849201614599565b8101600381520301902080548210156103b45761399891613929916145bc565b50604051906139438261393c8184614612565b038361449d565b604051613957816104228160018601614612565b6139b460405161396e816104228160028801614612565b6139a6600460018060a01b036003870154169501549360405197889760a0895260a08901906146a8565b9087820360208901526146a8565b9085820360408701526146a8565b91606084015260808301520390f35b346103b45760203660031901126103b4576139dc614404565b6001600160a01b031660009081527fbb3fcc25fbffa12ea463b3505377899a4d5ddb4858b9c7bd36764686d9425b36602090815260409182902054915160ff9092161515825290f35b346103b457613a333661455a565b613a3b6148ec565b613a448261477e565b156103a2576103387f125f88db22967983b401f70f6804d47f43cb545fcb725d0b335fe7d43d9b4a4a916000805160206152ae83398151915280600052602090600082526105c8600160406000200154614ae1565b346103b45760403660031901126103b457600435613ab561441a565b816000526000602052613acf600160406000200154614ae1565b81600052600060205260406000209060018060a01b0316908160005260205260ff6040600020541615613afe57005b8160005260006020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b346103b45760203660031901126103b45760043560005260006020526020600160406000200154604051908152f35b346103b4576020806003193601126103b4576004356001600160401b0381116103b457613bac9036906004016144be565b906000805260008152604060002033600052815260ff604060002054161561086557604051610422613beb845192848181880195610969818389614599565b8281519101208351908183201490811591613cc1575b506109cf5760ff600a60405184818751613c1c818389614599565b81016002815203019020015460b01c1680613c95575b15613c725761241760ff92600a926040517f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e223391806123de428b8361518d565b5061054760405192839263642b2f5b60e11b8452600484015260248301906146a8565b5060ff600a60405184818751613cac818389614599565b81016002815203019020015460b81c16613c32565b90501584613c01565b346103b457613cd836614514565b3360009081527fbce5fd3347e0dc338dcc0e895534dd4af2740eec95f56cd4ca4b4b2ada357ca0602090815260409091205491929160ff161561086557604051610422613d32845192848181880195610969818389614599565b8281519101208351908183201490811591613f4f575b506109cf57835115613f3d576009613da383613d8b93613d928460405184818b51613d74818389614599565b810160028152030190200160405196878092614612565b038661449d565b604051809381928951928391614599565b810160028152030190200184516001600160401b038111611bfb57613dc882546145d8565b601f8111613ef7575b5083601f8211600114613e6657937f81dbbd3ba646453a262e90d0495aadc4d783bab49b0a8be2cd84f220cae608bb9593611e379383613e4c94613e3f98600091613e5b575b508160011b916000199060031b1c19161790555b6040519586956060875260608701906146a8565b91858303908601526146a8565b828103604084015233956146a8565b90508a01518b613e17565b601f1982169083600052856000209160005b818110613ee0575093600184613e3f98947f81dbbd3ba646453a262e90d0495aadc4d783bab49b0a8be2cd84f220cae608bb9a9894613e4c97611e379910613ec7575b5050811b019055613e2b565b8c015160001960f88460031b161c191690558b80613ebb565b91928760018192868d015181550194019201613e78565b8260005284600020601f830160051c810191868410613f33575b601f0160051c01905b818110613f275750613dd1565b60008155600101613f1a565b9091508190613f11565b604051635b6571a560e01b8152600490fd5b90501585613d48565b346103b4576020806003193601126103b4576004356001600160401b0381116103b457613f899036906004016144be565b9060008051602061528e83398151915260005260008152604060002033600052815260ff918260406000205416156108655760405181519383830194613fd0818488614599565b8201906001816002938481528588600a97889303019020015460a01c1615151461423d57600080526000855260406000203360005285528060406000205416156108655761042261404360405187818061402e8c8b51928391614599565b81018781520301902060405192838092614612565b8581519101208451908188201490811591614234575b506120fb5780836040518781806140748c8b51928391614599565b810187815203019020015460b01c1680614209575b156141e7576040517f10f4ba4c7bb6f0c442f54585004a6e24440bea5c2d2e6f36b688e3e624762e223391806140c042898361518d565b0390a280836040518781806140d98c8b51928391614599565b810187815203019020015460b01c1690836040518781806140fe8c8b51928391614599565b810187815203019020015460b81c16816141df575b50156141bd57837ffed1001c142a7ab386454a2f7d78b013ba7ff40595d10c128f2fb6463ccd7b7a9495614181928460405184818951614154818389614599565b81018581520301902001805460ff60a01b1916600160a01b17905560405186519094859382908590614599565b8201908152030190200180546001600160a01b0319163317905560408051818152916141af918301906146a8565b9242908201528033930390a2005b6040516348cddbdb60e11b8152600481018590528061054760248201866146a8565b905086614113565b6040516348cddbdb60e11b8152600481018690528061054760248201876146a8565b5080836040518781806142208c8b51928391614599565b810187815203019020015460b81c16614089565b90501587614059565b604051632072bb0160e11b8152600481018690528061054760248201876146a8565b346103b4576020806003193601126103b457614279614404565b6001600160a01b03811691908215610f105761429c906142976148ec565b6147bb565b6110ca577ff8ed9ac482b0f7c12999b3f157f758f84e39cd339fa301ea203823ac29e975059060008051602061528e8339815191528060005260008252604060002084600052825260ff604060002054161561107a5760005260048152604060002061106f8154615146565b346103b4576020806003193601126103b457614322614404565b6001600160a01b03811691908215610f1057614345906143406148ec565b61477e565b6110ca577f593f046317558c2857b92915c62c99f2d2108f7bc6f1e1b3c5376cd559abf559906000805160206152ae8339815191528060005260008252604060002084600052825260ff604060002054161561107a5760005260048152604060002061106f8154615146565b346103b45760203660031901126103b4576004359063ffffffff60e01b82168092036103b457602091637965db0b60e01b81149081156143f3575b5015158152f35b6301ffc9a760e01b149050836143ec565b600435906001600160a01b03821682036103b457565b602435906001600160a01b03821682036103b457565b61020081019081106001600160401b03821117611bfb57604052565b60a081019081106001600160401b03821117611bfb57604052565b604081019081106001600160401b03821117611bfb57604052565b608081019081106001600160401b03821117611bfb57604052565b90601f801991011681019081106001600160401b03821117611bfb57604052565b81601f820112156103b4578035906001600160401b038211611bfb57604051926144f2601f8401601f19166020018561449d565b828452602083830101116103b457816000926020809301838601378301015290565b9060406003198301126103b4576001600160401b036004358181116103b45783614540916004016144be565b926024359182116103b457614557916004016144be565b90565b9060406003198301126103b4576004356001600160a01b03811681036103b45791602435906001600160401b0382116103b457614557916004016144be565b60005b8381106145ac5750506000910152565b818101518382015260200161459c565b8054821015613795576000526005602060002091020190600090565b90600182811c92168015614608575b60208310146145f257565b634e487b7160e01b600052602260045260246000fd5b91607f16916145e7565b9060009291805491614623836145d8565b9182825260019384811690816000146146855750600114614645575b50505050565b90919394506000526020928360002092846000945b83861061467157505050500101903880808061463f565b80548587018301529401938590820161465a565b9294505050602093945060ff191683830152151560051b0101903880808061463f565b906020916146c181518092818552858086019101614599565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410614702575050505050505090565b909192939495968580600192603f198582030187528a5190614752614742614732845160a08086528501906146a8565b85850151848203878601526146a8565b888401518382038a8501526146a8565b916060868060a01b038183015116908301526080809101519101529901940194019295949391906146f1565b6001600160a01b031660009081527fbb3fcc25fbffa12ea463b3505377899a4d5ddb4858b9c7bd36764686d9425b36602052604090205460ff1690565b6001600160a01b031660009081527ff3fa603c74bfe2a4719960e47343678c3dc690d2b27a2295acc6fc430833aaf9602052604090205460ff1690565b6001600160a01b031660009081527f0d2d6a5d08cb5d871289c0a3ca855d9da72909a111c24cce2d5c2b34a20daa54602052604090205460ff1690565b6001600160a01b031660009081527f4130a4caca6023b0ba21488ee680ce5c3df22860b1cd8b02cd2a0bcb0de98851602052604090205460ff1690565b6001600160a01b031660009081527fbce5fd3347e0dc338dcc0e895534dd4af2740eec95f56cd4ca4b4b2ada357ca0602052604090205460ff1690565b6001600160a01b031660009081527facfff8a39fb957d9d1c8e3ef9f08385e3fcf7bb23ab7ba0ad0f8df93dbde6a68602052604090205460ff1690565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602090815260408083205490929060ff161561492e57505050565b61493733614c72565b908084519061494582614482565b60428252848201926060368537825115614acd57603084538251600190811015614ab95790607860218501536041915b808311614a5f57505050614a1d576048610547938693614a01936149f2985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a8601526149c9815180928c603789019101614599565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190614599565b0103602881018752018561449d565b5192839262461bcd60e51b8452600484015260248301906146a8565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015614aa557614a9e91906f181899199a1a9b1b9c1cb0b131b232b360811b901a614a948688614c54565b5360041c93614c65565b9190614975565b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b81526032600452602490fd5b600090808252602090828252604092838120338252835260ff848220541615614b0a5750505050565b614b1333614c72565b91845190614b2082614482565b60428252848201926060368537825115614acd57603084538251600190811015614ab95790607860218501536041915b808311614ba457505050614a1d576048610547938693614a01936149f2985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a8601526149c9815180928c603789019101614599565b909192600f81166010811015614aa557614bd991906f181899199a1a9b1b9c1cb0b131b232b360811b901a614a948688614c54565b9190614b50565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416614c1057505050565b80835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b908151811015613795570160200190565b801561377f576000190190565b60405190606082018281106001600160401b03821117611bfb57604052602a82526020820160403682378251156137955760309053815160019081101561379557607860218401536029905b808211614d12575050614cce5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f8116906010821015614d5657614d50916f181899199a1a9b1b9c1cb0b131b232b360811b901a614d468587614c54565b5360041c92614c65565b90614cbe565b60246000634e487b7160e01b81526032600452fd5b90815468010000000000000000811015611bfb57614d909060019384820181556145bc565b929092615102578151908151906001600160401b0391828111611bfb5780614db887546145d8565b94601f958681116150ae575b5060209086831160011461504b57600092615040575b5050600019600383901b1c191690821b1785555b8085016020850151805190848211611bfb578190614e0c84546145d8565b878111614fed575b50602090878311600114614f8a57600092614f7f575b5050600019600383901b1c191690831b1790555b600285019260408501518051938411611bfb57614e5b85546145d8565b828111614f37575b506020918411600114614eca57928060809593819360049896600094614ebf575b50501b916000199060031b1c19161790555b6003840160018060a01b036060830151166001600160601b0360a01b8254161790550151910155565b015192503880614e84565b90601f9392931983169185600052816000209260005b818110614f2157509160049795939185608098969410614f08575b505050811b019055614e96565b015160001960f88460031b161c19169055388080614efb565b8284015185559386019360209384019301614ee0565b8560005260206000208380870160051c82019260208810614f76575b0160051c019084905b828110614f6a575050614e63565b60008155018490614f5c565b92508192614f53565b015190503880614e2a565b90859350601f1983169185600052816000209260005b818110614fd557508411614fbc575b505050811b019055614e3e565b015160001960f88460031b161c19169055388080614faf565b82840151855588969094019360209384019301614fa0565b9091508360005260206000208780850160051c82019260208610615037575b918791869594930160051c01915b828110615028575050614e14565b6000815585945087910161501a565b9250819261500c565b015190503880614dda565b90849350601f1983169189600052816000209260005b8181106150965750841161507d575b505050811b018555614dee565b015160001960f88460031b161c19169055388080615070565b82840151855587969094019360209384019301615061565b9091506000888152602081208780860160051c820193602087106150f9575b91879187969594930160051c01925b8381106150eb57505050614dc4565b8281558695508791016150dc565b935081936150cd565b634e487b7160e01b600052600060045260246000fd5b939291615141906151336040936060885260608801906146a8565b9086820360208801526146a8565b930152565b600019811461377f5760010190565b6001600160401b038111611bfb5760051b60200190565b8051156137955760200190565b80518210156137955760209160051b010190565b92919060406151a581926060875260608701906146a8565b8581036020870152600c81526b54726164696e67526561647960a01b602082015201930152565b60009060ff16600a8110156151f857603091500160ff811161377f5760f81b6001600160f81b03191690565b60610160ff81116152395760ff6009199116019060ff8211615225575060f81b6001600160f81b03191690565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b82526011600452602482fdfeddaa901e2fe3bda354fe0ede2785152d5c109282a613fe024a056a3e66c41bb3273dcf2136c7d8ef632bb8ef13dbca69a8f36fa620c7468671b3153d46a211c0f8cd32ed93fc2f9fc78152a14807c9609af3d99c5fe4dc6b106a801aaddfe90ea952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5a977e1a3444218ff332edf735c56487bbe59922b15c88777d443eb8b78020f4da26469706673582212204679e8600588cc4b117f120c63b25a7ede3ce4610f68c77f5f6264ba71e04cc364736f6c63430008140033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "_auditMineral(string,string)": {
        "details": "only the auditor can audit mineralDetails.Logs audit report on every successful audit.",
        "params": {
          "mineralId": "The ID of the mineral under audition.",
          "report": "The audit status report of the mineral under audition."
        }
      },
      "_checkAuditAndInspectionStatus(string)": {
        "details": "checks audit and inspection status Returns the status of both audit and inspection of mineral according to mineralId"
      },
      "_getMineralHistory(string)": {
        "details": "retrieves fll history of a mineral (for audit retail)",
        "returns": {
          "_0": "history of specified mineral sing its mineralId"
        }
      },
      "checkAuditAndInspectionStatus(string)": {
        "details": "checks audit and inspection status",
        "params": {
          "mineralId": "The ID of the mineral to check for audit and inspection status Returns (isValid, isInspected) statuses of both audit and inspection of mineral according to mineralId"
        }
      },
      "constructor": {
        "details": "connects RolesManager contract"
      },
      "getAllRoleCounts()": {
        "details": "Returns all role counts in a single call",
        "returns": {
          "auditorCount": "Number of auditors",
          "buyerCount": "Number of buyers",
          "inspectorCount": "Number of inspectors",
          "minerCount": "Number of miners",
          "refinerCount": "Number of refiners",
          "transporterCount": "Number of transporters"
        }
      },
      "getMineralDetails(string)": {
        "details": "retrieves mineral details of specified mineralId",
        "returns": {
          "_0": "mineral details of specified mineralId"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have a specific role",
        "params": {
          "role": "The role to query member count for"
        },
        "returns": {
          "count": "The number of accounts with the role"
        }
      },
      "getRolesForAddress(address)": {
        "details": "Returns all roles assigned to a given address",
        "params": {
          "account": "The address to check roles for"
        },
        "returns": {
          "roles": "An array of role names the address has"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasMinerRole(address)": {
        "details": "Roles helper functionschecks if an account has a specific role",
        "params": {
          "account": "The address of the account to checked with role association"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "inspectMineral(string,string)": {
        "details": "only the inspector can inspect mineralDetailsLogs audit report on every successful inspection",
        "params": {
          "mineralId": "The ID of the mineral under inspection",
          "report": "The inspection status report of the mineral under inspection"
        }
      },
      "isMineralAudited(string)": {
        "details": "checks if a mineral with the given ID is registered",
        "params": {
          "mineralId": "the ID of the mineral to check"
        },
        "returns": {
          "_0": "A boolean indicating whether the mineral is registered or not"
        }
      },
      "isMineralRegistered(string)": {
        "details": "checks if a mineral with the given ID is registered",
        "params": {
          "mineralId": "the ID of the mineral to check"
        },
        "returns": {
          "_0": "A boolean indicating whether the mineral is registered or not"
        }
      },
      "purchaseMineral(string)": {
        "details": "Only the buyer can purchase mineralDetails",
        "params": {
          "mineralId": "The ID of the mineral under purchase"
        }
      },
      "refineMineral(string,string)": {
        "details": "only the refiner can refiner a mineral",
        "params": {
          "mineralId": "The ID of the mineral under refinery"
        }
      },
      "registerMineral(string,string,uint256,string,uint256,string)": {
        "details": "Register a new mineral - only by miner.Every mineral is assigned a unique mineralId.",
        "params": {
          "_mineralType": "The type of a mineral.",
          "_name": "Mineral name.",
          "_origin": "Mineral Origin.",
          "_purityPercentage": "Mineral purity in percentage.",
          "_storageConditions": "Mineral Storage conditions.",
          "_weight": "Mineral weight in uint256."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferMineral(string,address,string,string)": {
        "details": "only the transporter can transport mineralDetails",
        "params": {
          "_destination": "The Destination area of the mineral(string)",
          "_origin": "The Original location of the mineral under transportation",
          "_receivingParty": "The address of the destination portal",
          "mineralId": "The ID of the mineral under transportation"
        }
      },
      "updateMineralLocation(string,string)": {
        "details": "updates the location of the mineral",
        "params": {
          "mineralId": "the ID of the mineral to update",
          "newLocation": "The new location of the mineral"
        }
      },
      "updateMineralStatus(string,string)": {
        "details": "Updates mineral details - only by authorized roles",
        "params": {
          "mineralId": "The ID of the mineral under update",
          "newStatus": "New status of the mineral"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_auditMineral(string,string)": {
        "notice": "Emits MineralAudited event."
      },
      "inspectMineral(string,string)": {
        "notice": "Emits MineralInspected event on successful inspection"
      },
      "purchaseMineral(string)": {
        "notice": "Emits MineralPurchased event on successful purchase"
      },
      "refineMineral(string,string)": {
        "notice": "Emits MineralRefined event on successfl refining process"
      },
      "registerMineral(string,string,uint256,string,uint256,string)": {
        "notice": "Emits MineralRegistered event on successful registration."
      },
      "transferMineral(string,address,string,string)": {
        "notice": "Emits MineralTransported on successful transportation"
      },
      "updateMineralLocation(string,string)": {
        "notice": "Emits MineralLocationUpdated event on successful location update!"
      },
      "updateMineralStatus(string,string)": {
        "notice": "Emits MineralUpdated event on successful updation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3677,
        "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
        "label": "nonce",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3682,
        "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
        "label": "mineralDetails",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(MineralDetails)3659_storage)"
      },
      {
        "astId": 3688,
        "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
        "label": "mineralHistories",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(MineralHistory)3670_storage)dyn_storage)"
      },
      {
        "astId": 3692,
        "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
        "label": "roleMemberCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 9145,
        "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
        "label": "rolesManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(RolesManager)5505"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MineralHistory)3670_storage)dyn_storage": {
        "base": "t_struct(MineralHistory)3670_storage",
        "encoding": "dynamic_array",
        "label": "struct RolesManager.MineralHistory[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(RolesManager)5505": {
        "encoding": "inplace",
        "label": "contract RolesManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(MineralHistory)3670_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RolesManager.MineralHistory[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(MineralHistory)3670_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MineralDetails)3659_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RolesManager.MineralDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(MineralDetails)3659_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MineralDetails)3659_storage": {
        "encoding": "inplace",
        "label": "struct RolesManager.MineralDetails",
        "members": [
          {
            "astId": 3628,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3630,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3632,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "origin",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3634,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "mineralType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3636,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "weight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3638,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "purityPercentage",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3640,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "storageConditions",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3642,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "registeredBy",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3644,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "currentStatus",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 3646,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "currentLocation",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 3648,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "currentHandler",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 3650,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "isPurchased",
            "offset": 20,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3652,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "isRefined",
            "offset": 21,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3654,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "isAudited",
            "offset": 22,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3656,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "isInspected",
            "offset": 23,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3658,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(MineralHistory)3670_storage": {
        "encoding": "inplace",
        "label": "struct RolesManager.MineralHistory",
        "members": [
          {
            "astId": 3661,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3663,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "fieldChanged",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3665,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "newValue",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3667,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "updatedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3669,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/modules/MineralRegistry.sol:MineralRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}