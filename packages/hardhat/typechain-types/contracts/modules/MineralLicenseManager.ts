/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MineralLicenseManager {
  export type LicenseApplicationStruct = {
    applicationId: BigNumberish;
    applicant: AddressLike;
    licenseType: BigNumberish;
    status: BigNumberish;
    submissionDate: BigNumberish;
    reviewDate: BigNumberish;
    approvalDate: BigNumberish;
    expiryDate: BigNumberish;
    reviewingOfficer: AddressLike;
    annualProductionLimit: BigNumberish;
    bondAmount: BigNumberish;
    requiresEnvironmentalBond: boolean;
    bondPosted: boolean;
  };

  export type LicenseApplicationStructOutput = [
    applicationId: bigint,
    applicant: string,
    licenseType: bigint,
    status: bigint,
    submissionDate: bigint,
    reviewDate: bigint,
    approvalDate: bigint,
    expiryDate: bigint,
    reviewingOfficer: string,
    annualProductionLimit: bigint,
    bondAmount: bigint,
    requiresEnvironmentalBond: boolean,
    bondPosted: boolean
  ] & {
    applicationId: bigint;
    applicant: string;
    licenseType: bigint;
    status: bigint;
    submissionDate: bigint;
    reviewDate: bigint;
    approvalDate: bigint;
    expiryDate: bigint;
    reviewingOfficer: string;
    annualProductionLimit: bigint;
    bondAmount: bigint;
    requiresEnvironmentalBond: boolean;
    bondPosted: boolean;
  };

  export type ApplicationDataStruct = {
    companyDetailsIPFS: string;
    projectDetailsIPFS: string;
    environmentalImpactIPFS: string;
    financialCapabilityIPFS: string;
    geographicArea: string;
    rejectionReason: string;
  };

  export type ApplicationDataStructOutput = [
    companyDetailsIPFS: string,
    projectDetailsIPFS: string,
    environmentalImpactIPFS: string,
    financialCapabilityIPFS: string,
    geographicArea: string,
    rejectionReason: string
  ] & {
    companyDetailsIPFS: string;
    projectDetailsIPFS: string;
    environmentalImpactIPFS: string;
    financialCapabilityIPFS: string;
    geographicArea: string;
    rejectionReason: string;
  };

  export type ComplianceRecordStruct = {
    inspectionDate: BigNumberish;
    nextInspectionDue: BigNumberish;
    inspector: AddressLike;
    passed: boolean;
    findingsIPFS: string;
  };

  export type ComplianceRecordStructOutput = [
    inspectionDate: bigint,
    nextInspectionDue: bigint,
    inspector: string,
    passed: boolean,
    findingsIPFS: string
  ] & {
    inspectionDate: bigint;
    nextInspectionDue: bigint;
    inspector: string;
    passed: boolean;
    findingsIPFS: string;
  };
}

export interface MineralLicenseManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUDITOR"
      | "COMPLIANCE_OFFICER"
      | "DEFAULT_ADMIN_ROLE"
      | "LICENSE_MANAGER"
      | "activeLicensesCount"
      | "addComplianceInspection"
      | "applicantApplications"
      | "applicationData"
      | "applications"
      | "banApplicant"
      | "bannedApplicants"
      | "batchUpdateStatus"
      | "complianceRecords"
      | "emergencyPauseApplication"
      | "getApplicantApplications"
      | "getApplication"
      | "getApplicationsByStatus"
      | "getComplianceRecords"
      | "getContractBalance"
      | "getLicenseFee"
      | "getRoleAdmin"
      | "getTotalApplications"
      | "grantRole"
      | "hasRole"
      | "isLicenseActive"
      | "licenseDurations"
      | "licenseFees"
      | "postEnvironmentalBond"
      | "reinstateLicense"
      | "releaseEnvironmentalBond"
      | "renewLicense"
      | "renounceRole"
      | "reviewApplication"
      | "revokeLicense"
      | "revokeRole"
      | "submitApplication"
      | "supportsInterface"
      | "suspendLicense"
      | "updateLicenseFee"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApplicationReviewed"
      | "ApplicationSubmitted"
      | "BondForfeited"
      | "BondPosted"
      | "BondReleased"
      | "ComplianceInspection"
      | "LicenseApproved"
      | "LicenseRenewed"
      | "LicenseRevoked"
      | "LicenseSuspended"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(functionFragment: "AUDITOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_OFFICER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LICENSE_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeLicensesCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addComplianceInspection",
    values: [BigNumberish, boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applicantApplications",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applicationData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applications",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "banApplicant",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "bannedApplicants",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateStatus",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "complianceRecords",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPauseApplication",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicantApplications",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplication",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicationsByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalApplications",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLicenseActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "licenseDurations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "licenseFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postEnvironmentalBond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reinstateLicense",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEnvironmentalBond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renewLicense",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewApplication",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLicense",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitApplication",
    values: [BigNumberish, string, string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendLicense",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLicenseFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "AUDITOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_OFFICER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LICENSE_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeLicensesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addComplianceInspection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applicantApplications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applicationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "banApplicant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bannedApplicants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "complianceRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPauseApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplicantApplications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplicationsByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalApplications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLicenseActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licenseDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licenseFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postEnvironmentalBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinstateLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEnvironmentalBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLicenseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace ApplicationReviewedEvent {
  export type InputTuple = [
    applicationId: BigNumberish,
    reviewer: AddressLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    applicationId: bigint,
    reviewer: string,
    status: bigint
  ];
  export interface OutputObject {
    applicationId: bigint;
    reviewer: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApplicationSubmittedEvent {
  export type InputTuple = [
    applicationId: BigNumberish,
    applicant: AddressLike,
    licenseType: BigNumberish
  ];
  export type OutputTuple = [
    applicationId: bigint,
    applicant: string,
    licenseType: bigint
  ];
  export interface OutputObject {
    applicationId: bigint;
    applicant: string;
    licenseType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondForfeitedEvent {
  export type InputTuple = [applicationId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [applicationId: bigint, amount: bigint];
  export interface OutputObject {
    applicationId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondPostedEvent {
  export type InputTuple = [applicationId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [applicationId: bigint, amount: bigint];
  export interface OutputObject {
    applicationId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondReleasedEvent {
  export type InputTuple = [applicationId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [applicationId: bigint, amount: bigint];
  export interface OutputObject {
    applicationId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComplianceInspectionEvent {
  export type InputTuple = [
    applicationId: BigNumberish,
    inspector: AddressLike,
    passed: boolean
  ];
  export type OutputTuple = [
    applicationId: bigint,
    inspector: string,
    passed: boolean
  ];
  export interface OutputObject {
    applicationId: bigint;
    inspector: string;
    passed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicenseApprovedEvent {
  export type InputTuple = [
    applicationId: BigNumberish,
    expiryDate: BigNumberish
  ];
  export type OutputTuple = [applicationId: bigint, expiryDate: bigint];
  export interface OutputObject {
    applicationId: bigint;
    expiryDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicenseRenewedEvent {
  export type InputTuple = [
    applicationId: BigNumberish,
    newExpiryDate: BigNumberish
  ];
  export type OutputTuple = [applicationId: bigint, newExpiryDate: bigint];
  export interface OutputObject {
    applicationId: bigint;
    newExpiryDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicenseRevokedEvent {
  export type InputTuple = [applicationId: BigNumberish, reason: string];
  export type OutputTuple = [applicationId: bigint, reason: string];
  export interface OutputObject {
    applicationId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicenseSuspendedEvent {
  export type InputTuple = [applicationId: BigNumberish, reason: string];
  export type OutputTuple = [applicationId: bigint, reason: string];
  export interface OutputObject {
    applicationId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MineralLicenseManager extends BaseContract {
  connect(runner?: ContractRunner | null): MineralLicenseManager;
  waitForDeployment(): Promise<this>;

  interface: MineralLicenseManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUDITOR: TypedContractMethod<[], [string], "view">;

  COMPLIANCE_OFFICER: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  LICENSE_MANAGER: TypedContractMethod<[], [string], "view">;

  activeLicensesCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  addComplianceInspection: TypedContractMethod<
    [
      _applicationId: BigNumberish,
      _passed: boolean,
      _findingsIPFS: string,
      _nextInspectionDue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  applicantApplications: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  applicationData: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string] & {
        companyDetailsIPFS: string;
        projectDetailsIPFS: string;
        environmentalImpactIPFS: string;
        financialCapabilityIPFS: string;
        geographicArea: string;
        rejectionReason: string;
      }
    ],
    "view"
  >;

  applications: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        applicationId: bigint;
        applicant: string;
        licenseType: bigint;
        status: bigint;
        submissionDate: bigint;
        reviewDate: bigint;
        approvalDate: bigint;
        expiryDate: bigint;
        reviewingOfficer: string;
        annualProductionLimit: bigint;
        bondAmount: bigint;
        requiresEnvironmentalBond: boolean;
        bondPosted: boolean;
      }
    ],
    "view"
  >;

  banApplicant: TypedContractMethod<
    [_applicant: AddressLike, _banned: boolean],
    [void],
    "nonpayable"
  >;

  bannedApplicants: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  batchUpdateStatus: TypedContractMethod<
    [_applicationIds: BigNumberish[], _statuses: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  complianceRecords: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, string, boolean, string] & {
        inspectionDate: bigint;
        nextInspectionDue: bigint;
        inspector: string;
        passed: boolean;
        findingsIPFS: string;
      }
    ],
    "view"
  >;

  emergencyPauseApplication: TypedContractMethod<
    [_applicationId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getApplicantApplications: TypedContractMethod<
    [_applicant: AddressLike],
    [bigint[]],
    "view"
  >;

  getApplication: TypedContractMethod<
    [_applicationId: BigNumberish],
    [
      [
        MineralLicenseManager.LicenseApplicationStructOutput,
        MineralLicenseManager.ApplicationDataStructOutput
      ]
    ],
    "view"
  >;

  getApplicationsByStatus: TypedContractMethod<
    [_status: BigNumberish],
    [bigint[]],
    "view"
  >;

  getComplianceRecords: TypedContractMethod<
    [_applicationId: BigNumberish],
    [MineralLicenseManager.ComplianceRecordStructOutput[]],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getLicenseFee: TypedContractMethod<
    [_licenseType: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalApplications: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isLicenseActive: TypedContractMethod<
    [_applicationId: BigNumberish],
    [boolean],
    "view"
  >;

  licenseDurations: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  licenseFees: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  postEnvironmentalBond: TypedContractMethod<
    [_applicationId: BigNumberish],
    [void],
    "payable"
  >;

  reinstateLicense: TypedContractMethod<
    [_applicationId: BigNumberish],
    [void],
    "nonpayable"
  >;

  releaseEnvironmentalBond: TypedContractMethod<
    [_applicationId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renewLicense: TypedContractMethod<
    [_applicationId: BigNumberish],
    [void],
    "payable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  reviewApplication: TypedContractMethod<
    [_applicationId: BigNumberish, _status: BigNumberish, _comments: string],
    [void],
    "nonpayable"
  >;

  revokeLicense: TypedContractMethod<
    [_applicationId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  submitApplication: TypedContractMethod<
    [
      _licenseType: BigNumberish,
      _companyDetailsIPFS: string,
      _projectDetailsIPFS: string,
      _environmentalImpactIPFS: string,
      _financialCapabilityIPFS: string,
      _annualProductionLimit: BigNumberish,
      _geographicArea: string
    ],
    [bigint],
    "payable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  suspendLicense: TypedContractMethod<
    [_applicationId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  updateLicenseFee: TypedContractMethod<
    [_licenseType: BigNumberish, _newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUDITOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_OFFICER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LICENSE_MANAGER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activeLicensesCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "addComplianceInspection"
  ): TypedContractMethod<
    [
      _applicationId: BigNumberish,
      _passed: boolean,
      _findingsIPFS: string,
      _nextInspectionDue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applicantApplications"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "applicationData"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string] & {
        companyDetailsIPFS: string;
        projectDetailsIPFS: string;
        environmentalImpactIPFS: string;
        financialCapabilityIPFS: string;
        geographicArea: string;
        rejectionReason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "applications"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        applicationId: bigint;
        applicant: string;
        licenseType: bigint;
        status: bigint;
        submissionDate: bigint;
        reviewDate: bigint;
        approvalDate: bigint;
        expiryDate: bigint;
        reviewingOfficer: string;
        annualProductionLimit: bigint;
        bondAmount: bigint;
        requiresEnvironmentalBond: boolean;
        bondPosted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "banApplicant"
  ): TypedContractMethod<
    [_applicant: AddressLike, _banned: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bannedApplicants"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchUpdateStatus"
  ): TypedContractMethod<
    [_applicationIds: BigNumberish[], _statuses: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "complianceRecords"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, string, boolean, string] & {
        inspectionDate: bigint;
        nextInspectionDue: bigint;
        inspector: string;
        passed: boolean;
        findingsIPFS: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyPauseApplication"
  ): TypedContractMethod<[_applicationId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getApplicantApplications"
  ): TypedContractMethod<[_applicant: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getApplication"
  ): TypedContractMethod<
    [_applicationId: BigNumberish],
    [
      [
        MineralLicenseManager.LicenseApplicationStructOutput,
        MineralLicenseManager.ApplicationDataStructOutput
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApplicationsByStatus"
  ): TypedContractMethod<[_status: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getComplianceRecords"
  ): TypedContractMethod<
    [_applicationId: BigNumberish],
    [MineralLicenseManager.ComplianceRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLicenseFee"
  ): TypedContractMethod<[_licenseType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalApplications"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLicenseActive"
  ): TypedContractMethod<[_applicationId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "licenseDurations"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "licenseFees"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "postEnvironmentalBond"
  ): TypedContractMethod<[_applicationId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "reinstateLicense"
  ): TypedContractMethod<[_applicationId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseEnvironmentalBond"
  ): TypedContractMethod<[_applicationId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renewLicense"
  ): TypedContractMethod<[_applicationId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reviewApplication"
  ): TypedContractMethod<
    [_applicationId: BigNumberish, _status: BigNumberish, _comments: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeLicense"
  ): TypedContractMethod<
    [_applicationId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitApplication"
  ): TypedContractMethod<
    [
      _licenseType: BigNumberish,
      _companyDetailsIPFS: string,
      _projectDetailsIPFS: string,
      _environmentalImpactIPFS: string,
      _financialCapabilityIPFS: string,
      _annualProductionLimit: BigNumberish,
      _geographicArea: string
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "suspendLicense"
  ): TypedContractMethod<
    [_applicationId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLicenseFee"
  ): TypedContractMethod<
    [_licenseType: BigNumberish, _newFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ApplicationReviewed"
  ): TypedContractEvent<
    ApplicationReviewedEvent.InputTuple,
    ApplicationReviewedEvent.OutputTuple,
    ApplicationReviewedEvent.OutputObject
  >;
  getEvent(
    key: "ApplicationSubmitted"
  ): TypedContractEvent<
    ApplicationSubmittedEvent.InputTuple,
    ApplicationSubmittedEvent.OutputTuple,
    ApplicationSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "BondForfeited"
  ): TypedContractEvent<
    BondForfeitedEvent.InputTuple,
    BondForfeitedEvent.OutputTuple,
    BondForfeitedEvent.OutputObject
  >;
  getEvent(
    key: "BondPosted"
  ): TypedContractEvent<
    BondPostedEvent.InputTuple,
    BondPostedEvent.OutputTuple,
    BondPostedEvent.OutputObject
  >;
  getEvent(
    key: "BondReleased"
  ): TypedContractEvent<
    BondReleasedEvent.InputTuple,
    BondReleasedEvent.OutputTuple,
    BondReleasedEvent.OutputObject
  >;
  getEvent(
    key: "ComplianceInspection"
  ): TypedContractEvent<
    ComplianceInspectionEvent.InputTuple,
    ComplianceInspectionEvent.OutputTuple,
    ComplianceInspectionEvent.OutputObject
  >;
  getEvent(
    key: "LicenseApproved"
  ): TypedContractEvent<
    LicenseApprovedEvent.InputTuple,
    LicenseApprovedEvent.OutputTuple,
    LicenseApprovedEvent.OutputObject
  >;
  getEvent(
    key: "LicenseRenewed"
  ): TypedContractEvent<
    LicenseRenewedEvent.InputTuple,
    LicenseRenewedEvent.OutputTuple,
    LicenseRenewedEvent.OutputObject
  >;
  getEvent(
    key: "LicenseRevoked"
  ): TypedContractEvent<
    LicenseRevokedEvent.InputTuple,
    LicenseRevokedEvent.OutputTuple,
    LicenseRevokedEvent.OutputObject
  >;
  getEvent(
    key: "LicenseSuspended"
  ): TypedContractEvent<
    LicenseSuspendedEvent.InputTuple,
    LicenseSuspendedEvent.OutputTuple,
    LicenseSuspendedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "ApplicationReviewed(uint256,address,uint8)": TypedContractEvent<
      ApplicationReviewedEvent.InputTuple,
      ApplicationReviewedEvent.OutputTuple,
      ApplicationReviewedEvent.OutputObject
    >;
    ApplicationReviewed: TypedContractEvent<
      ApplicationReviewedEvent.InputTuple,
      ApplicationReviewedEvent.OutputTuple,
      ApplicationReviewedEvent.OutputObject
    >;

    "ApplicationSubmitted(uint256,address,uint8)": TypedContractEvent<
      ApplicationSubmittedEvent.InputTuple,
      ApplicationSubmittedEvent.OutputTuple,
      ApplicationSubmittedEvent.OutputObject
    >;
    ApplicationSubmitted: TypedContractEvent<
      ApplicationSubmittedEvent.InputTuple,
      ApplicationSubmittedEvent.OutputTuple,
      ApplicationSubmittedEvent.OutputObject
    >;

    "BondForfeited(uint256,uint256)": TypedContractEvent<
      BondForfeitedEvent.InputTuple,
      BondForfeitedEvent.OutputTuple,
      BondForfeitedEvent.OutputObject
    >;
    BondForfeited: TypedContractEvent<
      BondForfeitedEvent.InputTuple,
      BondForfeitedEvent.OutputTuple,
      BondForfeitedEvent.OutputObject
    >;

    "BondPosted(uint256,uint256)": TypedContractEvent<
      BondPostedEvent.InputTuple,
      BondPostedEvent.OutputTuple,
      BondPostedEvent.OutputObject
    >;
    BondPosted: TypedContractEvent<
      BondPostedEvent.InputTuple,
      BondPostedEvent.OutputTuple,
      BondPostedEvent.OutputObject
    >;

    "BondReleased(uint256,uint256)": TypedContractEvent<
      BondReleasedEvent.InputTuple,
      BondReleasedEvent.OutputTuple,
      BondReleasedEvent.OutputObject
    >;
    BondReleased: TypedContractEvent<
      BondReleasedEvent.InputTuple,
      BondReleasedEvent.OutputTuple,
      BondReleasedEvent.OutputObject
    >;

    "ComplianceInspection(uint256,address,bool)": TypedContractEvent<
      ComplianceInspectionEvent.InputTuple,
      ComplianceInspectionEvent.OutputTuple,
      ComplianceInspectionEvent.OutputObject
    >;
    ComplianceInspection: TypedContractEvent<
      ComplianceInspectionEvent.InputTuple,
      ComplianceInspectionEvent.OutputTuple,
      ComplianceInspectionEvent.OutputObject
    >;

    "LicenseApproved(uint256,uint256)": TypedContractEvent<
      LicenseApprovedEvent.InputTuple,
      LicenseApprovedEvent.OutputTuple,
      LicenseApprovedEvent.OutputObject
    >;
    LicenseApproved: TypedContractEvent<
      LicenseApprovedEvent.InputTuple,
      LicenseApprovedEvent.OutputTuple,
      LicenseApprovedEvent.OutputObject
    >;

    "LicenseRenewed(uint256,uint256)": TypedContractEvent<
      LicenseRenewedEvent.InputTuple,
      LicenseRenewedEvent.OutputTuple,
      LicenseRenewedEvent.OutputObject
    >;
    LicenseRenewed: TypedContractEvent<
      LicenseRenewedEvent.InputTuple,
      LicenseRenewedEvent.OutputTuple,
      LicenseRenewedEvent.OutputObject
    >;

    "LicenseRevoked(uint256,string)": TypedContractEvent<
      LicenseRevokedEvent.InputTuple,
      LicenseRevokedEvent.OutputTuple,
      LicenseRevokedEvent.OutputObject
    >;
    LicenseRevoked: TypedContractEvent<
      LicenseRevokedEvent.InputTuple,
      LicenseRevokedEvent.OutputTuple,
      LicenseRevokedEvent.OutputObject
    >;

    "LicenseSuspended(uint256,string)": TypedContractEvent<
      LicenseSuspendedEvent.InputTuple,
      LicenseSuspendedEvent.OutputTuple,
      LicenseSuspendedEvent.OutputObject
    >;
    LicenseSuspended: TypedContractEvent<
      LicenseSuspendedEvent.InputTuple,
      LicenseSuspendedEvent.OutputTuple,
      LicenseSuspendedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
