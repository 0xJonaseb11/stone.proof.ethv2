/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace RolesManager {
  export type MineralHistoryStruct = {
    id: string;
    fieldChanged: string;
    newValue: string;
    updatedBy: AddressLike;
    timestamp: BigNumberish;
  };

  export type MineralHistoryStructOutput = [
    id: string,
    fieldChanged: string,
    newValue: string,
    updatedBy: string,
    timestamp: bigint
  ] & {
    id: string;
    fieldChanged: string;
    newValue: string;
    updatedBy: string;
    timestamp: bigint;
  };
}

export interface DisputeResolutionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUDITOR_ROLE"
      | "BUYER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "INSPECTOR_ROLE"
      | "MINER_ROLE"
      | "REFINER_ROLE"
      | "TRANSPORTER_ROLE"
      | "_auditMineral"
      | "assignAuditor"
      | "assignBuyer"
      | "assignInspector"
      | "assignMiner"
      | "assignRefiner"
      | "assignTransporter"
      | "checkAndEscalateDispute"
      | "checkAuditAndInspectionStatus"
      | "disputeCount"
      | "disputes"
      | "getAllRoleCounts"
      | "getMineralHistory"
      | "getRoleAdmin"
      | "getRoleMemberCount"
      | "getRolesForAddress"
      | "grantRole"
      | "hasAdminRole"
      | "hasAuditorRole"
      | "hasBuyerRole"
      | "hasInspectorRole"
      | "hasMinerRole"
      | "hasRefinerRole"
      | "hasRole"
      | "hasTransporterRole"
      | "inspectMineral"
      | "isMineralRegistered"
      | "mineralDetails"
      | "mineralHistories"
      | "purchaseMineral"
      | "raiseDispute"
      | "refineMineral"
      | "registerMineral"
      | "renounceRole"
      | "resolveDispute"
      | "resolveEscalatedDisputes"
      | "revokeAuditor"
      | "revokeBuyer"
      | "revokeInspector"
      | "revokeMiner"
      | "revokeRefiner"
      | "revokeRole"
      | "revokeTransporter"
      | "roleMemberCount"
      | "supportsInterface"
      | "transferMineral"
      | "voteOnDispute"
      | "votingDuration"
      | "votingThreshold"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminRoleAssigned"
      | "AdminRoleRevoked"
      | "AuditorRoleAssigned"
      | "AuditorRoleRevoked"
      | "BuyerRoleAssigned"
      | "BuyerRoleRevoked"
      | "DisputeClosedUnresolved"
      | "DisputeEscalated"
      | "DisputeRaised"
      | "DisputeRejected"
      | "DisputeResolved"
      | "InspectorRoleAssigned"
      | "InspectorRoleRevoked"
      | "MinerRoleAssigned"
      | "MinerRoleRevoked"
      | "MineralAudited"
      | "MineralInspected"
      | "MineralPurchased"
      | "MineralReadyToTrade"
      | "MineralRefined"
      | "MineralRegistered"
      | "MineralTransported"
      | "RefinerRoleAssigned"
      | "RefinerRoleRevoked"
      | "RoleAdminChanged"
      | "RoleAssigned"
      | "RoleGranted"
      | "RoleRevoked(bytes32,address,address)"
      | "RoleRevoked(bytes32,address,address,uint256)"
      | "TransporterRoleAssigned"
      | "TransporterRoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BUYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSPECTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFINER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSPORTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_auditMineral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assignAuditor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignBuyer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignInspector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignMiner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignRefiner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignTransporter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAndEscalateDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAuditAndInspectionStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRoleCounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMineralHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolesForAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuditorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasBuyerRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasInspectorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMinerRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRefinerRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTransporterRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inspectMineral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMineralRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mineralDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mineralHistories",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseMineral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [string, AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refineMineral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMineral",
    values: [string, string, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveEscalatedDisputes",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuditor",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeBuyer",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeInspector",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMiner",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRefiner",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeTransporter",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMineral",
    values: [string, AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnDispute",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingThreshold",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AUDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BUYER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSPECTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MINER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REFINER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSPORTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_auditMineral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignAuditor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignRefiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignTransporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAndEscalateDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAuditAndInspectionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRoleCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMineralHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolesForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAuditorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasBuyerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasInspectorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMinerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRefinerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasTransporterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inspectMineral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMineralRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mineralDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mineralHistories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseMineral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refineMineral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMineral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveEscalatedDisputes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuditor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRefiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeTransporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMineral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingThreshold",
    data: BytesLike
  ): Result;
}

export namespace AdminRoleAssignedEvent {
  export type InputTuple = [assignee: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [assignee: string, timestamp: bigint];
  export interface OutputObject {
    assignee: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRoleRevokedEvent {
  export type InputTuple = [
    revokee: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    revokee: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    revokee: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditorRoleAssignedEvent {
  export type InputTuple = [assignee: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [assignee: string, timestamp: bigint];
  export interface OutputObject {
    assignee: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditorRoleRevokedEvent {
  export type InputTuple = [
    revokee: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    revokee: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    revokee: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyerRoleAssignedEvent {
  export type InputTuple = [assignee: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [assignee: string, timestamp: bigint];
  export interface OutputObject {
    assignee: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyerRoleRevokedEvent {
  export type InputTuple = [
    revokee: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    revokee: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    revokee: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeClosedUnresolvedEvent {
  export type InputTuple = [
    closedBy: AddressLike,
    disputeId: BigNumberish,
    mineralId: string,
    complainant: AddressLike,
    defendant: AddressLike,
    details: string,
    closedUnresolvedAt: BigNumberish
  ];
  export type OutputTuple = [
    closedBy: string,
    disputeId: bigint,
    mineralId: string,
    complainant: string,
    defendant: string,
    details: string,
    closedUnresolvedAt: bigint
  ];
  export interface OutputObject {
    closedBy: string;
    disputeId: bigint;
    mineralId: string;
    complainant: string;
    defendant: string;
    details: string;
    closedUnresolvedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeEscalatedEvent {
  export type InputTuple = [disputeId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [disputeId: bigint, timestamp: bigint];
  export interface OutputObject {
    disputeId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    mineralId: string,
    complainant: AddressLike,
    defendant: AddressLike,
    details: string,
    raisedAt: BigNumberish
  ];
  export type OutputTuple = [
    disputeId: bigint,
    mineralId: string,
    complainant: string,
    defendant: string,
    details: string,
    raisedAt: bigint
  ];
  export interface OutputObject {
    disputeId: bigint;
    mineralId: string;
    complainant: string;
    defendant: string;
    details: string;
    raisedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRejectedEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    disputeId: bigint,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    disputeId: bigint;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    resolutionDetails: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    disputeId: bigint,
    resolutionDetails: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    disputeId: bigint;
    resolutionDetails: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InspectorRoleAssignedEvent {
  export type InputTuple = [assignee: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [assignee: string, timestamp: bigint];
  export interface OutputObject {
    assignee: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InspectorRoleRevokedEvent {
  export type InputTuple = [
    revokee: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    revokee: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    revokee: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinerRoleAssignedEvent {
  export type InputTuple = [assignee: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [assignee: string, timestamp: bigint];
  export interface OutputObject {
    assignee: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinerRoleRevokedEvent {
  export type InputTuple = [
    revokee: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    revokee: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    revokee: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MineralAuditedEvent {
  export type InputTuple = [
    mineralId: string,
    status: string,
    auditor: AddressLike,
    auditedAt: BigNumberish
  ];
  export type OutputTuple = [
    mineralId: string,
    status: string,
    auditor: string,
    auditedAt: bigint
  ];
  export interface OutputObject {
    mineralId: string;
    status: string;
    auditor: string;
    auditedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MineralInspectedEvent {
  export type InputTuple = [
    mineralId: string,
    mineralStatus: string,
    inspector: AddressLike,
    inspectedAt: BigNumberish
  ];
  export type OutputTuple = [
    mineralId: string,
    mineralStatus: string,
    inspector: string,
    inspectedAt: bigint
  ];
  export interface OutputObject {
    mineralId: string;
    mineralStatus: string;
    inspector: string;
    inspectedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MineralPurchasedEvent {
  export type InputTuple = [
    mineralId: string,
    buyer: AddressLike,
    purchasedAt: BigNumberish
  ];
  export type OutputTuple = [
    mineralId: string,
    buyer: string,
    purchasedAt: bigint
  ];
  export interface OutputObject {
    mineralId: string;
    buyer: string;
    purchasedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MineralReadyToTradeEvent {
  export type InputTuple = [
    mineralId: string,
    ApprovedBy: AddressLike,
    status: string,
    inspectionDate: BigNumberish
  ];
  export type OutputTuple = [
    mineralId: string,
    ApprovedBy: string,
    status: string,
    inspectionDate: bigint
  ];
  export interface OutputObject {
    mineralId: string;
    ApprovedBy: string;
    status: string;
    inspectionDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MineralRefinedEvent {
  export type InputTuple = [
    mineralId: string,
    refineryReport: string,
    refiner: AddressLike,
    refinedAt: BigNumberish
  ];
  export type OutputTuple = [
    mineralId: string,
    refineryReport: string,
    refiner: string,
    refinedAt: bigint
  ];
  export interface OutputObject {
    mineralId: string;
    refineryReport: string;
    refiner: string;
    refinedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MineralRegisteredEvent {
  export type InputTuple = [
    mineralId: string,
    mineralName: string,
    mineralType: string,
    origin: string,
    weight: BigNumberish,
    purityPercentage: BigNumberish,
    miner: AddressLike,
    registeredAt: BigNumberish
  ];
  export type OutputTuple = [
    mineralId: string,
    mineralName: string,
    mineralType: string,
    origin: string,
    weight: bigint,
    purityPercentage: bigint,
    miner: string,
    registeredAt: bigint
  ];
  export interface OutputObject {
    mineralId: string;
    mineralName: string;
    mineralType: string;
    origin: string;
    weight: bigint;
    purityPercentage: bigint;
    miner: string;
    registeredAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MineralTransportedEvent {
  export type InputTuple = [
    mineralId: string,
    transporter: AddressLike,
    receivingParty: AddressLike,
    origin: string,
    destination: string,
    transportedAt: BigNumberish
  ];
  export type OutputTuple = [
    mineralId: string,
    transporter: string,
    receivingParty: string,
    origin: string,
    destination: string,
    transportedAt: bigint
  ];
  export interface OutputObject {
    mineralId: string;
    transporter: string;
    receivingParty: string;
    origin: string;
    destination: string;
    transportedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefinerRoleAssignedEvent {
  export type InputTuple = [assignee: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [assignee: string, timestamp: bigint];
  export interface OutputObject {
    assignee: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefinerRoleRevokedEvent {
  export type InputTuple = [
    revokee: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    revokee: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    revokee: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAssignedEvent {
  export type InputTuple = [
    account: AddressLike,
    role: BytesLike,
    roleAssignedAt: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    role: string,
    roleAssignedAt: bigint
  ];
  export interface OutputObject {
    account: string;
    role: string;
    roleAssignedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevoked_bytes32_address_address_Event {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevoked_bytes32_address_address_uint256_Event {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    revoker: AddressLike,
    roleRevokedAt: BigNumberish
  ];
  export type OutputTuple = [
    role: string,
    account: string,
    revoker: string,
    roleRevokedAt: bigint
  ];
  export interface OutputObject {
    role: string;
    account: string;
    revoker: string;
    roleRevokedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransporterRoleAssignedEvent {
  export type InputTuple = [assignee: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [assignee: string, timestamp: bigint];
  export interface OutputObject {
    assignee: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransporterRoleRevokedEvent {
  export type InputTuple = [
    revokee: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    revokee: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    revokee: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DisputeResolution extends BaseContract {
  connect(runner?: ContractRunner | null): DisputeResolution;
  waitForDeployment(): Promise<this>;

  interface: DisputeResolutionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUDITOR_ROLE: TypedContractMethod<[], [string], "view">;

  BUYER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  INSPECTOR_ROLE: TypedContractMethod<[], [string], "view">;

  MINER_ROLE: TypedContractMethod<[], [string], "view">;

  REFINER_ROLE: TypedContractMethod<[], [string], "view">;

  TRANSPORTER_ROLE: TypedContractMethod<[], [string], "view">;

  _auditMineral: TypedContractMethod<
    [mineralId: string, report: string],
    [void],
    "nonpayable"
  >;

  assignAuditor: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  assignBuyer: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  assignInspector: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  assignMiner: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  assignRefiner: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  assignTransporter: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  checkAndEscalateDispute: TypedContractMethod<
    [disputeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkAuditAndInspectionStatus: TypedContractMethod<
    [mineralId: string],
    [[boolean, boolean] & { isAudited: boolean; isInspected: boolean }],
    "nonpayable"
  >;

  disputeCount: TypedContractMethod<[], [bigint], "view">;

  disputes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        disputeId: bigint;
        mineralId: string;
        complainant: string;
        defendant: string;
        details: string;
        evidence: string;
        status: bigint;
        createdAt: bigint;
        resolvedAt: bigint;
        approveVotes: bigint;
        rejectVotes: bigint;
        votingDeadline: bigint;
      }
    ],
    "view"
  >;

  getAllRoleCounts: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        minerCount: bigint;
        refinerCount: bigint;
        transporterCount: bigint;
        auditorCount: bigint;
        inspectorCount: bigint;
        buyerCount: bigint;
      }
    ],
    "view"
  >;

  getMineralHistory: TypedContractMethod<
    [mineralId: string],
    [RolesManager.MineralHistoryStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  getRolesForAddress: TypedContractMethod<
    [account: AddressLike],
    [string[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAdminRole: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  hasAuditorRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasBuyerRole: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  hasInspectorRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasMinerRole: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  hasRefinerRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hasTransporterRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  inspectMineral: TypedContractMethod<
    [mineralId: string, report: string],
    [void],
    "nonpayable"
  >;

  isMineralRegistered: TypedContractMethod<
    [mineralId: string],
    [boolean],
    "nonpayable"
  >;

  mineralDetails: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint
      ] & {
        id: string;
        name: string;
        origin: string;
        mineralType: string;
        weight: bigint;
        purityPercentage: bigint;
        storageConditions: string;
        registeredBy: string;
        currentStatus: string;
        currentLocation: string;
        currentHandler: string;
        isPurchased: boolean;
        isRefined: boolean;
        isAudited: boolean;
        isInspected: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  mineralHistories: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, string, string, bigint] & {
        id: string;
        fieldChanged: string;
        newValue: string;
        updatedBy: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  purchaseMineral: TypedContractMethod<
    [mineralId: string],
    [void],
    "nonpayable"
  >;

  raiseDispute: TypedContractMethod<
    [
      mineralId: string,
      defendant: AddressLike,
      details: string,
      evidence: string
    ],
    [void],
    "nonpayable"
  >;

  refineMineral: TypedContractMethod<
    [mineralId: string, report: string],
    [void],
    "nonpayable"
  >;

  registerMineral: TypedContractMethod<
    [
      _name: string,
      _mineralType: string,
      _weight: BigNumberish,
      _origin: string,
      _purityPercentage: BigNumberish,
      _storageConditions: string
    ],
    [string],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  resolveDispute: TypedContractMethod<
    [disputeId: BigNumberish, resolutionDetails: string],
    [void],
    "nonpayable"
  >;

  resolveEscalatedDisputes: TypedContractMethod<
    [disputeId: BigNumberish, resolutionDetails: string],
    [void],
    "nonpayable"
  >;

  revokeAuditor: TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  revokeBuyer: TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  revokeInspector: TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  revokeMiner: TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  revokeRefiner: TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeTransporter: TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  roleMemberCount: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferMineral: TypedContractMethod<
    [
      mineralId: string,
      _receivingParty: AddressLike,
      _origin: string,
      _destination: string
    ],
    [void],
    "nonpayable"
  >;

  voteOnDispute: TypedContractMethod<
    [disputeId: BigNumberish, approve: boolean],
    [void],
    "nonpayable"
  >;

  votingDuration: TypedContractMethod<[], [bigint], "view">;

  votingThreshold: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUDITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BUYER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INSPECTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REFINER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRANSPORTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_auditMineral"
  ): TypedContractMethod<
    [mineralId: string, report: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assignAuditor"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignBuyer"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignInspector"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignMiner"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignRefiner"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignTransporter"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkAndEscalateDispute"
  ): TypedContractMethod<[disputeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkAuditAndInspectionStatus"
  ): TypedContractMethod<
    [mineralId: string],
    [[boolean, boolean] & { isAudited: boolean; isInspected: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disputeCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disputes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        disputeId: bigint;
        mineralId: string;
        complainant: string;
        defendant: string;
        details: string;
        evidence: string;
        status: bigint;
        createdAt: bigint;
        resolvedAt: bigint;
        approveVotes: bigint;
        rejectVotes: bigint;
        votingDeadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllRoleCounts"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        minerCount: bigint;
        refinerCount: bigint;
        transporterCount: bigint;
        auditorCount: bigint;
        inspectorCount: bigint;
        buyerCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMineralHistory"
  ): TypedContractMethod<
    [mineralId: string],
    [RolesManager.MineralHistoryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRolesForAddress"
  ): TypedContractMethod<[account: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAdminRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasAuditorRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasBuyerRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasInspectorRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasMinerRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRefinerRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasTransporterRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "inspectMineral"
  ): TypedContractMethod<
    [mineralId: string, report: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isMineralRegistered"
  ): TypedContractMethod<[mineralId: string], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "mineralDetails"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint
      ] & {
        id: string;
        name: string;
        origin: string;
        mineralType: string;
        weight: bigint;
        purityPercentage: bigint;
        storageConditions: string;
        registeredBy: string;
        currentStatus: string;
        currentLocation: string;
        currentHandler: string;
        isPurchased: boolean;
        isRefined: boolean;
        isAudited: boolean;
        isInspected: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "mineralHistories"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, string, string, bigint] & {
        id: string;
        fieldChanged: string;
        newValue: string;
        updatedBy: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseMineral"
  ): TypedContractMethod<[mineralId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<
    [
      mineralId: string,
      defendant: AddressLike,
      details: string,
      evidence: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refineMineral"
  ): TypedContractMethod<
    [mineralId: string, report: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerMineral"
  ): TypedContractMethod<
    [
      _name: string,
      _mineralType: string,
      _weight: BigNumberish,
      _origin: string,
      _purityPercentage: BigNumberish,
      _storageConditions: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [disputeId: BigNumberish, resolutionDetails: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveEscalatedDisputes"
  ): TypedContractMethod<
    [disputeId: BigNumberish, resolutionDetails: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAuditor"
  ): TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeBuyer"
  ): TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeInspector"
  ): TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeMiner"
  ): TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRefiner"
  ): TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeTransporter"
  ): TypedContractMethod<
    [account: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleMemberCount"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferMineral"
  ): TypedContractMethod<
    [
      mineralId: string,
      _receivingParty: AddressLike,
      _origin: string,
      _destination: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteOnDispute"
  ): TypedContractMethod<
    [disputeId: BigNumberish, approve: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingThreshold"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AdminRoleAssigned"
  ): TypedContractEvent<
    AdminRoleAssignedEvent.InputTuple,
    AdminRoleAssignedEvent.OutputTuple,
    AdminRoleAssignedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRoleRevoked"
  ): TypedContractEvent<
    AdminRoleRevokedEvent.InputTuple,
    AdminRoleRevokedEvent.OutputTuple,
    AdminRoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "AuditorRoleAssigned"
  ): TypedContractEvent<
    AuditorRoleAssignedEvent.InputTuple,
    AuditorRoleAssignedEvent.OutputTuple,
    AuditorRoleAssignedEvent.OutputObject
  >;
  getEvent(
    key: "AuditorRoleRevoked"
  ): TypedContractEvent<
    AuditorRoleRevokedEvent.InputTuple,
    AuditorRoleRevokedEvent.OutputTuple,
    AuditorRoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "BuyerRoleAssigned"
  ): TypedContractEvent<
    BuyerRoleAssignedEvent.InputTuple,
    BuyerRoleAssignedEvent.OutputTuple,
    BuyerRoleAssignedEvent.OutputObject
  >;
  getEvent(
    key: "BuyerRoleRevoked"
  ): TypedContractEvent<
    BuyerRoleRevokedEvent.InputTuple,
    BuyerRoleRevokedEvent.OutputTuple,
    BuyerRoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeClosedUnresolved"
  ): TypedContractEvent<
    DisputeClosedUnresolvedEvent.InputTuple,
    DisputeClosedUnresolvedEvent.OutputTuple,
    DisputeClosedUnresolvedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeEscalated"
  ): TypedContractEvent<
    DisputeEscalatedEvent.InputTuple,
    DisputeEscalatedEvent.OutputTuple,
    DisputeEscalatedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRejected"
  ): TypedContractEvent<
    DisputeRejectedEvent.InputTuple,
    DisputeRejectedEvent.OutputTuple,
    DisputeRejectedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "InspectorRoleAssigned"
  ): TypedContractEvent<
    InspectorRoleAssignedEvent.InputTuple,
    InspectorRoleAssignedEvent.OutputTuple,
    InspectorRoleAssignedEvent.OutputObject
  >;
  getEvent(
    key: "InspectorRoleRevoked"
  ): TypedContractEvent<
    InspectorRoleRevokedEvent.InputTuple,
    InspectorRoleRevokedEvent.OutputTuple,
    InspectorRoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "MinerRoleAssigned"
  ): TypedContractEvent<
    MinerRoleAssignedEvent.InputTuple,
    MinerRoleAssignedEvent.OutputTuple,
    MinerRoleAssignedEvent.OutputObject
  >;
  getEvent(
    key: "MinerRoleRevoked"
  ): TypedContractEvent<
    MinerRoleRevokedEvent.InputTuple,
    MinerRoleRevokedEvent.OutputTuple,
    MinerRoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "MineralAudited"
  ): TypedContractEvent<
    MineralAuditedEvent.InputTuple,
    MineralAuditedEvent.OutputTuple,
    MineralAuditedEvent.OutputObject
  >;
  getEvent(
    key: "MineralInspected"
  ): TypedContractEvent<
    MineralInspectedEvent.InputTuple,
    MineralInspectedEvent.OutputTuple,
    MineralInspectedEvent.OutputObject
  >;
  getEvent(
    key: "MineralPurchased"
  ): TypedContractEvent<
    MineralPurchasedEvent.InputTuple,
    MineralPurchasedEvent.OutputTuple,
    MineralPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "MineralReadyToTrade"
  ): TypedContractEvent<
    MineralReadyToTradeEvent.InputTuple,
    MineralReadyToTradeEvent.OutputTuple,
    MineralReadyToTradeEvent.OutputObject
  >;
  getEvent(
    key: "MineralRefined"
  ): TypedContractEvent<
    MineralRefinedEvent.InputTuple,
    MineralRefinedEvent.OutputTuple,
    MineralRefinedEvent.OutputObject
  >;
  getEvent(
    key: "MineralRegistered"
  ): TypedContractEvent<
    MineralRegisteredEvent.InputTuple,
    MineralRegisteredEvent.OutputTuple,
    MineralRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MineralTransported"
  ): TypedContractEvent<
    MineralTransportedEvent.InputTuple,
    MineralTransportedEvent.OutputTuple,
    MineralTransportedEvent.OutputObject
  >;
  getEvent(
    key: "RefinerRoleAssigned"
  ): TypedContractEvent<
    RefinerRoleAssignedEvent.InputTuple,
    RefinerRoleAssignedEvent.OutputTuple,
    RefinerRoleAssignedEvent.OutputObject
  >;
  getEvent(
    key: "RefinerRoleRevoked"
  ): TypedContractEvent<
    RefinerRoleRevokedEvent.InputTuple,
    RefinerRoleRevokedEvent.OutputTuple,
    RefinerRoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAssigned"
  ): TypedContractEvent<
    RoleAssignedEvent.InputTuple,
    RoleAssignedEvent.OutputTuple,
    RoleAssignedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked(bytes32,address,address)"
  ): TypedContractEvent<
    RoleRevoked_bytes32_address_address_Event.InputTuple,
    RoleRevoked_bytes32_address_address_Event.OutputTuple,
    RoleRevoked_bytes32_address_address_Event.OutputObject
  >;
  getEvent(
    key: "RoleRevoked(bytes32,address,address,uint256)"
  ): TypedContractEvent<
    RoleRevoked_bytes32_address_address_uint256_Event.InputTuple,
    RoleRevoked_bytes32_address_address_uint256_Event.OutputTuple,
    RoleRevoked_bytes32_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "TransporterRoleAssigned"
  ): TypedContractEvent<
    TransporterRoleAssignedEvent.InputTuple,
    TransporterRoleAssignedEvent.OutputTuple,
    TransporterRoleAssignedEvent.OutputObject
  >;
  getEvent(
    key: "TransporterRoleRevoked"
  ): TypedContractEvent<
    TransporterRoleRevokedEvent.InputTuple,
    TransporterRoleRevokedEvent.OutputTuple,
    TransporterRoleRevokedEvent.OutputObject
  >;

  filters: {
    "AdminRoleAssigned(address,uint256)": TypedContractEvent<
      AdminRoleAssignedEvent.InputTuple,
      AdminRoleAssignedEvent.OutputTuple,
      AdminRoleAssignedEvent.OutputObject
    >;
    AdminRoleAssigned: TypedContractEvent<
      AdminRoleAssignedEvent.InputTuple,
      AdminRoleAssignedEvent.OutputTuple,
      AdminRoleAssignedEvent.OutputObject
    >;

    "AdminRoleRevoked(address,string,uint256)": TypedContractEvent<
      AdminRoleRevokedEvent.InputTuple,
      AdminRoleRevokedEvent.OutputTuple,
      AdminRoleRevokedEvent.OutputObject
    >;
    AdminRoleRevoked: TypedContractEvent<
      AdminRoleRevokedEvent.InputTuple,
      AdminRoleRevokedEvent.OutputTuple,
      AdminRoleRevokedEvent.OutputObject
    >;

    "AuditorRoleAssigned(address,uint256)": TypedContractEvent<
      AuditorRoleAssignedEvent.InputTuple,
      AuditorRoleAssignedEvent.OutputTuple,
      AuditorRoleAssignedEvent.OutputObject
    >;
    AuditorRoleAssigned: TypedContractEvent<
      AuditorRoleAssignedEvent.InputTuple,
      AuditorRoleAssignedEvent.OutputTuple,
      AuditorRoleAssignedEvent.OutputObject
    >;

    "AuditorRoleRevoked(address,string,uint256)": TypedContractEvent<
      AuditorRoleRevokedEvent.InputTuple,
      AuditorRoleRevokedEvent.OutputTuple,
      AuditorRoleRevokedEvent.OutputObject
    >;
    AuditorRoleRevoked: TypedContractEvent<
      AuditorRoleRevokedEvent.InputTuple,
      AuditorRoleRevokedEvent.OutputTuple,
      AuditorRoleRevokedEvent.OutputObject
    >;

    "BuyerRoleAssigned(address,uint256)": TypedContractEvent<
      BuyerRoleAssignedEvent.InputTuple,
      BuyerRoleAssignedEvent.OutputTuple,
      BuyerRoleAssignedEvent.OutputObject
    >;
    BuyerRoleAssigned: TypedContractEvent<
      BuyerRoleAssignedEvent.InputTuple,
      BuyerRoleAssignedEvent.OutputTuple,
      BuyerRoleAssignedEvent.OutputObject
    >;

    "BuyerRoleRevoked(address,string,uint256)": TypedContractEvent<
      BuyerRoleRevokedEvent.InputTuple,
      BuyerRoleRevokedEvent.OutputTuple,
      BuyerRoleRevokedEvent.OutputObject
    >;
    BuyerRoleRevoked: TypedContractEvent<
      BuyerRoleRevokedEvent.InputTuple,
      BuyerRoleRevokedEvent.OutputTuple,
      BuyerRoleRevokedEvent.OutputObject
    >;

    "DisputeClosedUnresolved(address,uint256,string,address,address,string,uint256)": TypedContractEvent<
      DisputeClosedUnresolvedEvent.InputTuple,
      DisputeClosedUnresolvedEvent.OutputTuple,
      DisputeClosedUnresolvedEvent.OutputObject
    >;
    DisputeClosedUnresolved: TypedContractEvent<
      DisputeClosedUnresolvedEvent.InputTuple,
      DisputeClosedUnresolvedEvent.OutputTuple,
      DisputeClosedUnresolvedEvent.OutputObject
    >;

    "DisputeEscalated(uint256,uint256)": TypedContractEvent<
      DisputeEscalatedEvent.InputTuple,
      DisputeEscalatedEvent.OutputTuple,
      DisputeEscalatedEvent.OutputObject
    >;
    DisputeEscalated: TypedContractEvent<
      DisputeEscalatedEvent.InputTuple,
      DisputeEscalatedEvent.OutputTuple,
      DisputeEscalatedEvent.OutputObject
    >;

    "DisputeRaised(uint256,string,address,address,string,uint256)": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "DisputeRejected(uint256,string,uint256)": TypedContractEvent<
      DisputeRejectedEvent.InputTuple,
      DisputeRejectedEvent.OutputTuple,
      DisputeRejectedEvent.OutputObject
    >;
    DisputeRejected: TypedContractEvent<
      DisputeRejectedEvent.InputTuple,
      DisputeRejectedEvent.OutputTuple,
      DisputeRejectedEvent.OutputObject
    >;

    "DisputeResolved(uint256,string,uint256)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "InspectorRoleAssigned(address,uint256)": TypedContractEvent<
      InspectorRoleAssignedEvent.InputTuple,
      InspectorRoleAssignedEvent.OutputTuple,
      InspectorRoleAssignedEvent.OutputObject
    >;
    InspectorRoleAssigned: TypedContractEvent<
      InspectorRoleAssignedEvent.InputTuple,
      InspectorRoleAssignedEvent.OutputTuple,
      InspectorRoleAssignedEvent.OutputObject
    >;

    "InspectorRoleRevoked(address,string,uint256)": TypedContractEvent<
      InspectorRoleRevokedEvent.InputTuple,
      InspectorRoleRevokedEvent.OutputTuple,
      InspectorRoleRevokedEvent.OutputObject
    >;
    InspectorRoleRevoked: TypedContractEvent<
      InspectorRoleRevokedEvent.InputTuple,
      InspectorRoleRevokedEvent.OutputTuple,
      InspectorRoleRevokedEvent.OutputObject
    >;

    "MinerRoleAssigned(address,uint256)": TypedContractEvent<
      MinerRoleAssignedEvent.InputTuple,
      MinerRoleAssignedEvent.OutputTuple,
      MinerRoleAssignedEvent.OutputObject
    >;
    MinerRoleAssigned: TypedContractEvent<
      MinerRoleAssignedEvent.InputTuple,
      MinerRoleAssignedEvent.OutputTuple,
      MinerRoleAssignedEvent.OutputObject
    >;

    "MinerRoleRevoked(address,string,uint256)": TypedContractEvent<
      MinerRoleRevokedEvent.InputTuple,
      MinerRoleRevokedEvent.OutputTuple,
      MinerRoleRevokedEvent.OutputObject
    >;
    MinerRoleRevoked: TypedContractEvent<
      MinerRoleRevokedEvent.InputTuple,
      MinerRoleRevokedEvent.OutputTuple,
      MinerRoleRevokedEvent.OutputObject
    >;

    "MineralAudited(string,string,address,uint256)": TypedContractEvent<
      MineralAuditedEvent.InputTuple,
      MineralAuditedEvent.OutputTuple,
      MineralAuditedEvent.OutputObject
    >;
    MineralAudited: TypedContractEvent<
      MineralAuditedEvent.InputTuple,
      MineralAuditedEvent.OutputTuple,
      MineralAuditedEvent.OutputObject
    >;

    "MineralInspected(string,string,address,uint256)": TypedContractEvent<
      MineralInspectedEvent.InputTuple,
      MineralInspectedEvent.OutputTuple,
      MineralInspectedEvent.OutputObject
    >;
    MineralInspected: TypedContractEvent<
      MineralInspectedEvent.InputTuple,
      MineralInspectedEvent.OutputTuple,
      MineralInspectedEvent.OutputObject
    >;

    "MineralPurchased(string,address,uint256)": TypedContractEvent<
      MineralPurchasedEvent.InputTuple,
      MineralPurchasedEvent.OutputTuple,
      MineralPurchasedEvent.OutputObject
    >;
    MineralPurchased: TypedContractEvent<
      MineralPurchasedEvent.InputTuple,
      MineralPurchasedEvent.OutputTuple,
      MineralPurchasedEvent.OutputObject
    >;

    "MineralReadyToTrade(string,address,string,uint256)": TypedContractEvent<
      MineralReadyToTradeEvent.InputTuple,
      MineralReadyToTradeEvent.OutputTuple,
      MineralReadyToTradeEvent.OutputObject
    >;
    MineralReadyToTrade: TypedContractEvent<
      MineralReadyToTradeEvent.InputTuple,
      MineralReadyToTradeEvent.OutputTuple,
      MineralReadyToTradeEvent.OutputObject
    >;

    "MineralRefined(string,string,address,uint256)": TypedContractEvent<
      MineralRefinedEvent.InputTuple,
      MineralRefinedEvent.OutputTuple,
      MineralRefinedEvent.OutputObject
    >;
    MineralRefined: TypedContractEvent<
      MineralRefinedEvent.InputTuple,
      MineralRefinedEvent.OutputTuple,
      MineralRefinedEvent.OutputObject
    >;

    "MineralRegistered(string,string,string,string,uint256,uint256,address,uint256)": TypedContractEvent<
      MineralRegisteredEvent.InputTuple,
      MineralRegisteredEvent.OutputTuple,
      MineralRegisteredEvent.OutputObject
    >;
    MineralRegistered: TypedContractEvent<
      MineralRegisteredEvent.InputTuple,
      MineralRegisteredEvent.OutputTuple,
      MineralRegisteredEvent.OutputObject
    >;

    "MineralTransported(string,address,address,string,string,uint256)": TypedContractEvent<
      MineralTransportedEvent.InputTuple,
      MineralTransportedEvent.OutputTuple,
      MineralTransportedEvent.OutputObject
    >;
    MineralTransported: TypedContractEvent<
      MineralTransportedEvent.InputTuple,
      MineralTransportedEvent.OutputTuple,
      MineralTransportedEvent.OutputObject
    >;

    "RefinerRoleAssigned(address,uint256)": TypedContractEvent<
      RefinerRoleAssignedEvent.InputTuple,
      RefinerRoleAssignedEvent.OutputTuple,
      RefinerRoleAssignedEvent.OutputObject
    >;
    RefinerRoleAssigned: TypedContractEvent<
      RefinerRoleAssignedEvent.InputTuple,
      RefinerRoleAssignedEvent.OutputTuple,
      RefinerRoleAssignedEvent.OutputObject
    >;

    "RefinerRoleRevoked(address,string,uint256)": TypedContractEvent<
      RefinerRoleRevokedEvent.InputTuple,
      RefinerRoleRevokedEvent.OutputTuple,
      RefinerRoleRevokedEvent.OutputObject
    >;
    RefinerRoleRevoked: TypedContractEvent<
      RefinerRoleRevokedEvent.InputTuple,
      RefinerRoleRevokedEvent.OutputTuple,
      RefinerRoleRevokedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleAssigned(address,bytes32,uint256)": TypedContractEvent<
      RoleAssignedEvent.InputTuple,
      RoleAssignedEvent.OutputTuple,
      RoleAssignedEvent.OutputObject
    >;
    RoleAssigned: TypedContractEvent<
      RoleAssignedEvent.InputTuple,
      RoleAssignedEvent.OutputTuple,
      RoleAssignedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevoked_bytes32_address_address_Event.InputTuple,
      RoleRevoked_bytes32_address_address_Event.OutputTuple,
      RoleRevoked_bytes32_address_address_Event.OutputObject
    >;
    "RoleRevoked(bytes32,address,address,uint256)": TypedContractEvent<
      RoleRevoked_bytes32_address_address_uint256_Event.InputTuple,
      RoleRevoked_bytes32_address_address_uint256_Event.OutputTuple,
      RoleRevoked_bytes32_address_address_uint256_Event.OutputObject
    >;

    "TransporterRoleAssigned(address,uint256)": TypedContractEvent<
      TransporterRoleAssignedEvent.InputTuple,
      TransporterRoleAssignedEvent.OutputTuple,
      TransporterRoleAssignedEvent.OutputObject
    >;
    TransporterRoleAssigned: TypedContractEvent<
      TransporterRoleAssignedEvent.InputTuple,
      TransporterRoleAssignedEvent.OutputTuple,
      TransporterRoleAssignedEvent.OutputObject
    >;

    "TransporterRoleRevoked(address,string,uint256)": TypedContractEvent<
      TransporterRoleRevokedEvent.InputTuple,
      TransporterRoleRevokedEvent.OutputTuple,
      TransporterRoleRevokedEvent.OutputObject
    >;
    TransporterRoleRevoked: TypedContractEvent<
      TransporterRoleRevokedEvent.InputTuple,
      TransporterRoleRevokedEvent.OutputTuple,
      TransporterRoleRevokedEvent.OutputObject
    >;
  };
}
