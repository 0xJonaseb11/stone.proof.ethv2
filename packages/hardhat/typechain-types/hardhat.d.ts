/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "PrivacyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrivacyGuard__factory>;
    getContractFactory(
      name: "RolesManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RolesManager__factory>;
    getContractFactory(
      name: "SupplychainValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SupplychainValidator__factory>;
    getContractFactory(
      name: "DisputeResolution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DisputeResolution__factory>;
    getContractFactory(
      name: "TransactionLog",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransactionLog__factory>;
    getContractFactory(
      name: "LogisticsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LogisticsManager__factory>;
    getContractFactory(
      name: "MineralLicenseManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MineralLicenseManager__factory>;
    getContractFactory(
      name: "MineralRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MineralRegistry__factory>;
    getContractFactory(
      name: "MineralWarehouse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MineralWarehouse__factory>;
    getContractFactory(
      name: "Tokenization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Tokenization__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "StonepProofEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StonepProofEvents__factory>;

    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "PrivacyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PrivacyGuard>;
    getContractAt(
      name: "RolesManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RolesManager>;
    getContractAt(
      name: "SupplychainValidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SupplychainValidator>;
    getContractAt(
      name: "DisputeResolution",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DisputeResolution>;
    getContractAt(
      name: "TransactionLog",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransactionLog>;
    getContractAt(
      name: "LogisticsManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LogisticsManager>;
    getContractAt(
      name: "MineralLicenseManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MineralLicenseManager>;
    getContractAt(
      name: "MineralRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MineralRegistry>;
    getContractAt(
      name: "MineralWarehouse",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MineralWarehouse>;
    getContractAt(
      name: "Tokenization",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Tokenization>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "StonepProofEvents",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StonepProofEvents>;

    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "PrivacyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PrivacyGuard>;
    deployContract(
      name: "RolesManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RolesManager>;
    deployContract(
      name: "SupplychainValidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SupplychainValidator>;
    deployContract(
      name: "DisputeResolution",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DisputeResolution>;
    deployContract(
      name: "TransactionLog",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransactionLog>;
    deployContract(
      name: "LogisticsManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LogisticsManager>;
    deployContract(
      name: "MineralLicenseManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MineralLicenseManager>;
    deployContract(
      name: "MineralRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MineralRegistry>;
    deployContract(
      name: "MineralWarehouse",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MineralWarehouse>;
    deployContract(
      name: "Tokenization",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Tokenization>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "StonepProofEvents",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StonepProofEvents>;

    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "IERC721Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "PrivacyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PrivacyGuard>;
    deployContract(
      name: "RolesManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RolesManager>;
    deployContract(
      name: "SupplychainValidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SupplychainValidator>;
    deployContract(
      name: "DisputeResolution",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DisputeResolution>;
    deployContract(
      name: "TransactionLog",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransactionLog>;
    deployContract(
      name: "LogisticsManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LogisticsManager>;
    deployContract(
      name: "MineralLicenseManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MineralLicenseManager>;
    deployContract(
      name: "MineralRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MineralRegistry>;
    deployContract(
      name: "MineralWarehouse",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MineralWarehouse>;
    deployContract(
      name: "Tokenization",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Tokenization>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "StonepProofEvents",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StonepProofEvents>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
